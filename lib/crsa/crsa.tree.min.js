var CrsaTree = function ($dest) {
    this.$dest = $dest;
    this.$iframe = null;
    this.onSortStart = null;
    this.onSortStop = null;
    this.onSortReceive = null;
    this.currentCrsaPage = null;
    this.ready = false;
    var _this = this;
    var treeFilter = "";
    var incremental = false;
    var $filter = null;
    var max_tree_level;
    var $top_ul = null;
    var $tree_container;
    var selectedElement;
    var $leftHider;
    var openSize = 300;
    var $allTreeNodes = null;
    var fast_def = {name: "dummy", display_name: "tag"};
    var filterNode = function ($li, re) {
        var child_has = false;
        var found = false;
        var $ul = $li.find(">ul");
        $ul.find(">li").each(function (i, li) {
            var $li = $(li);
            if (!incremental || $li.hasClass("child-found") || $li.hasClass("found")) {
                var f = filterNode($li, re);
                found = found || f
            }
        });
        child_has = found;
        if ($li.find(">div").text().match(re)) {
            $li.removeClass("not-found").addClass("found");
            found = true
        } else {
            $li.removeClass("found").addClass("not-found");
            if (child_has) {
                $li.addClass("child-found")
            } else {
                $li.removeClass("child-found")
            }
        }
        return found
    };
    var updateFilter = function () {
        var filter = $filter.val();
        var re = filter.length > 0 ? new RegExp(escapeRegExp(filter), "i") : null;
        incremental = treeFilter.length > 0 && filter.indexOf(treeFilter) == 0 && filter != treeFilter;
        if (treeFilter == "" && filter.length > 0) {
            setTimeout(function () {
            }, 2500)
        }
        if (!incremental && treeFilter.length > 0) {
            $top_ul.find("li").removeClass("not-found found child-found")
        }
        if (re) {
            $top_ul.find(">li").each(function (i, li) {
                filterNode($(li), re)
            })
        }
        treeFilter = filter;
        if (treeFilter.length > 0) {
        } else {
        }
    };
    this.getElementOfTreeNode = function ($li) {
        return getElementOfTreeNode($li)
    };
    var getElementOfTreeNode = function ($li, $html) {
        var $el;
        var liid = $li.attr("data-pg-tree-id");
        if (liid) {
            if (!$html)$html = _this.currentCrsaPage.get$Html();
            $el = $html.find('[data-pg-tree-id="' + liid + '"]');
            if ($el.length == 0)return $li.data("crsa-element")
        } else {
            return null
        }
        return $el.length ? $el : null
    };
    var getElementOfTreeNodeFast = function (li, html) {
        var el;
        var liid = li.getAttribute("data-pg-tree-id");
        if (liid) {
            el = html.querySelector('[data-pg-tree-id="' + liid + '"]')
        }
        return el
    };
    var wireTreeElements = function ($te) {
        if ($te.data("has-events")) {
            console.log("has events");
            return
        }
        $te.on("mouseover", function (event) {
            var $el = getElementOfTreeNode($(event.delegateTarget));
            $.fn.crsa("highlightElement", $el);
            event.stopImmediatePropagation()
        }).on("mouseout", function (event) {
            var $el = getElementOfTreeNode($(event.delegateTarget));
            $.fn.crsa("highlightElement", null);
            event.stopImmediatePropagation()
        }).on("click", function (event) {
            var $li = $(event.delegateTarget).closest("li");
            var $div = $li.find("> div");
            var $el = getElementOfTreeNode($li);
            $("#crsa-dummy-field").focus();
            $.fn.crsa("selectElement", $el);
            $.fn.crsa("scrollCanvasToElement", $el);
            event.stopImmediatePropagation();
            event.preventDefault();
            $("body").trigger("click")
        });
        $te.find("> div > i.crsa-collapse").on("click", function (event) {
            var $i = $(event.delegateTarget);
            var $li = $i.closest("li");
            var $ul = $li.find("> ul");
            var $el = getElementOfTreeNode($li);
            $.fn.crsa("collapseElement", $el, null);
            event.preventDefault();
            event.stopPropagation()
        });
        $te.find("> div > i.crsa-visible").on("click", function (event) {
            var $i = $(event.delegateTarget);
            var $li = $i.closest("li");
            var $ul = $li.find("> ul");
            var $el = getElementOfTreeNode($li);
            var hide = false;
            if ($li.hasClass("crsa-tree-node-hidden")) {
                $li.removeClass("crsa-tree-node-hidden");
                $i.addClass("fa-eye").removeClass("fa-eye-slash");
                $el.data("crsa-tree-hidden", null)
            } else {
                $li.addClass("crsa-tree-node-hidden");
                $i.addClass("fa-eye-slash").removeClass("fa-eye");
                $el.data("crsa-tree-hidden", true);
                hide = true
            }
            if (hide) {
                var s = $el.attr("style");
                if (s == null)s = "";
                $el.get(0).crsaOriginalStyle = s
            }
            var original_style = $el.get(0).crsaOriginalStyle;
            if (hide) {
                $el.animate({opacity: 0}, 250, function () {
                    $el.hide()
                })
            } else {
                $el.show().css("opacity", 0);
                $el.animate({opacity: 1}, 250, function () {
                    if (original_style == null || original_style == "") {
                        $el.removeAttr("style")
                    } else {
                        $el.attr("style", original_style)
                    }
                    $el.removeAttr("crsaOriginalStyle")
                })
            }
            event.preventDefault()
        });
        $te.data("has-events", true)
    };
    var wireTree = function ($tree_top_ul) {
        $tree_top_ul.nestedSortable({
            forcePlaceholderSize: true,
            helper: "clone",
            placeholder: "tree-placeholder",
            handle: "div",
            tabSize: 20,
            tolerance: "pointer",
            isTree: true,
            items: "li.sort",
            listType: "ul",
            toleranceElement: "> div"
        }).on("sortreceive", function (event, ui) {
            console.log("received " + ui.item.text());
            var $branch = ui.item.parent().closest("li");
            var $el = getElementOfTreeNode(ui.item);
            var $dest = getElementOfTreeNode($branch);
            var pos = $branch.find("> ul > li").index(ui.item);
            if ($el && $dest && _this.onSortReceive)_this.onSortReceive($el, $dest, pos, ui)
        }).on("sortupdate", function (event, ui) {
        }).on("sortstop", function (event, ui) {
            var $branch = ui.item.parent().closest("li");
            var $el = getElementOfTreeNode(ui.item);
            var $dest = getElementOfTreeNode($branch);
            var pos = $branch.find("> ul > li").index(ui.item);
            if ($el && $dest && _this.onSortStop)_this.onSortStop($el, $dest, pos, ui)
        }).on("sortstart", function (event, ui) {
            var $el = getElementOfTreeNode(ui.item);
            if ($el && _this.onSortStart)_this.onSortStart($el)
        })
    };
    this.hideTree = function () {
        var $divs = $dest.find("> div.tree-container");
        openSize = _this.$dest.width();
        _this.$dest.addClass("closed");
        _this.$dest.animate({width: 30}, 150, function () {
            $leftHider.removeClass("fa-angle-double-right").addClass("fa-angle-double-left");
            $divs.hide();
            $dest.css("overflow", "hidden");
            $(window).trigger("resize")
        })
    };
    this.showTree = function (skip_resize) {
        var $divs = $dest.find("> div.tree-container");
        if (openSize < 300)openSize = 300;
        _this.$dest.removeClass("closed");
        $divs.show();
        if (!skip_resize) {
            _this.$dest.animate({width: openSize}, 150, function () {
                $leftHider.addClass("fa-angle-double-right").removeClass("fa-angle-double-left");
                $dest.css("overflow", "auto");
                $(window).trigger("resize");
                if (_this.currentCrsaPage && _this.currentCrsaPage.treeRepaintOnShow) {
                    _this.showTreeForIframe(_this.currentCrsaPage.$iframe)
                }
            })
        } else {
            $leftHider.addClass("fa-angle-double-right").removeClass("fa-angle-double-left");
            $dest.css("overflow", "auto");
            if (_this.currentCrsaPage && _this.currentCrsaPage.treeRepaintOnShow) {
                _this.showTreeForIframe(_this.currentCrsaPage.$iframe)
            }
        }
    };
    this.initUI = function () {
        this.$dest.html("");
        max_tree_level = 0;
        var $th = $("<div/>", {"class": "header"}).html('<i class="hider fa fa-angle-double-right"></i>').appendTo($dest);
        $filter = $("<input/>", {
            placeholder: "search tree",
            "class": "form-control filter-form"
        }).appendTo($th).on("input", updateFilter);
        $filter.tooltip({
            container: "body",
            placement: "left",
            title: "Tree Drag & Drop is disabled when filter is set.",
            trigger: "manual"
        });
        crsaAddCancelSearch($filter);
        $leftHider = $th.find("i.hider").on("click", function (e) {
            var w = _this.$dest.width();
            if (!_this.$dest.hasClass("closed")) {
                _this.hideTree()
            } else {
                _this.showTree()
            }
            e.preventDefault()
        });
        $tree_container = $("<div/>", {"class": "tree-container"}).appendTo(this.$dest);
        var populate_timer = null;
        var refresh_timer = null;
        var populateTreeInBckBatch = function (start) {
            if (typeof start == "undefined")start = 0;
            var start_ms = (new Date).getTime();
            if (!$allTreeNodes) {
                $allTreeNodes = $top_ul.find("li")
            }
            var changes = 0;
            if (!_this.currentCrsaPage)return;
            var html = _this.currentCrsaPage.get$Html().get(0);
            var $lis = $allTreeNodes;
            for (var i = start; i < $lis.length; i++) {
                var li = $lis.get(i);
                start++;
                if (!li.getAttribute("data-li-populated")) {
                    populateLine(li, html);
                    li.setAttribute("data-li-populated", "true");
                    changes++;
                    if (i % 10 == 0) {
                        var ms = (new Date).getTime();
                        if (ms - start_ms > 50)break
                    }
                }
            }
            return start < $lis.length ? start : -1
        };
        var populateTreeInBck = function (start) {
            if (typeof start == "undefined")start = 0;
            if (populate_timer) {
                clearTimeout(populate_timer)
            }
            populate_timer = setTimeout(function () {
                populate_timer = null;
                start = populateTreeInBckBatch(start);
                if (start >= 0) {
                    populateTreeInBck(start)
                }
            }, 100)
        };
        var populateVisibleTreeNodes = function () {
            if (!$allTreeNodes) {
                $allTreeNodes = $top_ul.find("li")
            }
            var changes = 0;
            var top = $tree_container.scrollTop();
            var bottom = top + $tree_container.height();
            var itemHeight = 19;
            var topItem = Math.floor(top / itemHeight);
            var bottomItem = Math.ceil(bottom / itemHeight);
            if (!_this.currentCrsaPage)return;
            var html = _this.currentCrsaPage.get$Html().get(0);
            if (!html)return changes;
            var $lis = $allTreeNodes;
            if (topItem < $lis.length - 1) {
                if (bottomItem >= $lis.length) {
                    bottomItem = $lis.length - 1
                }
                for (var i = topItem; i <= bottomItem; i++) {
                    var li = $lis.get(i);
                    if (!li.getAttribute("data-li-populated")) {
                        populateLine(li, html);
                        li.setAttribute("data-li-populated", "true");
                        changes++
                    }
                }
            }
            return changes
        };
        $tree_container.on("treeUpdated", function (event) {
            populateVisibleTreeNodes();
            populateTreeInBck()
        });
        $tree_container.on("scroll", function (event) {
            if (populateVisibleTreeNodes() > 0) {
                if (refresh_timer) {
                    clearTimeout(refresh_timer)
                }
                refresh_timer = setTimeout(function () {
                    $top_ul.hide().show(0);
                    refresh_timer = null
                }, 100)
            }
        });
        var $resizer = $("<div/>", {"class": "tree-resizer"}).appendTo(this.$dest).on("mousedown", function (e) {
            e.preventDefault();
            $.fn.crsapages("showOverlays");
            $("body").on("mousemove.tree", function (m) {
                var w = $(window).width() - (m.pageX < 500 ? 500 : m.pageX) - 12;
                if (w <= 30) {
                    w = 30;
                    if (!_this.$dest.hasClass("closed")) {
                        _this.hideTree()
                    }
                } else {
                    if (_this.$dest.hasClass("closed")) {
                        _this.showTree(true)
                    }
                }
                _this.$dest.css("width", w + "px")
            }).on("mouseup.tree", function (e) {
                e.preventDefault();
                $("body").off(".tree");
                $.fn.crsapages("showOverlays", true);
                $(window).trigger("resize")
            })
        });
        return false
    };
    var isHidden = function () {
        return _this.$dest.hasClass("closed")
    };
    var createTreeLineForElement = function ($e) {
        var li = document.createElement("li");
        var $li = $(li);
        var def = getType($e, false, false, _this.currentCrsaPage);
        if (!$e.is("body")) {
            li.className = "sort"
        } else {
            li.className = "no-sort"
        }
        var name;
        if (def) {
            name = getElementName($e, def, true, false, true)
        } else {
            name = getElementName($e, fast_def, true, false, false)
        }
        var eye = "fa-eye";
        if ($e.get(0).crsaOriginalStyle) {
            li.className += " crsa-tree-node-hidden";
            eye = "fa-eye-slash"
        }
        var tags = def && def.tags ? " tag-" + def.tags : "";
        var msg = document.createElement("div");
        msg.className = "crsa-tree-node-name" + tags;
        var i = document.createElement("i");
        i.className = "crsa-collapse fa fa-fw fa-angle-down";
        msg.appendChild(i);
        i = document.createElement("i");
        i.className = "crsa-visible fa fa-fw " + eye;
        msg.appendChild(i);
        var text = document.createTextNode(name);
        msg.appendChild(text);
        li.appendChild(msg);
        $e.data("crsa-tree-node", $li);
        var pgid = $e.get(0).getAttribute("data-pg-id");
        if (!pgid) {
            li.className += " dyn"
        } else {
            li.setAttribute("data-pg-id", pgid)
        }
        if (def && def.paint_tree_node)def.paint_tree_node($li, $e);
        return $li
    };
    var li_id_count = 0;
    this.getTreeNodeId = function () {
        return ++li_id_count
    };
    this.assignTreeNodeToElement = function ($treeNode, $el, data) {
        var liid = this.getTreeNodeId();
        $el.attr("data-pg-tree-id", liid);
        $treeNode.attr("data-pg-tree-id", liid);
        if (data)$treeNode.data("crsa-element", $el)
    };
    var populateLine = function (li, html) {
        var el = getElementOfTreeNodeFast(li, html);
        if (el) {
            var $el = $(el);
            var div = li.children[0];
            var nameNode = div.children[2];
            var def;
            def = getType($el, false, false, _this.currentCrsaPage);
            if (def) {
                var action_tag = _this.currentCrsaPage.getActionTag($el);
                var name = getElementName($el, def, true, false, true, false, action_tag);
                nameNode.innerHTML = name;
                if (def.tags) {
                    div.className += " tag-" + def.tags
                }
            }
        }
    };
    var createTreeLineForElementAsString = function (e, only_kids, level) {
        if (!level)level = 0;
        var def = null;
        if (max_tree_level < level)max_tree_level = level;
        var ch = "";
        var children = e.children;
        if (children.length > 0) {
            for (var i = 0; i < children.length; i++) {
                var node = children.item(i);
                if (node.nodeType == 1 && node.tagName != "BR") {
                    ch += createTreeLineForElementAsString(node, false, level + 1)
                }
            }
        }
        if (only_kids)return ch;
        var cls = "sort";
        if (e.tagName == "body") {
            cls = "no-sort"
        }
        var name = e.tagName;
        var eye = "fa-eye";
        if (e.crsaOriginalStyle) {
            cls += " crsa-tree-node-hidden";
            eye = "fa-eye-slash"
        }
        var tags = "";
        var lid = ++li_id_count;
        e.setAttribute("data-pg-tree-id", lid);
        var attr = 'data-pg-tree-id="' + lid + '"';
        var pgid = e.getAttribute("data-pg-id");
        if (!pgid) {
            cls += " dyn"
        } else {
            attr += ' data-pg-id="' + pgid + '" '
        }
        var i_class = "";
        var ul_class = "";
        if (e.getAttribute("data-pg-collapsed") == "") {
            i_class = "fa-angle-right";
            cls += " collapsed";
            ul_class = " crsa-tree-node-closed"
        } else {
            i_class = "fa-angle-down"
        }
        if (ch.length) {
            ch = '<ul class="crsa-tree-branch' + ul_class + '">' + ch + "</ul>";
            cls += " has-children"
        }
        var li = "<li " + attr + 'class="' + cls + '"><div class="crsa-tree-node-name' + tags + '"><i class="crsa-collapse fa fa-fw ' + i_class + '"></i><i class="crsa-visible fa fa-fw ' + eye + '"></i><name>' + name + "</name></div>" + ch + "</li>";
        return li
    };
    var createLevelsWaitingList = [];
    var createCrsaTreeLevel = function ($dest, $e, level, only_kids) {
        var $li = null;
        var $ul = null;
        if (!only_kids) {
            try {
                if (max_tree_level < level)max_tree_level = level;
                $li = createTreeLineForElement($e);
                $dest.append($li);
                $li.data("menu-level", level)
            } catch (err) {
                console.log(err)
            }
        } else {
            $ul = $dest
        }
        var children = $e.get(0).children;
        if (children.length > 0) {
            for (var i = 0; i < children.length; i++) {
                var node = children.item(i);
                if (node.nodeType == 1) {
                    var $node = $(node);
                    var def = getType($node, false, false, _this.currentCrsaPage);
                    if (def) {
                        if (!$ul) {
                            var ul = document.createElement("ul");
                            $ul = $(ul);
                            $li.append($ul);
                            $li.get(0).className = "has-children crsa-tree-branch"
                        }
                        createLevelsWaitingList.push({ul: $ul, node: $node, level: level + 1, only_kids: false})
                    }
                }
            }
        }
        if ($e.attr("data-pg-collapsed") == "") {
            if ($ul)$ul.addClass("crsa-tree-node-closed");
            $li.find("i.crsa-collapse").addClass("fa-angle-right").removeClass("fa-angle-down");
            $li.addClass("collapsed")
        }
        return $li
    };
    var batchTimer = null;
    var activateTreeForCrsaPage = function (cp) {
        var wire = false;
        if (!cp.treeTop) {
            cp.treeTop = $("<ul/>").addClass("crsa-tree-branch");
            wire = true
        }
        if (_this.currentCrsaPage != cp) {
            if ($top_ul) {
                $top_ul.detach()
            }
            $top_ul = cp.treeTop;
            $tree_container.append($top_ul);
            if (wire) {
                wireTree(cp.treeTop)
            }
            _this.currentCrsaPage = cp
        }
    };
    this.showTreeForIframe = function ($iframe, skip_repaint) {
        if (!$iframe) {
            if ($top_ul) {
                $top_ul.detach()
            }
            this.currentCrsaPage = null
        } else {
            var cp = getCrsaPageForIframe($iframe);
            activateTreeForCrsaPage(cp);
            if (cp.treeRepaintOnShow && !skip_repaint) {
                this.paintTree(cp.$iframe, cp.treeRepaintOnShow === true ? getTreeRootForElement(null, cp.$iframe) : cp.treeRepaintOnShow);
                cp.treeRepaintOnShow = null
            }
        }
        $allTreeNodes = null
    };
    this.closeTreeForPage = function (cp) {
        if (cp == this.currentCrsaPage) {
            cp.treeTop.detach();
            if (batchTimer) {
                window.cancelAnimationFrame(batchTimer);
                batchTimer = null
            }
            this.currentCrsaPage = null
        }
        cp.treeTop = null;
        cp.treeCurrentRoot = null;
        cp.treeRepaintOnShow = null;
        $allTreeNodes = null
    };
    this.paintTree = function ($iframe, $element) {
        var treeRoot = $iframe && $element ? getTreeRootForElement($element, $iframe) : null;
        var cp;
        if ($iframe) {
            cp = getCrsaPageForIframe($iframe);
            if (cp != this.currentCrsaPage || isHidden()) {
                cp.treeRepaintOnShow = cp.treeRepaintOnShow == null ? $element : treeRoot;
                return
            }
        }
        if (!$iframe || !$element || !treeRoot) {
            $top_ul.html("");
            return
        }
        cp.treeCurrentRoot = treeRoot;
        this.$iframe = $iframe;
        if (!$ul)$ul = $top_ul;
        var $ul = $top_ul;
        var $b;
        var only_kids = false;
        var current_max_tree_level = max_tree_level;
        max_tree_level = 0;
        var test = false;
        var $elements = $element ? $element : treeRoot;
        var profile = new CrsaProfile(true);
        $elements.each(function (i, el) {
            var start_level = 0;
            $b = $(el);
            var $li = getTreeNodeForElement($b, $top_ul);
            if (!$li || $b.get(0) == treeRoot.get(0) || batchTimer || $top_ul.get(0).children.length == 0) {
                $b = treeRoot;
                $ul = $top_ul
            } else {
                $ul = $li.closest("ul.crsa-tree-branch");
                if ($ul.length > 0) {
                    only_kids = true;
                    $b = $b.parent();
                    start_level = $li.data("menu-level");
                    max_tree_level = current_max_tree_level
                } else {
                    $ul = $top_ul;
                    $b = treeRoot
                }
            }
            var html = createTreeLineForElementAsString($b.get(0), only_kids);
            profile.show("simple tree 1");
            $ul.get(0).innerHTML = html;
            profile.show("simple tree 2");
            var $lis = $ul.find("li");
            wireTreeElements($lis);
            $allTreeNodes = null;
            profile.show("simple tree 3")
        });
        var w = max_tree_level * 20 + 150;
        if (w < 300)w = 300;
        $top_ul.css("min-width", w + "px");
        showSelectedElement();
        $filter.val(treeFilter);
        updateFilter();
        profile.show("simple tree 4");
        $tree_container.trigger("treeUpdated");
        profile.show("simple tree 5");
        return;
        createLevelsWaitingList = [];
        createLevelsWaitingList.push({ul: $ul, node: $b, level: start_level, only_kids: only_kids});
        var batchSize = 10;
        var batchMaxMsPerTask = 100;
        var totalTreeTime = 0;
        var treeDone = function () {
            var w = max_tree_level * 20 + 150;
            if (w < 300)w = 300;
            $top_ul.css("min-width", w + "px");
            showSelectedElement();
            $filter.val(treeFilter);
            updateFilter();
            console.log("Tree painted " + totalTreeTime + " ms")
        };
        var doNextBatch = function () {
            if (createLevelsWaitingList.length > 0) {
                var start_ms = (new Date).getTime();
                var elapsed_ms = 0;
                do {
                    var lis = [];
                    var c = 0;
                    while (c < batchSize && createLevelsWaitingList.length > 0) {
                        var task = createLevelsWaitingList.shift();
                        var $li = createCrsaTreeLevel(task.ul, task.node, task.level, task.only_kids);
                        if ($li) {
                            lis.push($li.get(0))
                        }
                        c++
                    }
                    wireTreeElements($(lis));
                    elapsed_ms = (new Date).getTime() - start_ms
                } while (elapsed_ms < batchMaxMsPerTask && createLevelsWaitingList.length > 0);
                totalTreeTime += elapsed_ms;
                if (createLevelsWaitingList.length > 0) {
                    batchTimer = window.requestAnimationFrame(function () {
                        doNextBatch()
                    })
                } else {
                    batchTimer = null;
                    treeDone()
                }
            }
        };
        if (batchTimer) {
            window.cancelAnimationFrame(batchTimer);
            batchTimer = null
        }
        batchTimer = window.requestAnimationFrame(function () {
            $ul.html("");
            doNextBatch()
        })
    };
    var showSelectedElement = function () {
        if (!selectedElement)return;
        var $li = getTreeNodeForElement(selectedElement);
        if ($li) {
            $li.addClass("crsa-tree-node-selected");
            var lip = $li.position();
            var $tree = $("#crsa-tree > div.tree-container");
            var tree_h = $tree.height();
            var li_h = 20;
            var tree_st = $tree.scrollTop();
            if (lip.top >= 0 && lip.top < tree_h - li_h) {
            } else {
                var y = lip.top + tree_st - 100;
                if (y < 0)y = 0;
                $tree.animate({scrollTop: y}, 150)
            }
        }
    };
    this.setSelectedElement = function ($e, skip_show) {
        $top_ul.find("li.crsa-tree-node-selected").removeClass("crsa-tree-node-selected");
        if (selectedElement) {
            var $li = getTreeNodeForElement(selectedElement);
            if ($li) {
                $li.removeClass("crsa-tree-node-selected")
            }
        }
        selectedElement = $e;
        if (!skip_show && !isHidden()) {
            showSelectedElement()
        }
    };
    this.initUI();
    this.ready = true
};
var CrsaContextMenu = function () {
    var _this = this;
    this.actions = [];
    this.add = function (label, kbd, func, type) {
        if (!type)type = "link";
        this.actions.push({label: label, kbd: kbd, func: func, type: type})
    };
    var $menu_ul;
    var $backdrop;
    var $scroll_parent;
    var start_scroll_top;
    var start_y;
    var scroll_offset;
    var menu_h;
    var menu_w;
    this.close = function () {
        $menu_ul.remove();
        $menu_ul = null;
        $(document).off(".crsamenu");
        if ($scroll_parent) {
            $scroll_parent.off(".crsamenu")
        }
        if ($backdrop) {
            $backdrop.remove();
            $backdrop = null
        }
    };
    this.showAt = function (x, y, $scroll) {
        if (this.actions.length == 0)return;
        $(document).trigger("click");
        $menu_ul = $('<ul class="dropdown-menu context-menu" role="menu"></ul>');
        $.each(this.actions, function (i, a) {
            var $li;
            if (a.type == "divider") {
                if (i > 0) {
                    $li = $('<li class="divider">' + a.label + "</li>")
                }
            } else if (a.type == "header") {
                $li = $('<li class="dropdown-header">' + a.label + "</li>")
            } else {
                $li = $('<li><a href="#">' + a.label + "</a></li>")
            }
            if ($li) {
                var $a = $li.find("a").data("action", a);
                if (a.kbd) {
                    crsaAddKbd($a, a.kbd)
                }
                $a.on("click", function (e) {
                    e.preventDefault();
                    var a = $(e.delegateTarget).data("action");
                    a.func(_this);
                    _this.close()
                });
                $menu_ul.append($li)
            }
        });
        $("body").append($menu_ul);
        $menu_ul.css("top", y + "px").css("left", x + "px");
        start_y = y;
        if ("ontouchstart"in document.documentElement) {
            $backdrop = $('<div class="dropdown-backdrop"/>').insertBefore($menu_ul).on("click", this.close)
        }
        $(document).off(".crsamenu").on("click.crsamenu", this.close);
        if ($scroll) {
            $scroll.off(".crsamenu").on("scroll.crsamenu", function (event) {
                var ny = start_y + (start_scroll_top - $scroll.scrollTop());
                $menu_ul.css("top", ny + "px");
                var cy = 0;
                if (ny < scroll_offset) {
                    cy = scroll_offset - ny - 2;
                    if (cy < 0)cy = 0
                }
                $menu_ul.css("clip", "rect(" + cy + "px, " + menu_w + "px, " + menu_h + "px, 0px)")
            });
            start_scroll_top = $scroll.scrollTop();
            scroll_offset = $scroll.offset().top
        }
        $scroll_parent = $scroll;
        $menu_ul.data("menu", this);
        var timer;
        $menu_ul.on("mousewheel.crsamenu", function () {
            var im = $menu_ul.get(0);
            if (!im.classList.contains("crsa-disable-hover")) {
                im.classList.add("crsa-disable-hover")
            }
            timer = setTimeout(function () {
                im.classList.remove("crsa-disable-hover")
            }, 250)
        });
        $menu_ul.show();
        menu_h = $menu_ul.outerHeight();
        menu_w = $menu_ul.outerWidth();
        if ($scroll) {
            if (start_y + menu_h > $(window).height()) {
                start_y = start_y - menu_h;
                $menu_ul.css("top", start_y + "px")
            }
        }
        return $menu_ul
    }
};