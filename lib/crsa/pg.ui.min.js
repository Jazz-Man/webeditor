var CrsaPanel = function ($el) {
    this.$el = $el;
    $el.data("panel", this);
    var _this = this;
    var $w = $(window);
    var $head = $el.find("> .panel-head");
    var $content = $el.find("> .panel-content");
    var content_top = $content.position().top;
    var $close = $("<a/>", {
        href: "#",
        "class": "panel-close"
    }).html('<i class="fa fa-times" />').appendTo(this.$el).on("click", function (e) {
        _this.hide();
        e.preventDefault()
    });
    $el.addClass("panel");
    this.autoSize = function (offset) {
        if (!offset)offset = this.$el.offset();
        var h = this.$el.height();
        var bh = $w.height();
        var nh = bh - offset.top;
        this.$el.css("height", nh + "px");
        $content.css("height", nh - content_top + "px")
    };
    this.autoSize();
    $el.draggable({handle: ".panel-head", scroll: false}).on("dragstart", function (e, ui) {
        if (ui) {
            var bh = $w.height();
            $.fn.crsapages("showOverlays")
        }
    }).on("drag", function (e, ui) {
        if (ui) {
            _this.autoSize(ui.offset)
        }
    }).on("dragstop", function (e, ui) {
        if (ui) {
            $.fn.crsapages("showOverlays", true)
        }
    });
    this.show = function () {
        var $body = $(window);
        this.$el.show();
        this.autoSize();
        $el.draggable("option", "containment", [-200, 0, $body.width() - 100, $body.height() - 100])
    };
    this.hide = function () {
        this.$el.hide()
    }
};
function makeDialog(title, cancel, ok, body) {
    if (typeof body == "undefined")body = "";
    var bstr = typeof body == "string" ? body : "";
    var html = '<div class="modal-content">                <div class="modal-header">                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>                    <h4 class="modal-title">' + title + '</h4>                </div>                <div class="modal-body">' + bstr + '                </div>                <div class="modal-footer"><p class="pull-left"></p>';
    if (cancel) {
        html += '<button type="button" class="btn btn-default btn-sm cancel">' + cancel + "</button>"
    }
    if (ok) {
        html += '<button type="button" class="btn btn-primary btn-sm ok">' + ok + "</button>"
    }
    html += "</div>            </div>";
    var $d = $("<div/>", {"class": "modal-dialog crsa-dialog-nonmodal"}).html(html);
    if (typeof body == "object") {
        $d.find(".modal-body").append(body)
    }
    return $d
}
function makeAndShowDialog(title, cancel, ok, body, onCancel, onOk) {
    var $dialog = makeDialog(title, cancel, ok, body);
    $("body").append($dialog);
    var x = 100;
    var y = 100;
    $dialog.css("top", y + "px").css("left", x + "px");
    $dialog.draggable({handle: ".modal-header"}).on("dragstart", function (e, ui) {
        $.fn.crsapages("showOverlays")
    }).on("dragstop", function () {
        $.fn.crsapages("showOverlays", true)
    });
    $dialog.find("button.close,button.cancel").click(function () {
        if (onCancel)onCancel();
        $dialog.remove()
    });
    $dialog.find("button.ok").click(function () {
        if (onOk)onOk();
        $dialog.remove()
    });
    $dialog.on("hidden.bs.modal", function () {
        $dialog.remove()
    })
}
function setDialogNotice($d, text, cls) {
    var $p = $d.find(".modal-footer > p");
    $p.html(text).attr("class", "pull-left " + cls)
}
function makeModalDialog(title, cancel, ok, body, onCancel, onOk, onBeforeShow) {
    if (typeof body == "function")body = body();
    var $d = makeDialog(title, cancel, ok, body);
    $d.removeClass("crsa-dialog-nonmodal");
    var $o = $("<div/>", {"class": "modal fade", tabIndex: "-1", role: "dialog"}).append($d);
    $o.find("button.close,button.cancel").click(function () {
        if (onCancel)onCancel();
        $o.modal("hide")
    });
    $o.find("button.ok").click(function () {
        if (onOk)onOk();
        $o.modal("hide")
    });
    $o.on("hidden.bs.modal", function () {
        $o.remove()
    });
    if (onBeforeShow)onBeforeShow($o);
    $o.modal({backdrop: true});
    return $o
}
function makeModalDialogWhole(body) {
    if (typeof body == "function")body = body();
    var $d = $(body);
    var $o = $("<div/>", {"class": "modal fade", tabIndex: "-1", role: "dialog"}).append($d);
    $o.modal({backdrop: "static", keyboard: false});
    return $o
}
function showAlert(body, title, cancel, ok, onCancel, onOk) {
    if (!title)title = "Notice";
    if (!ok && !cancel)ok = "OK";
    return makeModalDialog(title, cancel, ok, body, onCancel, onOk)
}
function crsaHandleExternalLinks($d) {
    if (isApp()) {
        $d.find("a.external").on("click", function (e) {
            e.preventDefault();
            var gui = require("nw.gui");
            var url = $(e.delegateTarget).attr("href");
            gui.Shell.openExternal(url)
        })
    }
}
function showNotice(message, title, key, done, only_once, force) {
    var key = "notice_hide_" + key;
    if (!force) {
        if (key in localStorage && localStorage[key] == "1") {
            if (done)done(false);
            return
        }
        if (only_once && key in localStorage) {
            if (done)done(false);
            return
        }
    }
    var $chk = $('<label class="pull-left control-label"><input type="checkbox"> Don\'t show this notice again</label>');
    var $d = showAlert(message, title, null, null, null, function () {
        if (done)done(true);
        if ($chk.find("input").is(":checked")) {
            localStorage[key] = "1"
        } else {
            localStorage[key] = "0"
        }
    });
    if (!only_once) {
        $d.find(".modal-footer").prepend($chk)
    }
    crsaHandleExternalLinks($d);
    return $d
}
function showPrompt(notice, title, value, placeholder, onCancel, onOk) {
    var $b = $('<form role="form">        <div class="form-group">        <label for="dlgInput">' + notice + '</label>        <input type="text" class="form-control" id="dlgInput" placeholder="' + placeholder + '">        </div>        </form>');
    var $input = $b.find("input");
    var $form = $b;
    $form.on("submit", function (e) {
        e.preventDefault();
        if (onOk)onOk($input.val());
        $modal.modal("hide")
    });
    if (value)$input.val(value);
    var $modal = showAlert($b, title, "Cancel", "Ok", onCancel, function () {
        if (onOk)onOk($input.val())
    });
    $modal.on("shown.bs.modal", function () {
        $input.focus()
    });
    return $modal
}
var CrsaActionsPanel = function () {
    var currentFactoryLibSections = null;
    var selectedPgel = null;
    var selected$el = null;
    var selectedElement = null;
    var $container;
    var hasAction = function (pgel, def) {
        if (def.has_action) {
            return def.has_action(pgel)
        }
        return def.attribute && pgel.hasAttr(def.attribute)
    };
    this.show = function ($lib) {
        $container = $lib;
        var filter = null;
        var $header = $lib.find(">.header");
        var $input = $("<input/>", {"class": "form-control filter-form", placeholder: "search"}).appendTo($header);
        crsaAddCancelSearch($input, "top: 18px;right: 47px;");
        var $tags = $("<div/>", {"class": "form-tags"});
        var $manage = $('<a href="#" class="icon-action"><i class="fa fa-cog"></i></a>').appendTo($header);
        $manage.on("click", function (e) {
            var selectedCrsaPage = pinegrow.getSelectedPage();
            if (selectedCrsaPage || true) {
                $.fn.crsacss("showFrameworkManager", selectedCrsaPage);
                e.preventDefault()
            } else {
                showAlert("Open a page first!")
            }
        }).tooltip({
            container: "body",
            placement: "right",
            title: "Manage frameworks and plugins for the selected page.",
            trigger: "hover"
        });
        var $content = $lib.find(">.content");
        var $obj_desc = $("<ul/>", {"class": "props-desc-obj"}).appendTo($content);
        $('<ul class="selected-insert"><li class="section"><div><h2></h2></div><ul></ul><div class="insert-help">Right click for options.</div></li></ul>').appendTo($content).hide();
        var $list = $("<ul/>").appendTo($content);
        var $showhelp = $('<label class="css-opt-label actions-show-help-label"><input class="control-label" type="checkbox" value="1">&nbsp;Show help texts</label>').appendTo($header);
        $showhelp.find("input").on("change", function (e) {
            var $ch = $(e.delegateTarget);
            if ($ch.is(":checked")) {
                $list.addClass("show-help-text");
                pinegrow.setSetting("actions-show-help-text", "1")
            } else {
                $list.removeClass("show-help-text");
                pinegrow.setSetting("actions-show-help-text", "0")
            }
        });
        if (pinegrow.getSetting("actions-show-help-text", "1") == "1") {
            $list.addClass("show-help-text");
            $showhelp.find("input").attr("checked", "checked")
        }
        var preview = null;
        var currentPage = null;
        var pageChanged = function (crsaPage) {
            var sections = null;
            var changed = false;
            selected$el = null;
            selectedPgel = null;
            currentPage = crsaPage;
            if (!crsaPage) {
                changed = true
            } else {
                sections = crsaPage.getActionsSections();
                if (currentFactoryLibSections == null || sections == null) {
                    changed = true
                } else {
                    if (currentFactoryLibSections.length != sections.length) {
                        changed = true
                    } else {
                        for (var i = 0; i < sections.length; i++) {
                            if (sections[i] != currentFactoryLibSections[i]) {
                                changed = true;
                                break
                            }
                        }
                    }
                }
            }
            if (changed) {
                updateList(sections)
            } else {
                updateUsage()
            }
        };
        $("body").on("crsa-page-selected", function (e, crsaPage) {
            pageChanged(crsaPage)
        });
        $("body").on("crsa-element-selected", function (e, crsaPage) {
            var selectedCrsaPage = pinegrow.getSelectedPage();
            selectedElement = pinegrow.getSelectedElement();
            var was_empty = false;
            if (selectedElement) {
                was_empty = selectedPgel == null;
                selected$el = selectedElement.data;
                selectedPgel = getElementPgNode(selected$el)
            } else {
                selected$el = null;
                selectedPgel = null
            }
            if (currentPage != selectedCrsaPage) {
                pageChanged(selectedCrsaPage)
            } else {
                if (was_empty || !selectedElement) {
                    updateList()
                } else {
                    updateAssignedActions();
                    updateUsage()
                }
            }
            $.fn.crsa("showElementDescription", $obj_desc, selectedElement)
        });
        $("body").on("crsa-frameworks-changed", function (e) {
            updateList()
        });
        var matchTags = function (tags, selected_tags) {
            if (!selected_tags || selected_tags.length == 0)return true;
            if (!tags || tags.length == 0)return false;
            for (var i = 0; i < selected_tags.length; i++) {
                var found = false;
                for (var j = 0; j < selected_tags[i].length; j++) {
                    if (tags.indexOf(selected_tags[i][j]) >= 0) {
                        found = true;
                        break
                    }
                }
                if (!found)return false
            }
            return true
        };
        var selected_tags = [];
        var updateTags = function () {
            var tags = [{
                cat: "change",
                text: "changes",
                values: [{value: "element", text: "Replaces element."}, {
                    value: "content",
                    text: "Replaces content."
                }, {value: "href", text: "Replaces href attribute."}]
            }, {
                cat: "returns",
                text: "returns",
                values: [{value: "string", text: "Returns string."}, {
                    value: "html",
                    text: "Returns html."
                }, {value: "url", text: "Returns url."}]
            }];
            var html = "";
            for (var i = 0; i < tags.length; i++) {
                html += "<div><b>" + tags[i].text + "</b>";
                for (var j = 0; j < tags[i].values.length; j++) {
                    html += '<a href="' + tags[i].cat + ":" + tags[i].values[j].value + '">' + tags[i].values[j].value + "</a>"
                }
                html += "</div>"
            }
            $tags.html(html)
        };
        var assigned_actions_section = {
            name: "Assigned actions",
            framework: {name: "Shortcuts"},
            getComponentTypes: function () {
                return []
            }
        };

        function showFields(selectedElement, def, $item) {
            var sections = def.sections ? def.sections : {};
            var values = {};
            try {
                values = selectedElement ? getValuesForObject(selectedElement, sections) : {}
            } catch (err) {
                console.log(err)
            }
            var $props = $("<div/>", {"class": "action-fields"});
            var count = 0;
            $.each(sections, function (key, s) {
                count++
            });
            var on_fields_created = [];
            $.each(sections, function (key, s) {
                if (s.hasOwnProperty("show") && !s.show || !s.name)return true;
                if (count > 1) {
                    $("<h3/>").html(s.name).appendTo($props)
                }
                var $c = $("<div/>").appendTo($props);
                $.each(s.fields, function (fn, fdef) {
                    var $field;
                    if (fdef.type == "custom") {
                        $field = fdef.show($c, selectedElement, fn, fdef, values)
                    } else {
                        $field = $.fn.crsa("addInputField", $c, selectedElement, fn, fdef, values)
                    }
                    if (fdef.on_fields_created) {
                        on_fields_created.push({
                            func: fdef.on_fields_created,
                            obj: selectedElement,
                            field: $field,
                            def: fdef,
                            name: fn
                        })
                    }
                    pinegrow.validateField(selectedElement, fn, values.hasOwnProperty(fn) ? values[fn] : null, fdef, $field, values)
                })
            });
            for (var i = 0; i < on_fields_created.length; i++) {
                on_fields_created[i].func(on_fields_created[i].obj, on_fields_created[i].name, values.hasOwnProperty(on_fields_created[i].name) ? values[on_fields_created[i].name] : null, on_fields_created[i].def, on_fields_created[i].field, values)
            }
            on_fields_created = null;
            $props.insertAfter($item.find(">name"));
            return $props
        }

        var removeFields = function ($item) {
            $item.find(">.action-fields").remove()
        };
        var sections_map = [];
        var actions_map = [];
        var getSectionDef = function ($li) {
            return sections_map[parseInt($li.attr("data-section-index"))]
        };
        var getActionDef = function ($li) {
            return actions_map[parseInt($li.attr("data-action-index"))]
        };
        var getHTMLForAction = function (def, cat_match) {
            var html = "";
            var extraname = "";
            var helptext = "";
            var tags = "";
            var tags_array = null;
            var icons = '<icons><i class="fa fa-magic action-magic only-active"></i>&nbsp;<i class="fa fa-code show-code"></i></icons>';
            if (def.meta) {
                extraname = def.meta.extra_name ? "<small> / " + def.meta.extra_name + "</small>" : "";
                helptext = def.meta.helptext ? def.meta.helptext : "";
                if (def.meta.helplink) {
                    helptext += '<a href="' + def.meta.helplink + '" class="external"><i class="fa fa-question-circle"></i></a>'
                }
                if (def.meta.tags && def.meta.tags.length) {
                    tags = def.meta.tags.join(" ");
                    tags_array = tags
                }
            }
            if (filterRegEx) {
                if (!cat_match && !def.name.match(filterRegEx) && !extraname.match(filterRegEx) && !tags.match(filterRegEx)) {
                    return ""
                }
            }
            if (!matchTags(tags_array, selected_tags))return "";
            actions_map.push(def);
            html += '<li data-action-index="' + (actions_map.length - 1) + '" class="crsa-action crsa-action-on"><name>' + def.name + extraname + icons + "</name>";
            var has_this_action = false;
            if (selectedPgel) {
                if (hasAction(selectedPgel, def)) {
                    has_this_action = true
                }
            }
            if (tags.length) {
            }
            if (helptext.length) {
                html += '<p class="help-text">' + helptext + "</p>"
            }
            html += "</li>";
            return html
        };
        var filterRegEx;
        var updateAssignedActions = function () {
            var selectedCrsaPage = pinegrow.getSelectedPage();
            if (!selectedCrsaPage || !selectedPgel)return;
            var used_actions = selectedCrsaPage.getAllActionTypes(selected$el, selectedPgel);
            var html = "";
            var $as = $list.find("> .assigned-actions");
            if (used_actions.length) {
                for (var i = 0; i < used_actions.length; i++) {
                    html += getHTMLForAction(used_actions[i], false)
                }
                $as.show()
            } else {
                $as.hide()
            }
            $as.find(">ul").html(html);
            crsaHandleExternalLinks($as)
        };
        var updateList = function (sections) {
            var selectedCrsaPage = pinegrow.getSelectedPage();
            $list.html("");
            filter = $input.val();
            filterRegEx = filter && filter.length > 0 ? new RegExp(escapeRegExp(filter), "i") : null;
            var selected_tags = null;
            if (!selectedCrsaPage) {
                currentFactoryLibSections = null;
                return
            }
            sections_map = [];
            actions_map = [];
            if (!sections)sections = selectedCrsaPage.getActionsSections();
            currentFactoryLibSections = sections;
            var selectedElement = pinegrow.getSelectedElement();
            if (!selectedElement) {
                $list.html('<div class="alert alert-info">Click on any element on the page to edit its actions or to add new HTML elements to the page.</div>');
                return
            }
            var displayed_sections = sections;
            if (selectedPgel) {
            }
            displayed_sections = [assigned_actions_section].concat(sections);
            var html = "";
            $.each(displayed_sections, function (i, sec_def) {
                var cat_match = true;
                if (filterRegEx)cat_match = sec_def.name.match(filterRegEx);
                var section_icons = '<i class="fa fa-caret-right closed"></i><i class="fa fa-caret-down opened"></i>';
                if (!sec_def.hasOwnProperty("closed") && sec_def != assigned_actions_section)sec_def.closed = true;
                var $tit;
                sections_map.push(sec_def);
                var inner_html = "";
                $.each(sec_def.getComponentTypes(), function (i, eltype) {
                    var def = eltype;
                    if (def) {
                        inner_html += getHTMLForAction(def, cat_match)
                    }
                });
                if (inner_html.length || true) {
                    html += '<li data-section-index="' + (sections_map.length - 1) + '" class="' + "section" + (sec_def.closed ? " section-closed" : "") + (sec_def == assigned_actions_section ? " assigned-actions" : "") + '"><div><h2>' + sec_def.name + "<small> / " + sec_def.framework.name + "</small>" + section_icons + "</h2></div>";
                    html += "<ul>";
                    html += inner_html;
                    html += "</ul></li>"
                }
            });
            $list.get(0).innerHTML = html;
            var dbl_timer = null;
            var tooltip_active = false;
            var last_previewed_def = null;
            updateAssignedActions();
            updateUsage();
            crsaHandleExternalLinks($list);
            $list.find("li.section > div").on("click", function (e) {
                var $section = $(e.delegateTarget).parent();
                var sec_def = getSectionDef($section);
                var $ul = $section.find(">ul");
                if ($section.hasClass("section-closed")) {
                    $section.removeClass("section-closed");
                    sec_def.closed = false
                } else {
                    $section.addClass("section-closed");
                    sec_def.closed = true
                }
            })
        };
        var updateUsage = function ($div) {
            if (!$div)$div = $container;
            $div.find("li.has-data").removeClass("has-data");
            $div.find("li.crsa-action").each(function (i, a) {
                var $li = $(a);
                $li.find(".action-fields").remove();
                var def = getActionDef($li);
                if (selectedPgel) {
                    if (hasAction(selectedPgel, def)) {
                        $li.addClass("crsa-action-on");
                        showFields(selectedElement, def, $li);
                        $li.closest(".section").addClass("has-data")
                    } else {
                        $li.removeClass("crsa-action-on");
                        removeFields($li)
                    }
                } else {
                    $li.removeClass("crsa-action-on")
                }
            });
            $div.find(".section").each(function (i, sec) {
                var $sec = $(sec);
                var $ul = $sec.find(">ul");
                if ($ul.get(0).childNodes.length) {
                    $sec.show()
                } else {
                    $sec.hide()
                }
            })
        };
        var addEventsToList = function () {
            var list = $list.get(0);
            list.addEventListener("mouseenter", function (event) {
                var $target = $(event.target);
                if ($target.is("i.show-code")) {
                    if (selectedPgel) {
                        var $li = $target.closest("li");
                        var def = getActionDef($li);
                        var code = def.framework.get_preview_for_action(selectedPgel, def);
                        var $el = crsaFuncs.createPreviewElementFromDefinition(def);
                        if (!$el) {
                            pinegrow.showPreview($li, $("<pre>" + escapeHtmlCode(code) + "</pre>"), "cm-preview actions-preview", 300)
                        } else {
                            pinegrow.showPreview($li, $el, "actions-preview", 300, code)
                        }
                    }
                }
            }, true);
            list.addEventListener("mouseleave", function (event) {
                var $target = $(event.target);
                if ($target.is("i.show-code")) {
                    pinegrow.hidePreview()
                }
            }, true);
            list.addEventListener("contextmenu", function (e) {
                var $target = $(e.target);
                if ($target.is("name") || $target.parent().is("name")) {
                    e.stopPropagation();
                    e.preventDefault();
                    var $li = $target.closest("li");
                    var def = getActionDef($li);
                    var $menu = new CrsaContextMenu;
                    var name = getElementName(selected$el);
                    var action_name = "<b>" + def.name + "</b>";
                    if (selected$el && selectedPgel) {
                        if (hasAction(selectedPgel, def)) {
                            $menu.add("Remove action from selected element", null, null, "header");
                            $menu.add("Remove " + action_name + " from <b>" + name + "</b>", null, function () {
                                $target.closest("name").click()
                            })
                        } else {
                            $menu.add("Add action to selected element", null, null, "header");
                            $menu.add("Add " + action_name + " to <b>" + name + "</b>", null, function () {
                                $target.closest("name").click()
                            });
                            if (def.not_placeable) {
                                $menu.add("", null, null, "divider");
                                $menu.add("Can't create new HTML element: " + def.not_placeable, null, null, "header")
                            }
                        }
                        if (def.not_placeable) {
                        } else {
                            var am = crsaFuncs.findActionMenuForInsertingDefIntoEl(def, selected$el);
                            $menu.add("", null, null, "divider");
                            $menu.add("Create new HTML element with this action", null, null, "header");
                            $menu.add("Prepend to <b>" + name + "</b>", null, function () {
                                crsaFuncs.insertThroughActionMenu(am, selected$el, def, false, true)
                            });
                            $menu.add("Append to <b>" + name + "</b>", null, function () {
                                crsaFuncs.insertThroughActionMenu(am, selected$el, def, false, false)
                            });
                            $menu.add("Insert before <b>" + name + "</b>", null, function () {
                                crsaFuncs.insertBeforeOrAfter(selected$el, def, false, false)
                            });
                            $menu.add("Insert after <b>" + name + "</b>", null, function () {
                                crsaFuncs.insertBeforeOrAfter(selected$el, def, false, true)
                            });
                            $menu.add("Replace <b>" + name + "</b>", null, function () {
                                crsaFuncs.replaceElement(selected$el, def)
                            })
                        }
                    } else {
                        $menu.add("First select an existing element on the page and then use the right click to place the new element.", null, function () {
                        }, "header")
                    }
                    $menu.showAt(e.pageX, e.pageY)
                }
            }, true);
            list.addEventListener("click", function (event) {
                var $target = $(event.target);
                if ($target.is("i.show-code")) {
                    if (selectedPgel) {
                        var selectedCrsaPage = pinegrow.getSelectedPage();
                        var $li = $target.closest("li");
                        var def = getActionDef($li);
                        pinegrow.hidePreview();
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        selectedCrsaPage.callFrameworkHandler("on_action_show_code_clicked", selectedPgel, def, $li)
                    }
                } else if ($target.is("i.action-magic")) {
                    if (selectedPgel) {
                        var selectedCrsaPage = pinegrow.getSelectedPage();
                        var $li = $target.closest("li");
                        var def = getActionDef($li);
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        if (selectedPgel && hasAction(selectedPgel, def)) {
                            selectedCrsaPage.callFrameworkHandler("on_action_magic_clicked", selectedPgel, def, $li)
                        } else {
                            var code = selectedCrsaPage.callFrameworkHandler("on_action_magic_preview_clicked", selectedPgel, def, function (code) {
                                if (code) {
                                    pinegrow.showPreview($li, code, "actions-preview", 300)
                                }
                            })
                        }
                    }
                } else if ($target.is("name") || $target.parent().is("name")) {
                    var $li = $target.closest("li");
                    var def = getActionDef($li);
                    var pos_top = $li.position().top;
                    if (selected$el) {
                        var elname = getElementName(selected$el);
                        var problems = new pgParserSourceProblem(selectedPgel, selected$el, def.ignore_lock ? true : false);
                        var selectedCrsaPage = pinegrow.getSelectedPage();
                        if (!selectedPgel) {
                            problems.add("element", elname, "change")
                        }
                        if (!problems.ok()) {
                            showAlert(problems.toString(), "Can't edit this element");
                            return
                        }
                        if (!hasAction(selectedPgel, def)) {
                            willMakeChange(selectedCrsaPage.$iframe, "Add action / " + elname);
                            $.fn.crsa("addActionToElement", selectedPgel, def, selectedCrsaPage, selected$el);
                            pinegrow.showQuickMessage("Action <b>" + def.name + "</b> was added to <b>" + elname + "</b>");
                            showFields(selectedElement, def, $li);
                            $li.addClass("crsa-action-on")
                        } else {
                            willMakeChange(selectedCrsaPage.$iframe, "Remove action / " + elname);
                            $.fn.crsa("removeActionFromElement", selectedPgel, def, selectedCrsaPage, selected$el);
                            pinegrow.showQuickMessage("Action <b>" + def.name + "</b> was removed from <b>" + elname + "</b>");
                            removeFields($li);
                            $li.removeClass("crsa-action-on")
                        }
                        if ($li.closest(".assigned-actions").length) {
                            updateUsage()
                        } else {
                            updateAssignedActions();
                            updateUsage($list.find(".assigned-actions"))
                        }
                        var new_top = $li.position().top;
                        var $content = $li.closest(".content");
                        var st = $content.scrollTop();
                        st = st - (pos_top - new_top);
                        $content.scrollTop(st);
                        $.fn.crsa("updateStructureAndWireAllElemets", selectedCrsaPage.$iframe, selected$el, true);
                        didMakeChange(selectedCrsaPage.$iframe, selected$el)
                    }
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    pinegrow.showNotice("<p>A couple of tips on using actions:</p><ul><li><b>Click on the action name</b> to add or remove the action from the selected element.</li><li><b>Right-click on the action name</b> to insert a new HTML element with the action into or before / after the selected element.</li></ul>", "Actions", "actions-click-name")
                }
            }, true)
        };
        var def = null;
        var active_$el = null;
        addEventsToList();
        updateList();
        $input.on("input", function () {
            updateList()
        })
    }
};
var pgWindowManager = function (win, name, no_prefs_func) {
    var _this = this;
    this.win = win;
    this.name = name;
    var getKey = function (key) {
        return "win_" + _this.name + "_" + screen.width + "x" + screen.height + "_" + key
    };
    var x = localStorage[getKey("x")] || null;
    var y = localStorage[getKey("y")] || null;
    var w = localStorage[getKey("w")] || null;
    var h = localStorage[getKey("h")] || null;
    if (x === null && y === null && w === null & h === null) {
        if (no_prefs_func)no_prefs_func(win)
    } else {
        if (x !== null && y !== null) {
            x = parseInt(x);
            y = parseInt(y);
            win.moveTo(x, y)
        }
        if (w !== null && h !== null) {
            w = parseInt(w);
            h = parseInt(h);
            win.resizeTo(w, h)
        }
    }
    var save = function () {
        localStorage[getKey("x")] = _this.win.x;
        localStorage[getKey("y")] = _this.win.y;
        localStorage[getKey("w")] = _this.win.width;
        localStorage[getKey("h")] = _this.win.height
    };
    win.on("move", function (x, y) {
        save()
    });
    win.on("resize", function (w, h) {
        save()
    })
};