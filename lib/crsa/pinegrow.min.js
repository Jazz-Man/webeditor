var Pinegrow = function () {
    var components = {};
    var frameworks = {};
    var framework_urls = [];
    var _this = this;
    this.sourceParser = true;
    this.httpServer = null;
    var ignore_clicks = false;
    var count = 0;
    this.getComponent = function (name, done) {
        if (name in components) {
            done(components[name])
        } else {
            components[name] = new PgComponent(name, done)
        }
    };
    this.getProxyUrl = function (url, live) {
        if (this.sourceParser && this.httpServer) {
            return this.httpServer.makeProxyUrl(url, live)
        }
        return url
    };
    this.getOriginalUrl = function (url) {
        if (this.httpServer) {
            return this.httpServer.getOriginalUrl(url)
        }
        return url
    };
    this.getPlaceholderImage = function () {
        var path;
        if (isApp()) {
            path = this.getProxyUrl(crsaMakeUrlFromFile(crsaGetAppDir() + "placeholders/img"))
        } else {
            path = "http://pinegrow.com/placeholders/img"
        }
        var r = Math.round(Math.random() * 8) + 1;
        return path + r + ".jpg"
    };
    this.getThumbnailForPlaceholderImage = function (img) {
        return img.replace(".jpg", "_thumb.jpg")
    };
    this.getPageForElement = function ($el) {
        var $if = getIframeOfElement($el);
        if ($if) {
            return getCrsaPageForIframe($if)
        }
        return null
    };
    this.getStylesheets = function () {
        return $.fn.crsacss("getAllStylesheets")
    };
    this.addFramework = function (f) {
        frameworks[f.key] = f;
        if (framework_urls.length > 0) {
            f.localFile = framework_urls[framework_urls.length - 1]
        }
        $("body").trigger("crsa-framework-loaded", f)
    };
    this.getFrameworks = function () {
        return frameworks
    };
    this.findFrameworkWithFile = function (file) {
        var f = null;
        $.each(frameworks, function (i, fm) {
            if (fm.localFile && fm.localFile == file) {
                f = fm;
                return false
            }
        });
        return f
    };
    this.loadAllFrameworksFromFile = function () {
        var flist = crsaStorage.hasValue("frameworks") ? crsaStorage.getValue("frameworks") : [];
        var elist = "";
        var idx = 0;
        var not_found = [];
        var loadOne = function () {
            if (idx >= flist.length) {
                if (elist.length > 0) {
                    showAlert(elist, "Not all frameworks could be loaded")
                }
                if (not_found.length) {
                    for (var i = 0; i < not_found.length; i++) {
                        var n = flist.indexOf(not_found[i]);
                        if (n >= 0) {
                            flist.splice(n, 1)
                        }
                    }
                    crsaStorage.setValue("frameworks", flist)
                }
            } else {
                var file = flist[idx];
                _this.loadFrameworkFromFile(file, true, function (e) {
                    if (e) {
                        elist += "<p>Unable to load " + file + ": " + e + "</p>";
                        if (e == "FILE_NOT_FOUND") {
                            not_found.push(file)
                        }
                    }
                    idx++;
                    loadOne()
                })
            }
        };
        loadOne()
    };
    this.fileLoaded = function () {
        if (framework_urls.length > 0)framework_urls.pop()
    };
    this.addScriptToPage = function (page, code, skip_source) {
        var body = page.getBody();
        var scr = page.getDocument().createElement("script");
        scr.async = false;
        scr.text = code;
        body.appendChild(scr);
        if (!skip_source) {
            var pgBody = getElementPgNode($(body));
            if (pgBody) {
                var n = pgCreateNodeFromHtml("<script>\n    " + code + "\n</script>");
                pgBody.append(n)
            }
        }
        return scr
    };
    this.executeScriptInPage = function (page, code) {
        var scr = this.addScriptToPage(page, code, true);
        setTimeout(function () {
            scr.parentNode.removeChild(scr)
        }, 500)
    };
    this.loadFrameworkFromFile = function (file, ret, done) {
        var e = null;
        if (isApp()) {
            var fs = require("fs");
            if (!crsaIsFileOrDir(crsaMakeFileFromUrl(file))) {
                if (done)done("FILE_NOT_FOUND");
                return false
            }
            try {
                var z = (new Date).getTime();
                var url = file;
                var scr = '<script async="false" src="' + url + "?z=" + z + '"></script>';
                var $body = $("body");
                var scr = document.createElement("script");
                scr.async = false;
                $(scr).on("load", function (e) {
                    $(function () {
                        framework_urls.push(file);
                        try {
                            $("body").trigger("pinegrow-ready", pinegrow);
                            pinegrow.fileLoaded();
                            if (done)done()
                        } catch (err) {
                            pinegrow.fileLoaded();
                            if (done)done(err)
                        }
                    })
                });
                scr.setAttribute("src", url);
                $body.get(0).appendChild(scr);
                var flist = crsaStorage.hasValue("frameworks") ? crsaStorage.getValue("frameworks") : [];
                if (flist.indexOf(file) < 0) {
                    flist.push(file);
                    crsaStorage.setValue("frameworks", flist)
                }
            } catch (err) {
                e = err;
                if (!ret) {
                    showAlert("Unable to load " + file + ". " + err, "Unable to load framework")
                }
                console.log(err);
                if (done)done(err)
            }
        }
        return e
    };
    this.saveFrameworksList = function () {
        var flist = [];
        $.each(frameworks, function (key, fm) {
            if (fm.localFile) {
                flist.push(fm.localFile)
            }
        });
        crsaStorage.setValue("frameworks", flist)
    };
    this.unloadFramework = function (f) {
        var pages = $.fn.crsapages("getAllPages");
        $.each(pages, function (i, cp) {
            cp.removeFramework(f)
        });
        if (f.key in frameworks) {
            delete frameworks[f.key]
        }
        var idx = -1;
        var flist = crsaStorage.hasValue("frameworks") ? crsaStorage.getValue("frameworks") : [];
        if (f.localFile) {
            idx = flist.indexOf(f.localFile)
        }
        if (idx >= 0)flist.splice(idx, 1);
        crsaStorage.setValue("frameworks", flist)
    };
    this.hasUnsavedFrameworks = function () {
        var b = false;
        $.each(frameworks, function (i, fm) {
            if (fm.changed && fm.user_lib)b = true
        });
        return b
    };
    this.frameworksChanged = function () {
        $.each($.fn.crsapages("getAllPages"), function (i, cp) {
            cp.frameworksChanged()
        });
        $("body").trigger("crsa-frameworks-changed")
    };
    this.callGlobalFrameworkHandler = function (name, a, b, c, cp) {
        if (!cp)cp = this.getSelectedPage();
        var ret = null;
        $.each(this.getFrameworks(), function (key, f) {
            if (name in f && f[name]) {
                ret = f[name](cp, a, b, c)
            }
        });
        return ret
    };
    this.openPage = function (url) {
        $.fn.crsa("openPage", url, null, function (cp) {
            if (crsaIsFileUrl(url)) {
                cp.setLocalFile(crsaMakeFileFromUrl(url))
            }
            scrollCanvasToPage(cp.$iframe)
        })
    };
    this.getCrsaPageById = function (id) {
        var pages = $.fn.crsapages("getAllPages");
        for (var i = 0; i < pages.length; i++) {
            if (pages[i].uid == id)return pages[i]
        }
        return null
    };
    this.getCrsaPageByUrl = function (url) {
        var pages = $.fn.crsapages("getAllPages");
        var m = url.match(/pgid=([0-9]+)/);
        if (m) {
            var pageid = parseInt(m[1]);
            var cp = this.getCrsaPageById(pageid);
            if (cp)return cp
        }
        for (var i = 0; i < pages.length; i++) {
            if (pages[i].url == url && !pages[i].live_update)return pages[i]
        }
        for (var i = 0; i < pages.length; i++) {
            if (pages[i].url == url)return pages[i]
        }
        return null
    };
    this.getSourceNodeOfUrl = function (url, clone) {
        var cp = this.getCrsaPageByUrl(url);
        if (cp) {
            return clone ? cp.sourceNode.clone() : cp.sourceNode
        }
        var fullPath = crsaMakeFileFromUrl(url);
        var fs = require("fs");
        try {
            if (fs.existsSync(fullPath)) {
                var data = fs.readFileSync(fullPath);
                var html = data.toString("utf8");
                var p = new pgParser;
                p.parse(html);
                return p.rootNode
            }
        } catch (err) {
            return null
        }
    };
    this.getCrsaPageOfPgParserNode = function (pgel) {
        var pages = $.fn.crsapages("getAllPages");
        for (var i = 0; i < pages.length; i++) {
            if (pages[i].sourceNode == pgel.document)return pages[i]
        }
        return null
    };
    this.isElementLocked = function (pgel, cp) {
        if (!cp)cp = this.getCrsaPageOfPgParserNode(pgel);
        return cp.callFrameworkHandler("is_element_locked", pgel)
    };
    this.willChangeDom = function () {
        crsaWillChangeDom()
    };
    this.setNeedsUpdate = function ($el, now) {
        $.fn.crsa("setNeedsUpdate", now, $el)
    };
    this.getSelectedPage = function () {
        return $.fn.crsa("getSelectedCrsaPage")
    };
    this.getSelectedElement = function () {
        return $.fn.crsa("getSelectedElement")
    };
    this.selectElement = function ($el) {
        $.fn.crsa("selectElement", $el)
    };
    this.showCSSRules = function ($el, filter, active) {
        $.fn.crsa("showCSSRules", $el, filter, active)
    };
    this.scrollCanvasToElement = function ($el) {
        $.fn.crsa("scrollCanvasToElement", $el)
    };
    this.addPageAction = function (name, func) {
        $.fn.crsapages("addCustomPageAction", name, func)
    };
    this.showTab = function (tab) {
        $.fn.crsa("showTab", tab)
    };
    this.formatHtml = function (src) {
        return html_beautify(src, {
            wrap_line_length: 0,
            indent_size: parseInt(pinegrow.getSetting("html-indent-size", "4"))
        })
    };
    this.getFormatHtmlOptions = function () {
        return {indent: new Array(parseInt(pinegrow.getSetting("html-indent-size", "4")) + 1).join(" ")}
    };
    this.getHtmlIndentForLevel = function (level, options) {
        if (!options)options = this.getFormatHtmlOptions();
        var s = "";
        for (var i = 0; i < level; i++) {
            s += options.indent
        }
        return s
    };
    this.setIgnoreClicks = function (val) {
        ignore_clicks = val
    };
    this.getIgnoreClicks = function () {
        return ignore_clicks
    };
    this.getUniqueId = function (prefix) {
        return getUniqueId(prefix)
    };
    this.showNotice = function (msg, title, key, done) {
        showNotice(msg, title, key, done)
    };
    this.showAlert = function (msg, title, cancel, ok, onCancel, onOk) {
        showAlert(msg, title, cancel, ok, onCancel, onOk)
    };
    this.showQuickMessage = function (msg, duration, single) {
        return crsaQuickMessage(msg, duration, single)
    };
    this.getSetting = function (key, def) {
        key = "settings-" + key;
        if (key in window.localStorage) {
            return window.localStorage[key]
        }
        if (typeof def == "undefined")def = null;
        return def
    };
    this.setSetting = function (key, value) {
        key = "settings-" + key;
        window.localStorage[key] = value
    };
    this.openExternalUrl = function (url) {
        var gui = require("nw.gui");
        gui.Shell.openExternal(url)
    };
    this.addActionToElementForPreview = function (pgel, action_def, remove_other) {
        $.fn.crsa("addActionToElementForPreview", pgel, action_def, remove_other)
    };
    this.hasElementAction = function (pgel, action_def) {
        $.fn.crsa("hasElementAction", pgel, action_def)
    };
    this.showPreview = function ($target, $content, cls, fixedX, code) {
        $.fn.crsa("showPreview", $target, $content, cls, fixedX, code)
    };
    this.hidePreview = function () {
        $.fn.crsa("hidePreview")
    };
    this.getValidationError = function (name, err) {
        switch (err) {
            case"req":
                return name + " is required.";
            default:
                return name + " has invalid value"
        }
        return null
    };
    this.validateField = function (selectedElement, fn, value, fdef, $field, values) {
        if (fdef.validate) {
            var err = fdef.validate(selectedElement, fn, value, fdef, $field, values);
            if (err) {
                $field.addClass("error");
                $field.find("p.error-message").remove();
                $field.append('<p class="error-message">' + err + "</p>")
            } else {
                $field.removeClass("error");
                $field.find("p.error-message").remove()
            }
        }
    };
    this.validateAllFields = function ($div, selectedElement, values) {
        $div.find(".crsa-field").each(function (i, f) {
            var $field = $(f);
            var fn = $field.data("crsa-field");
            pinegrow.validateField(selectedElement, fn, values.hasOwnProperty(fn) ? values[fn] : null, $field.data("crsa-field-def"), $field, values)
        })
    };
    this.willMakeChange = function (page, $el, action) {
        willMakeChange(page.$iframe, action + " / " + getElementName($el))
    };
    var plugin_controls = [];
    this.addPluginControlToTopbar = function (f, $control) {
        var $c = $("#main-navbar .plugin-controls");
        $c.append($control);
        plugin_controls.push({framework: f, control: $control});
        $control.hide()
    };
    var showPluginControlsForSelectedPage = function (cp) {
        for (var i = 0; i < plugin_controls.length; i++) {
            if (!cp || !cp.hasFramework(plugin_controls[i].framework)) {
                plugin_controls[i].control.hide()
            } else {
                plugin_controls[i].control.show()
            }
        }
    };
    $("body").on("crsa-page-selected crsa-frameworks-changed", function (e, crsaPage) {
        if (!crsaPage)crsaPage = pinegrow.getSelectedPage();
        showPluginControlsForSelectedPage(crsaPage)
    });
    this.getProductName = function (p) {
        if (!p) {
            p = crsaStorage.getValue("activatedProduct")
        }
        switch (p) {
            case"PG_PERSONAL":
                return "Standard Personal";
            case"PG_COMPANY":
                return "Standard Company";
            case"PG_STUDENT":
                return "Standard Student";
            case"PGWP_PERSONAL":
                return "WordPress Personal";
            case"PGWP_COMPANY":
                return "WordPress Company";
            case"PGWP_STUDENT":
                return "WordPress Student"
        }
        return "Unknown"
    };
    this.getActivatedProducts = function () {
        var p = crsaStorage.getValue("activatedProduct");
        var r = [];
        if (p) {
            r.push("PG");
            if (p.indexOf("PGWP") == 0) {
                r.push("WP")
            }
        }
        return r
    };
    this.hasActivatedProduct = function (p) {
        return this.getActivatedProducts().indexOf(p) >= 0
    };
    this.showBuyProductScreen = function (p) {
        $.fn.crsa("showIntroScreen", p)
    }
};
var PgFramework = function (key, name) {
    this.key = key;
    this.name = name;
    this.detect = null;
    this.component_types = {};
    this.default = false;
    this.lib_sections = [];
    this.actions_sections = [];
    this.ignore_css_files = [];
    this.type = null;
    this.allow_single_type = false;
    this.localFile = null;
    this.on_get_source = null;
    this.user_lib = false;
    this.changed = false;
    this.not_main_types = false;
    this.product = null;
    this.trial = false;
    this.trial_start_message = "7 day trial was started.";
    this.trial_expired_message = "The trial expired. Please purchase the product to continue using it.";
    this.common_sections = {};
    var ordered_list = [];
    var ordered = false;
    this.isTrialActive = function () {
        var trial_key = this.key + "_trial_start_date";
        var trial_start_date = crsaStorage.getValue(trial_key);
        if (!trial_start_date) {
            trial_start_date = (new Date).getTime();
            crsaStorage.setValue(trial_key, trial_start_date);
            alert(this.trial_start_message)
        }
        var max_trial = 7 * 24 * 3600 * 1e3;
        if ((new Date).getTime() + 0 * (max_trial + 1) - trial_start_date > max_trial) {
            alert(this.trial_expired_message);
            if (this.product) {
                pinegrow.showBuyProductScreen(this.product)
            }
            return false
        }
        return true
    };
    this.addComponentType = function (def) {
        if (def.selector && typeof def.selector == "string") {
            if (def.selector.match(/^[a-z]+$/i)) {
                def.selector_tag = def.selector.toUpperCase()
            }
        }
        this.component_types[def.type] = def;
        if (!def.priority)def.priority = 1e3;
        def.framework = this;
        if (this.common_sections) {
            if (!def.sections) {
                def.sections = {}
            }
            $.each(this.common_sections, function (key, sdef) {
                def.sections[key] = sdef
            })
        }
        ordered_list.push(def);
        ordered = false
    };
    this.removeComponentType = function (def) {
        if (def.type in this.component_types) {
            delete this.component_types[def.type];
            var idx = ordered_list.indexOf(def);
            if (idx >= 0) {
                ordered_list.splice(idx, 1)
            }
            ordered = false;
            for (var n = 0; n < this.lib_sections.length; n++) {
                var s = this.lib_sections[n];
                var idx = s.components.indexOf(def);
                if (idx >= 0) {
                    s.components.splice(idx, 1)
                }
            }
            for (var n = 0; n < this.actions_sections.length; n++) {
                var s = this.actions_sections[n];
                var idx = s.components.indexOf(def);
                if (idx >= 0) {
                    s.components.splice(idx, 1)
                }
            }
        }
    };
    this.getType = function ($el) {
        if (!ordered) {
            ordered_list.sort(function (a, b) {
                return a.priority - b.priority
            });
            ordered = true
        }
        for (var i = 0; i < ordered_list.length; i++) {
            var def = ordered_list[i];
            var isType = false;
            if (typeof def.selector == "function") {
                isType = def.selector($el)
            } else if (def.selector) {
                isType = $el.is(def.selector)
            }
            if (isType) {
                return def
            }
        }
        return null
    };
    this.getTypes = function ($el, pgel) {
        if (!ordered) {
            ordered_list.sort(function (a, b) {
                return a.priority - b.priority
            });
            ordered = true
        }
        var r = [];
        for (var i = 0; i < ordered_list.length; i++) {
            var def = ordered_list[i];
            var isType = false;
            if (typeof def.selector == "function") {
                isType = def.selector($el)
            } else if (def.selector) {
                isType = $el.is(def.selector)
            }
            if (isType) {
                r.push(def);
                if (def.last_type)break
            }
        }
        return r
    };
    this.getComponentTypes = function () {
        return this.component_types
    };
    this.getComponentType = function (type) {
        return this.component_types[type] ? this.component_types[type] : null
    };
    this.addLibSection = function (section) {
        this.lib_sections.push(section);
        section.framework = this
    };
    this.getLibSections = function () {
        return this.lib_sections
    };
    this.addActionsSection = function (section) {
        this.actions_sections.push(section);
        section.framework = this
    };
    this.getActionsSections = function () {
        return this.actions_sections
    };
    this.getAutoId = function (prefix) {
        var c = 0;
        var t;
        do {
            c++;
            t = prefix + (c > 0 ? c : "")
        } while (t in this.component_types);
        return {count: c, type: t}
    };
    this.getFileName = function () {
        if (this.localFile) {
            return getPageName(this.localFile)
        } else {
            return this.name.replace(/\s/gi, "") + ".js"
        }
    };
    this.getBaseUrl = function () {
        if (this.localFile) {
            return crsaGetBaseForUrl(this.localFile)
        }
        return null
    };
    this.save = function (file, done) {
        if (file != this.localFile) {
            this.name = getPageName(file).replace(/\.js$/i, "");
            this.key = this.name
        }
        var s = "";
        var comp_list = [];
        $.each(this.component_types, function (i, def) {
            var type = def.type;
            var vn = "comp_" + type.replace(/-/g, "_");
            s += def.toJSCode(vn);
            comp_list.push(vn)
        });
        var source = '$(function() {\n\n    //Wait for Pinegrow to wake-up\n    $("body").one("pinegrow-ready", function(e, pinegrow) {\n\n        //Create new Pinegrow framework object\n        var f = new PgFramework("' + this.key + '", "' + this.name + '");\n\n        //This will prevent activating multiple versions of this framework being loaded\n        f.type = "' + this.key + '";\n        f.allow_single_type = true;\n        f.user_lib = ' + (this.user_lib ? "true" : "false") + "\n" + s + '\n        //Tell Pinegrow about the framework\n        pinegrow.addFramework(f);\n            \n        var section = new PgFrameworkLibSection("' + this.key + '_lib", "Components");\n        //Pass components in array\n        section.setComponentTypes([' + comp_list.join(", ") + "]);\n\n        f.addLibSection(section);\n   });\n});";
        try {
            var fs = require("fs");
            crsaWriteFileWithBackup(fs, file, source, "utf8");
            this.localFile = file;
            pinegrow.saveFrameworksList();
            this.changed = false
        } catch (err) {
            showAlert("File " + file + " could not be saved. " + err, "Error")
        }
        if (done)done()
    }
};
var PgFrameworkLibSection = function (key, name) {
    this.key = key;
    this.name = name;
    this.components = [];
    this.framework = null;
    this.addComponentType = function (pgComponentType) {
        this.components.push(pgComponentType)
    };
    this.setComponentTypes = function (list) {
        this.components = list
    };
    this.getComponentTypes = function () {
        return this.components
    }
};
var PgComponentType = function (type, name) {
    this.type = type;
    this.name = name;
    this.selector = null;
    this.code = null;
    this.preview = null;
    this.sections = null;
    this.priority = 1e3;
    this.attribute = null;
    this.attribute_default = null;
    this.parameter_attributes = [];
    this.parent_selector = null;
    this.inherit_from = null;
    this.empty_placeholder = null;
    this.display_name = null;
    this.live_update = true;
    this.framework = null;
    this.set_value = null;
    this.toJSCode = function (vn) {
        var escapeCode = function (code) {
            code = html_beautify(code);
            code = code.replace(/\r\n|\r|\n/g, "\\\n");
            return code.replace(/'/g, "\\'")
        };
        var c = "\n        var " + vn + " = new PgComponentType('" + this.type + "', '" + escapeCode(this.name) + "');\n        " + vn + ".code = '" + escapeCode(this.code) + "';\n        " + vn + ".parent_selector = " + (this.parent_selector ? "'" + this.parent_selector + "'" : "null") + ";\n        f.addComponentType(" + vn + ");\n        ";
        return c
    };
    this.getActionParameters = function () {
        var r = [];
        $.each(this.sections, function (skey, sdef) {
            if (sdef.fields) {
                $.each(sdef.fields, function (fkey, fdef) {
                    if (fdef.attribute) {
                        r.push({name: fdef.attribute, "default": fdef.default ? fdef.default : null})
                    }
                })
            }
        });
        return r
    }
};
var PgPropertiesSection = function (key, name) {
    this.key = key;
    this.name = name;
    this.fields = {};
    this.addProperty = function (pgProp, key) {
        if (!key)key = pgProp.key;
        this.fields[pgProp.key] = pgProp
    }
};
var PgProperty = function (key, name) {
    this.name = name;
    this.key = key;
    this.type = null;
    this.action = null;
    this.get_value = null;
    this.set_value = null;
    this.value = null;
    this.show_empty = null;
    this.attribute = null;
    this.options = null
};
var PgComponent = function (name, done) {
    this.html = null;
    this.error = null;
    this.url = null;
    var _this = this;
    this.url = "components/" + name + ".html";
    if (isApp()) {
        var fs = require("fs");
        try {
            this.html = fs.readFileSync(crsaMakeFileFromUrl(this.url), {encoding: "utf8"});
            if (done)done(this)
        } catch (err) {
            this.error = err;
            if (done)done(this)
        }
    } else {
        $.ajax({url: this.url, data: null, dataType: "text"}).done(function (data) {
            _this.html = data;
            if (done)done(_this)
        }).fail(function (a) {
            _this.error = a;
            if (done)done(_this)
        })
    }
};