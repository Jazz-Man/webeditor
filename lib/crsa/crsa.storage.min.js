!function (e) {
    e.fn.crsastorage = function (n) {
        return a[n] ? a[n].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof n && n ? (e.error("Method " + n + " does not exist on jQuery.crsastorage"), void 0) : a.init.apply(this, arguments)
    };
    var n, o, r = [], i = "service/index.php", t = null, a = {
        init: function (o) {
            n = e.extend({}, e.fn.crsastorage.defaults, o)
        }, auth: function () {
        }, authDone: function () {
            c()
        }, createProject: function (e) {
            o.mkdir("/" + e, function (e, n) {
                return e ? (showError(e), void 0) : (r.push(n), o.makeUrl(n.path, {"long": !0}, function (e, n) {
                    return e ? (showError(e), void 0) : (console.log(n), void 0)
                }), void 0)
            })
        }, openProject: function (e) {
            t = null;
            s("getProject", {pid: e}, function (e, n) {
                l(e) || (console.log(n), t = n, a.openProjectBrowser(t))
            })
        }, openProjectBrowser: function (n) {
            function o(e, n) {
                var o = e.name.toLowerCase(), r = n.name.toLowerCase();
                return r > o ? -1 : o > r ? 1 : 0
            }

            "undefined" != typeof n && n || (n = t);
            var r = e("<div/>", {"class": "crsa-project-browser"}).appendTo(e("body")), i = (e("<h2/>").html(n.name).appendTo(r), e("<div/>", {"class": "crsa-project-tree"}).appendTo(r)), a = e("<div/>", {"class": "crsa-project-grid"}).appendTo(r), c = e("<a/>", {
                href: "#",
                "class": "crsa-project-upload"
            }).html("Upload").appendTo(r);
            c.on("click", function () {
                var o = p.data("crsa-node");
                return filepicker.pickAndStore({multiple: !0, services: ["COMPUTER"]}, {
                    location: "S3",
                    path: o.storagePrefix
                }, function (r) {
                    console.log(r), e.each(r, function (r, i) {
                        s("addFile", {
                            pid: n.pid,
                            filePickerUrl: i.url,
                            key: i.key,
                            fileName: i.filename,
                            mimeType: i.mimetype
                        }, function (n, r) {
                            if (!l(n)) {
                                console.log(r.file);
                                var i = -1;
                                e.each(o.children, function (e, n) {
                                    return n.relativeUrl == r.file.relativeUrl ? (i = e, !1) : void 0
                                }), i >= 0 ? o.children[i] = r.file : (o.children.push(r.file), f(p))
                            }
                        })
                    })
                }, function (e) {
                    console.log(e)
                }), !1
            });
            var d = function (n, o) {
                var r = e("<li/>").html("<div>" + n.name + "</div>").appendTo(o);
                if (r.data("crsa-node", n), n.children) {
                    var i = e("<ul/>").appendTo(r);
                    e.each(n.children, function (e, n) {
                        n.isFolder && d(n, i)
                    })
                }
            }, u = function (n) {
                a.html(""), n.children && (n.children.sort(o), e.each(n.children, function (n, o) {
                    if (o.isFile) {
                        e("<div/>").html(o.name).appendTo(a)
                    }
                }))
            }, f = function (e) {
                var n = e.data("crsa-node");
                u(n), p && p.removeClass("active"), e.addClass("active"), p = e
            }, p = null, h = e("<ul/>").appendTo(i);
            return d(n.files, h), f(h.find(">li")), h.find("li").on("click", function (n) {
                var o = e(n.delegateTarget);
                return f(o), !1
            }), r
        }
    }, c = function () {
        r = [], o.readdir("/", {}, function (n, o, i, t) {
            return n ? (showError(n), void 0) : (console.log(t), e.each(t, function (e, n) {
                if (n.isFolder) {
                    var o = n;
                    r.push(o), console.log("Project " + o.name)
                }
            }), void 0)
        })
    }, l = function (e) {
        return e ? !0 : !1
    }, s = function (n, o, r) {
        var t = i + "?cmd=" + n, a = e.ajax(t, {data: o, type: "POST"});
        a.done(function (e) {
            e.status && "OK" == e.status ? r(null, e) : r(e.status, e)
        }), a.fail(function (e, n) {
            n || (n = "Unknown error"), r(n)
        })
    };
    e.fn.crsastorage.defaults = {}
}(jQuery);