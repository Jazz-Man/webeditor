var CrsaCodeEdit = function () {
    this.currentPage = null;
    this.currentCrsaPage = null;
    var old_head_value = "";
    var old_body_value = "";
    var update_timer = null;
    var tree_update_timer = null;
    var parse_timer = null;
    var $html = null;
    var doc;
    var code_has_errors;
    var codeEditor;
    var mirror;
    var $textEdit = $("#textedit");
    var $bar = $("#textedit_bar");
    var $select = $bar.find("select.edit-css-select");
    var $live_refresh = $bar.find(".live-update");
    $live_refresh.tooltip({
        container: "body",
        placement: "bottom",
        title: "Auto refresh page view. If disabled - or if the code has syntax errors - click on Refresh! (CMD + R) to refresh page view.",
        trigger: "hover"
    });
    var live_refresh = true;
    var live_refresh_off_reason = null;
    if (pinegrow.getSetting("code-live-update", "1") == "1") {
        $live_refresh.attr("checked", "checked")
    }
    var isLiveRefresh = function () {
        return live_refresh && $live_refresh.is(":checked");
        return $live_refresh.is(":checked")
    };
    var setLiveRefresh = function (val, reason, always_show) {
        var str;
        var showmsg = true;
        switch (reason) {
            case"page":
                str = "Can't auto refresh. Whole page changed.";
                break;
            case"error":
                str = "Can't auto refresh. Code has syntax errors.";
                break;
            case"slow":
                str = "Auto refresh takes too long.";
                showmsg = false;
                break;
            default:
                str = "";
                break
        }
        if (!val) {
            if ((live_refresh || always_show) && showmsg) {
                crsaQuickMessage(" " + str + " <b>Refresh (CMD + R)</b> manually.", 3e3)
            }
            $live_refresh.parent().addClass("manual");
            if (!live_refresh_off_reason || reason == "page") {
                live_refresh_off_reason = reason
            }
        } else {
            $live_refresh.parent().removeClass("manual");
            live_refresh_off_reason = null
        }
        live_refresh = val
    };
    this.refreshBeforeSaveIfNeeded = function () {
        if (this.isInEdit(this.currentPage) && (has_changes || live_refresh_off_reason == "page")) {
            this.refreshPreview();
            has_changes = false
        }
    };
    $live_refresh.on("change", function () {
        pinegrow.setSetting("code-live-update", isLiveRefresh() ? "1" : "0");
        if (isLiveRefresh()) {
            crsaQuickMessage("Auto refresh is enabled.")
        } else {
            crsaQuickMessage("Auto refresh is disabled.");
            showNotice("Click on <b>Refresh!</b> or press <b>CMD + R</b> to manually refresh page view after you make changes.", "Auto update is disabled", "auto-refresh")
        }
    });
    var $wrap = $bar.find(".wrap");
    $wrap.on("change", function () {
        var checked = $wrap.is(":checked");
        pinegrow.setSetting("code-wrap", checked ? "1" : "0");
        mirror.setOption("lineWrapping", checked)
    });
    if (pinegrow.getSetting("code-wrap", "1") == "1") {
        $wrap.attr("checked", "checked")
    }
    var code_ignore_change = false;
    var code_mode = "html";
    var selected_cs = null;
    var needsUpdate = false;
    var source_synced = false;
    var force_refresh = false;
    var has_changes = false;
    var _this = this;
    var script_changes_msg_shown = false;
    var refresh_html_on_select = false;
    var id_to_markers = {};
    var findAndHideIds = function () {
        var tmp = [];
        var re = /data-pg-id="([0-9]+)"/g;
        var doc = mirror.getDoc();
        var num = doc.lineCount();
        for (var i = 0; i < num; i++) {
            var line = doc.getLine(i);
            if (line) {
                re.lastIndex = 0;
                var a;
                while ((a = re.exec(line)) !== null) {
                    var idx = re.lastIndex - a[0].length - 1;
                    var id = a[1] + "";
                    tmp.push({line: i, ch: idx, id: id, len: a[0].length + 1})
                }
            }
        }
        try {
            if (id_to_markers) {
                $.each(id_to_markers, function (id, marker) {
                    marker.clear()
                })
            }
        } catch (err) {
        }
        id_to_markers = {};
        for (var i = 0; i < tmp.length; i++) {
            id_to_markers[tmp[i].id] = doc.markText({line: tmp[i].line, ch: tmp[i].ch}, {
                line: tmp[i].line,
                ch: tmp[i].ch + tmp[i].len
            }, {collapsed: true, inclusiveLeft: false, inclusiveRight: true})
        }
    };
    var scroll_to_selection = true;
    this.editorSizeChanged = function () {
        mirror.refresh()
    };
    this.selectElementInEditor = function ($el) {
        if (code_mode == "html") {
            if (refresh_html_on_select) {
                if (!has_changes) {
                    var si = mirror.getScrollInfo();
                    updateCodeDisplay();
                    mirror.scrollTo(si.left, si.top)
                } else {
                    refresh_html_on_select = false
                }
            }
            var pgel = getElementPgNode($el);
            if (pgel) {
                var pgid = pgel.getId();
                var source = pgel.toStringWithIds(true, pinegrow.getFormatHtmlOptions());
                var source_lines = source.split("\n");
                pgid = pgid + "";
                if (id_to_markers[pgid]) {
                    var marker = id_to_markers[pgid];
                    var pos = marker.find();
                    var doc = mirror.getDoc();
                    var start_ch = 0;
                    if (pos) {
                        var start_line = pos.from.line;
                        var li = pos.from.line;
                        var start = pos.from.ch;
                        while (li >= 0) {
                            var line = doc.getLine(li);
                            if (line && line.length) {
                                if (li != pos.from.line)start = line.length - 1;
                                var idx = line.lastIndexOf("<", start);
                                if (idx >= 0) {
                                    start_ch = idx;
                                    start_line = li;
                                    break
                                }
                            }
                            li--
                        }
                        doc.setSelection({
                            line: start_line,
                            ch: start_ch
                        }, {
                            line: pos.from.line + source_lines.length - 1,
                            ch: source_lines[source_lines.length - 1].length + (source_lines.length == 1 ? start_ch : start_ch)
                        }, {scroll: scroll_to_selection})
                    }
                }
            }
        }
        scroll_to_selection = true
    };
    $("body").on("crsa-element-selected", function (e, element) {
        if (!_this.currentPage)return;
        if (element && element.type == "element") {
            var $el = element.data;
            _this.selectElementInEditor($el)
        }
    });
    var getPgIdOfElementAtPos = function (pos, posOut) {
        var doc = mirror.getDoc();
        var pgid = null;
        var tag = null;
        var cur = {line: pos.line, ch: pos.ch};
        while (cur.line >= 0 && !tag) {
            tag = CodeMirror.findMatchingTag(mirror, cur, 0);
            cur.ch--;
            if (cur.ch < 0) {
                cur.line--;
                if (cur.line >= 0) {
                    var line = doc.getLine(cur.line).length;
                    cur.ch = line.length ? line.length - 1 : 0
                }
            }
        }
        if (tag && tag.open) {
            var start_line = tag.open.from.line;
            var li = start_line;
            var start = tag.open.from.ch;
            var line = doc.getLine(li);
            while (typeof line == "string") {
                var idx = line.indexOf("data-pg-id", start);
                if (idx < 0) {
                    li++;
                    line = doc.getLine(li);
                    start = 0
                } else {
                    line = line.substr(idx);
                    var m = line.match(/data\-pg\-id="([0-9]+)"/);
                    if (m) {
                        pgid = m[1];
                        if (posOut) {
                            posOut.line = cur.line;
                            posOut.ch = cur.ch;
                            posOut.tag = tag
                        }
                        break
                    }
                }
            }
        }
        return pgid
    };
    var parse_interval = 100;
    var last_update_stylesheets_msg = 0;
    var last_errors_msg = 0;
    var onChange = function (changeObj) {
        if (code_ignore_change)return;
        var cp = getCrsaPageForIframe(_this.currentPage);
        var doc = mirror.getDoc();
        var v = doc.getValue();
        var ms = (new Date).getTime();
        has_changes = true;
        if (code_mode == "html") {
            if (isLiveRefresh() || force_refresh || live_refresh_off_reason == "error" || live_refresh_off_reason == "page") {
                var orig_cic = code_ignore_change;
                var ms = (new Date).getTime();
                code_ignore_change = true;
                var ret = cp.applyChangesToSource(v, !force_refresh);
                code_ignore_change = orig_cic;
                var took = (new Date).getTime() - ms;
                if (took > 150) {
                    setLiveRefresh(false, "slow")
                }
                refresh_html_on_select = true;
                if (ret.updated) {
                    if (!isLiveRefresh() && live_refresh_off_reason == "error") {
                        setLiveRefresh(true);
                        crsaQuickMessage("Auto refreshed!")
                    }
                    if (ret.stylesheets_changed || ret.scripts_changed) {
                        if (ms - last_update_stylesheets_msg > 1e4) {
                            crsaQuickMessage("<b>Refresh (CMD + R)</b> to update scripts and stylesheets list.");
                            last_update_stylesheets_msg = ms
                        }
                    }
                    has_changes = false
                } else if (ret.changes && !ret.update) {
                    setLiveRefresh(false, "page");
                    has_changes = false
                } else if (ret.errors && !ret.update) {
                    setLiveRefresh(false, "error", ms - last_errors_msg > 1e4);
                    last_errors_msg = ms
                }
            } else if (live_refresh_off_reason == "slow") {
                if (update_timer) {
                    clearTimeout(update_timer)
                }
                update_timer = setTimeout(function () {
                    update_timer = null;
                    setLiveRefresh(true);
                    onChange()
                }, 1e3)
            }
            return;
            var set_code = true;
            var tree_el_update_pgid = getPgIdOfElementAtPos(changeObj.from);
            var parser = new pgParser;
            parser.parse(v);
            var errors = parser.validate();
            if (errors.length) {
                console.log("ERRORS");
                console.log(errors);
                return
            }
            var changes = pgFindChangedNodesInPage(cp.sourceNode, parser.rootNode);
            var done = false;
            if (changes.length) {
                for (var i = 0; i < changes.length; i++) {
                    var ch = changes[i];
                    if (ch.original.parent == null) {
                        done = false;
                        break
                    }
                    var pgid = ch.original.getId();
                    var $el = _this.currentCrsaPage.getElementWithPgId(pgid);
                    ch.original.replaceWith(ch.changed);
                    if ($el) {
                        $el.get(0).outerHTML = ch.changed.toStringWithIds(true);
                        var $el = _this.currentCrsaPage.getElementWithPgId(pgid);
                        $.fn.crsa("updateStructureAndWireAllElemets", _this.currentPage, $el, true)
                    }
                    done = true
                }
                if (done) {
                    cp.setPageChanged(true);
                    var orig_cic = code_ignore_change;
                    code_ignore_change = true;
                    didMakeChange(_this.currentPage);
                    code_ignore_change = orig_cic;
                    return
                }
            } else {
                console.log("no changes");
                return
            }
            console.log("whole document is changed.");
            return;
            var parsed_html = null;
            parsed_html = parser.toStringWithIds(true, pinegrow.getFormatHtmlOptions());
            cp.sourceNode = parser.rootNode;
            var body = getBody(parsed_html);
            var ms = (new Date).getTime();
            if (ms - start_ms > 250) {
                parse_interval = ms - start_ms;
                if (parse_interval > 1e3)parse_interval = 1e3
            } else {
                parse_interval = ms - start_ms
            }
            var pgHtmlList = parser.rootNode.find("html");
            if (old_body_value == body) {
                if (update_timer)clearTimeout(update_timer);
                var timer2 = null;
                update_timer = setTimeout(function () {
                    if (set_code) {
                        var htmlCode = getHtml(parsed_html);
                        if (pgHtmlList.length == 0 || !htmlCode) {
                            var b = getIframeBody(_this.currentPage[0]);
                            if (b) {
                                b.innerHTML = parsed_html
                            }
                        } else {
                            $html[0].innerHTML = htmlCode;
                            if (pgHtmlList.length) {
                                $html.attr("data-pg-id", pgHtmlList[0].getId())
                            }
                        }
                    }
                    update_timer = null;
                    if (timer2) {
                        clearTimeout(timer2);
                        timer2 = null
                    }
                    timer2 = setTimeout(function () {
                        $.fn.crsa("buildTree", _this.currentPage, null);
                        $.fn.crsacss("loadLessStyles", _this.currentPage);
                        timer2 = null
                    }, 500);
                    if (tree_update_timer) {
                        clearTimeout(tree_update_timer)
                    }
                    var $el = null;
                    if (tree_el_update_pgid) {
                        var $body = $(getIframeBody(_this.currentPage.get(0)));
                        var $el = $body.find('[data-pg-id="' + tree_el_update_pgid + '"]');
                        if (!$el.length) {
                            $el = null
                        }
                    }
                    $.fn.crsa("updateStructureAndWireAllElemets", _this.currentPage, $el, true);
                    tree_update_timer = null
                }, 1e3)
            } else {
                old_body_value = body;
                var pgBodyList = parser.rootNode.find("body");
                var $el = null;
                if (false && !update_timer && tree_el_update_pgid) {
                    var $body = $(getIframeBody(_this.currentPage.get(0)));
                    var $el = $body.find('[data-pg-id="' + tree_el_update_pgid + '"]');
                    var pgel = pgParserNodeCatalogueInstance.get(tree_el_update_pgid)
                }
                if (false && pgel && $el && $el.length) {
                    var elHtml = pgel.toStringWithIds();
                    $el.replaceWith($(elHtml));
                    var pgnew = pgCreateNodeFromHtml(elHtml);
                    pgel.replaceWith(pgnew)
                } else {
                    if (set_code) {
                        if (update_timer)clearTimeout(update_timer);
                        update_timer = setTimeout(function () {
                            var b = getIframeBody(_this.currentPage[0]);
                            if (b) {
                                b.innerHTML = body;
                                if (pgBodyList.length) {
                                    $(b).attr("data-pg-id", pgBodyList[0].getId())
                                }
                            }
                            update_timer = null
                        }, 250)
                    }
                }
                if (tree_update_timer) {
                    clearTimeout(tree_update_timer)
                }
                tree_update_timer = setTimeout(function () {
                    var $el = null;
                    if (tree_el_update_pgid) {
                        var $body = $(getIframeBody(_this.currentPage.get(0)));
                        var $el = $body.find('[data-pg-id="' + tree_el_update_pgid + '"]');
                        if (!$el.length) {
                            $el = null
                        }
                    }
                    $.fn.crsa("updateStructureAndWireAllElemets", _this.currentPage, $el, true);
                    tree_update_timer = null
                }, 1e3)
            }
            cp.setPageChanged(true);
            var orig_cic = code_ignore_change;
            code_ignore_change = true;
            didMakeChange(_this.currentPage);
            code_ignore_change = orig_cic
        } else if (code_mode == "js") {
        } else if (code_mode == "css") {
            if (selected_cs) {
                if (update_timer) {
                    clearTimeout(update_timer);
                    update_timer = null
                }
                update_timer = setTimeout(function () {
                    has_changes = false;
                    selected_cs.genSetSource(v, function () {
                        var gerror = selected_cs.genGetError();
                        if (gerror) {
                            console.log(gerror);
                            code_has_errors = true
                        } else {
                            selected_cs.changed = true;
                            if (code_has_errors) {
                                code_has_errors = false
                            }
                            $("body").trigger("crsa-stylesheets-changed")
                        }
                    }, true)
                }, 750)
            }
        }
        needsUpdate = true
    };
    var getHead = function (html) {
        var i = html.search(/<\/head>/i);
        if (i >= 0) {
            return html.substr(0, i)
        }
        return ""
    };
    var getBody = function (html) {
        var m = html.match(/<body[^>]*>([\s\S]*)<\/body>/im);
        return m ? m[1] : null
    };
    var getHtml = function (html) {
        var m = html.match(/<html[^>]*>([\s\S]*)<\/html>/im);
        return m ? m[1] : null
    };
    var getStylesheets = function () {
        var cp = getCrsaPageStylesForPage(_this.currentPage);
        var r = [];
        if (!cp)return r;
        $.each(cp.getAllCrsaStylesheets(), function (i, cs) {
            if (!cs.inline && cs.loaded) {
                r.push(cs)
            }
        });
        return r
    };
    var showSelectedCss = function () {
        code_mode = "css";
        var name = $select.val();
        var css_list = getStylesheets();
        $.each(css_list, function (i, cs) {
            if (cs.name == name) {
                selected_cs = cs;
                return false
            }
        });
        if (selected_cs) {
            updateCodeDisplay()
        }
    };
    $select.on("change", function (e) {
        setTimeout(function () {
            showSelectedCss()
        }, 10)
    });
    this.pageChanged = function (page, html_code) {
        if (code_ignore_change)return;
        setTimeout(function () {
            var si = mirror.getScrollInfo();
            updateCodeDisplay(code_mode == "html" ? html_code : null);
            mirror.scrollTo(si.left, si.top)
        }, 1)
    };
    var code_ignore_change_timeout = null;
    var updateCodeDisplay = function (html_code) {
        if (code_ignore_change_timeout) {
            clearTimeout(code_ignore_change_timeout);
            code_ignore_change_timeout = null
        }
        code_ignore_change = true;
        var str = "";
        switch (code_mode) {
            case"css":
                str = selected_cs.genGetSource();
                mirror.setOption("mode", "text/css");
                mirror.getDoc().setValue(str);
                code_ignore_change = false;
                break;
            case"js":
                mirror.setOption("mode", "text/javascript");
                mirror.getDoc().setValue(str);
                code_ignore_change = false;
                break;
            default:
                if (html_code) {
                    str = html_code
                } else {
                    str = getCrsaPageForIframe(_this.currentPage).sourceNode.toStringWithIds(true, pinegrow.getFormatHtmlOptions())
                }
                refresh_html_on_select = false;
                old_body_value = getBody(str);
                mirror.operation(function () {
                    mirror.setOption("mode", "text/html");
                    mirror.getDoc().setValue(str);
                    findAndHideIds();
                    code_ignore_change_timeout = setTimeout(function () {
                        code_ignore_change = false;
                        code_ignore_change_timeout = null
                    }, 100)
                });
                break
        }
    };
    this.exitEdit = function (update) {
        this.refreshBeforeSaveIfNeeded();
        var page = this.currentPage;
        this.currentPage = null;
        this.currentCrsaPage = null;
        $textEdit.hide();
        $textEdit.html("");
        mirror = null;
        if (tree_update_timer) {
            clearTimeout(tree_update_timer);
            tree_update_timer = null
        }
        if (update) {
            $("body").trigger("crsa-stylesheets-changed")
        }
        $.fn.crsa("resizeChrome")
    };
    this.isInEdit = function (page) {
        if (this.currentPage && this.currentPage.get(0) == page.get(0))return true;
        return false
    };
    this.refreshPreview = function () {
        if (!has_changes) {
            this.currentCrsaPage.refresh();
            setLiveRefresh(true);
            return
        }
        force_refresh = true;
        onChange(null);
        force_refresh = false;
        crsaQuickMessage("Page view was refreshed.")
    };
    var last_undo_rec_time = 0;
    var onBarClick = function (event) {
        var $b = $(event.delegateTarget);
        if ($b.hasClass("edit-done")) {
            _this.exitEdit(true)
        } else if ($b.hasClass("edit-refresh")) {
            if (event.target != $live_refresh.get(0)) {
                _this.refreshPreview()
            } else {
                return
            }
        } else {
            _this.refreshBeforeSaveIfNeeded();
            if ($b.hasClass("edit-html")) {
                code_mode = "html"
            } else if ($b.hasClass("edit-js")) {
                code_mode = "js"
            } else if ($b.hasClass("edit-css")) {
                showSelectedCss()
            }
            updateCodeDisplay()
        }
        last_undo_rec_time = 0;
        event.preventDefault()
    };
    $bar.find("a, button").on("click", function (event) {
        onBarClick(event)
    });
    this.editCode = function ($iframe) {
        if (this.currentPage && !this.isInEdit($iframe)) {
            this.exitEdit(true)
        }
        this.currentPage = $iframe;
        this.currentCrsaPage = getCrsaPageForIframe($iframe);
        var b = getIframeBody(this.currentPage[0]);
        doc = getIframeDocument(this.currentPage[0]);
        $html = $(doc).find("> html");
        var $mirror_el = null;
        mirror = CodeMirror(function (elt) {
            $textEdit.append($(elt).css("height", "100%"));
            $mirror_el = $(elt)
        }, {
            mode: "text/html",
            autoFocus: true,
            theme: pinegrow.getSetting("code-theme-cm", "eclipse"),
            indentUnit: parseInt(pinegrow.getSetting("html-indent-size", "4")),
            lineWrapping: pinegrow.getSetting("code-wrap", "1") == "1",
            lineNumbers: true,
            matchBrackets: true,
            autoCloseBrackets: true,
            matchTags: true,
            undoDepth: 0,
            extraKeys: {
                "Ctrl-Q": function (cm) {
                    cm.foldCode(cm.getCursor())
                }, "Ctrl-Space": "autocomplete", "Ctrl-Z": function (cm) {
                }
            },
            foldGutter: true,
            gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
            profile: "xhtml"
        });
        if (pinegrow.getSetting("editor-emmet", "false") == "true") {
            emmetCodeMirror(mirror)
        }
        if (isApp()) {
            $mirror_el.on("copy", function () {
                var selectedText = mirror.getDoc().getSelection();
                if (selectedText && selectedText.length) {
                    setTimeout(function () {
                        var gui = require("nw.gui");
                        var clipboard = gui.Clipboard.get();
                        selectedText = pgRemovePgIdsFromCode(selectedText);
                        clipboard.set(selectedText, "text")
                    }, 50)
                }
            })
        }
        mirror.on("contextmenu", function (instance, event) {
            var pos = mirror.coordsChar({left: event.pageX, top: event.pageY}, "page");
            if (pos) {
                var $el = null;
                var posOut = {};
                var pgid;
                do {
                    pgid = getPgIdOfElementAtPos(pos, posOut);
                    if (pgid) {
                        var $el = _this.currentCrsaPage.getElementWithPgId(pgid);
                        pos.line = posOut.line;
                        pos.ch = posOut.ch - 1;
                        if (pos.ch < 0) {
                            pos.line--;
                            if (pos.line > 0) {
                                var line = mirror.getDoc().getLine(pos.line);
                                if (line && line.length) {
                                    pos.ch = line.length - 1
                                } else {
                                    pos.ch = 0
                                }
                            }
                        }
                    }
                } while (pgid && posOut.line >= 0 && $el && $el.is("br"));
                if ($el) {
                    setTimeout(function () {
                        scroll_to_selection = false;
                        pinegrow.selectElement($el);
                        pinegrow.scrollCanvasToElement($el)
                    }, 10)
                }
            }
        });
        mirror.on("change", function (instance, changeObj) {
            onChange(changeObj)
        });
        last_undo_rec_time = (new Date).getTime();
        mirror.on("beforeChange", function (instance, change) {
            if (!code_ignore_change) {
                if (change.text && change.update) {
                    var a = [];
                    var len = 0;
                    for (var i = 0; i < change.text.length; i++) {
                        len += change.text[i].length;
                        a.push(change.text[i].replace(/\sdata-pg-id="[0-9]+"/g, ""))
                    }
                    change.update(null, null, a);
                    var ms = (new Date).getTime();
                    if (ms - last_undo_rec_time > 5e3) {
                        last_undo_rec_time = ms;
                        if (code_mode == "css" && selected_cs) {
                            selected_cs.changed = true
                        }
                        willMakeChange(_this.currentPage, "Edit code")
                    }
                }
                if (!change.update) {
                    console.log("UNDO in edit code")
                }
            }
        });
        $textEdit.show();
        var $resizer = $("<div/>", {"class": "tree-resizer"}).appendTo($textEdit).on("mousedown", function (e) {
            var startLeft = $textEdit.position().left;
            var startWidth = $textEdit.width();
            e.preventDefault();
            $.fn.crsapages("showOverlays");
            $("body").on("mousemove.editResizer", function (m) {
                var w = $(window).width() - (m.pageX < 500 ? 500 : m.pageX) - 12;
                var w = $(window).width() - (m.pageX < 500 ? 500 : m.pageX) - 12;
                if (w <= 100) {
                    w = 100
                } else {
                }
                var left = m.pageX;
                var width = startWidth + (startLeft - left);
                $textEdit.css("width", width + "px").css("left", left + "px");
                $bar.css("width", width + "px").css("left", left + "px");
                localStorage.crsaCodeEditWidth = width
            }).on("mouseup.editResizer", function (e) {
                e.preventDefault();
                $("body").off(".editResizer");
                $.fn.crsapages("showOverlays", true);
                $(window).trigger("resize")
            })
        }).css("top", 0);
        $.fn.crsa("resizeChrome");
        code_has_errors = false;
        var css_list = getStylesheets();
        $select.html("");
        $.each(css_list, function (i, cs) {
            var $o = $("<option/>", {value: cs.name}).html(cs.name).appendTo($select)
        });
        if (selected_cs)$select.val(selected_cs.name);
        updateCodeDisplay();
        showNotice("<p><b>Code view &amp; Page view are best friends!</b></p><p>When you select an element on the page it gets highlighted in the code. When you make a change on the page the code gets updated.</p><p><b>Right click</b> on the element in the code to select the element on the page.</p><p>Use <b>Page -&gt; Refresh (CMD + R)</b> to refresh the view if it gets messed up during editing. No need to save the page first.</p>", "A note about code view", "code-view-2");
        if (!isLiveRefresh()) {
            crsaQuickMessage("Auto refresh is disabled. Press <b>CMD + R</b> to refresh.", 3e3)
        }
        if (code_mode == "html") {
            var selected = pinegrow.getSelectedElement();
            if (selected && selected.type == "element") {
                this.selectElementInEditor(selected.data)
            }
        }
        script_changes_msg_shown = false
    }
};
var CrsaEditor = function () {
    this.selectedPage = null;
    var _this = this;
    var changeTimer = null;
    var keyupTimer = null;
    var copySourceTimer = null;
    var $toolbar = null;
    var observerTimer = null;
    var observeChanges = false;
    var currentElement = null;
    var observer = null;
    var changed = false;
    var originalZoom = 1;
    var editedElement = null;
    var in_edit = false;
    var $parent = null;
    $("body").on("crsaWillMakeChange", function (e) {
        _this.endEdit()
    });
    var getDocument = function () {
        return _this.selectedPage.get(0).contentDocument || _this.selectedPage.get(0).contentWindow.document
    };
    var getWindow = function () {
        return _this.selectedPage.get(0).contentWindow
    };
    var needsLayout = function () {
        $.fn.crsa("setNeedsUpdate", true, currentElement);
        changeTimer = null;
        keyupTimer = null
    };
    var enableObserver = function () {
        if (observerTimer) {
            clearTimeout(observerTimer);
            observerTimer = null
        }
        observeChanges = true;
        observerTimer = setTimeout(function () {
            observeChanges = false
        }, 500)
    };
    var getSelectionHtml = function () {
        var html = "";
        var win = getWindow();
        var doc = getDocument();
        if (typeof win.getSelection != "undefined") {
            var sel = win.getSelection();
            if (sel.rangeCount) {
                var container = doc.createElement("div");
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    container.appendChild(sel.getRangeAt(i).cloneContents())
                }
                html = container.innerHTML
            }
        } else if (typeof doc.selection != "undefined") {
            if (doc.selection.type == "Text") {
                html = doc.selection.createRange().htmlText
            }
        }
        return html
    };
    var getElementUnderCarret = function () {
        var selection;
        var window = getWindow();
        if (window.getSelection)selection = window.getSelection(); else if (document.selection && document.selection.type != "Control")selection = document.selection;
        var anchor_node = selection.anchorNode;
        return anchor_node
    };
    var onNodeInserted = function ($node) {
        var replace_empty_with_p = "div";
        if ($node.get(0).nodeType != 1)return;
        $node.removeAttr("data-pg-id");
        removeCrsaClasses($node);
        if ($node.is("ul,ol")) {
            var $p = $node.parent();
            if ($p.is("p")) {
                $node.insertAfter($p);
                if ($p.html() == "") {
                    $p.remove()
                }
            }
        } else if ($node.is("span")) {
            $node.replaceWith($node.html())
        } else if ($node.is("div")) {
            $node.replaceWith($node.contents())
        } else if ($node.is(replace_empty_with_p)) {
            var $ch = $node.children();
            if ($node.html() == "" || $ch.length == 1 && $ch.is("br")) {
                $node.replaceWith($("<p/>").html("<br/>"))
            }
        }
    };
    var onPageChanged = function () {
        if (changeTimer) {
            clearTimeout(changeTimer);
            changeTimer = null
        }
        if (keyupTimer) {
            clearTimeout(keyupTimer);
            keyupTimer = null
        }
        changeTimer = setTimeout(needsLayout, 750);
        didMakeChange(_this.selectedPage, $parent)
    };
    this.setSelectedPage = function (p) {
        if (!this.selectedPage || !p || this.selectedPage.get(0) != p.get(0) && in_edit) {
            this.endEdit(true)
        }
        this.selectedPage = p;
        if (!p)return;
        var $body = $(getDocument().body);
        var edit = $body.attr("contentEditable") === "true";
        var hasEvent = $body.data("crsa-editor")
    };
    var getNodeParent = function (node) {
        var parent = node.parentNode;
        while (parent && parent.nodeType != 1) {
            parent = parent.parentNode
        }
        return parent
    };
    var isNodeDescendantOf = function (node, ancestor) {
        var p = node.parentNode;
        while (p != null) {
            if (p == ancestor) {
                return true
            }
            p = p.parentNode
        }
        return false
    };
    var copySourceFromDOMToHtml = function () {
        var html = currentElement.html();
        html = removeCrsaClassesFromHtml(html);
        html = html.replace(/\sdata\-pg\-tree\-id="[0-9]+"/g, "");
        var pgel = getElementPgNode(currentElement);
        var cp = pinegrow.getSelectedPage();
        if (cp.sourceNode != pgel.document) {
            console.log("INTERNAL PROBLEM", pgel, cp.sourceNode)
        }
        var p = new pgParser;
        p.replaceExistingIds = false;
        p.parse(html);
        while (pgel.children.length) {
            pgel.children[0].remove()
        }
        for (var i = 0; i < p.rootNode.children.length; i++) {
            pgel.addChild(p.rootNode.children[i])
        }
        pgel.mapIdsToDomElement(currentElement.get(0));
        onPageChanged()
    };
    this.startEdit = function ($dest, $el) {
        if (!$toolbar) {
            $toolbar = $dest;
            this.showToolbar($toolbar)
        }
        var $body = $(getDocument().body);
        $body = $el.closest("div,body,label,section,table");
        if (pgNodeContainsDynamic($body)) {
            $body = $el;
            if (pgNodeContainsDynamic($body)) {
                showAlert("The selected element contains dynamic elements that were created by a JavaScript code. Use Page -&gt; Edit code to edit this content.", "Can't edit this element");
                return
            }
        }
        in_edit = true;
        var top = 43;
        var moveTo = top;
        this.selectedPage.data("crsa-page").undoStack.add("Edit text");
        originalZoom = $.fn.crsapages("getZoom");
        editedElement = $el;
        if (currentElement) {
            currentElement.removeAttr("contentEditable").off(".crsaeditor")
        }
        currentElement = $body;
        $parent = currentElement.parent();
        var ignore_changes = false;
        $body.attr("contentEditable", "true");
        if (true) {
            if (true) {
                var target = currentElement.get(0);
                if (observer) {
                    observer.disconnect()
                }
                var MO = null;
                if (typeof MutationObserver != "undefined") {
                    MO = MutationObserver
                } else if (typeof WebKitMutationObserver != "undefined") {
                    MO = WebKitMutationObserver
                }
                observer = new MO(function (mutations) {
                    if (ignore_changes)return;
                    var change = false;
                    mutations.forEach(function (mutation) {
                        var parents = [];
                        change = true;
                        if (mutation.type == "childList") {
                            for (var n = 0; n < mutation.addedNodes.length; n++) {
                                onNodeInserted($(mutation.addedNodes[n]))
                            }
                            change = true
                        } else if (mutation.type == "characterData") {
                            var textNode = mutation.target;
                            var parent = getNodeParent(textNode);
                            change = true
                        }
                    });
                    if (change) {
                        if (copySourceTimer) {
                            clearTimeout(copySourceTimer)
                        }
                        copySourceTimer = setTimeout(function () {
                            copySourceFromDOMToHtml();
                            copySourceTimer = null
                        }, 500)
                    }
                });
                var config = {
                    attributes: true,
                    childList: true,
                    characterData: true,
                    characterDataOldValue: true,
                    subtree: true,
                    attributeFilter: []
                };
                observer.observe(target, config);
                currentElement.data("crsa-editor", true).on("keyup.crsaeditor paste.crsaeditor cut.crsaeditor", function (e) {
                }).on("paste cut", function (e) {
                });
                $(getDocument()).on("selectionchange.crsaeditor", function (e) {
                })
            }
            moveTo = top
        } else {
            moveTo = -top
        }
        if ($toolbar && $toolbar.css("top") != moveTo + "px") {
            var tw = $toolbar.width();
            var w = $(window).width();
            $toolbar.css("left", (w - tw) / 2 + "px");
            $toolbar.animate({top: moveTo}, 250, function () {
            })
        }
        getDocument().execCommand("styleWithCSS", false, false);
        $.fn.crsa("refreshSelectElement")
    };
    this.endEdit = function (skip_select) {
        if (!in_edit)return;
        var ce = currentElement;
        in_edit = false;
        if (currentElement) {
            if (copySourceTimer) {
                clearTimeout(copySourceTimer);
                copySourceFromDOMToHtml();
                copySourceTimer = null
            }
            currentElement.removeAttr("contentEditable");
            currentElement.off(".crsaeditor");
            observer.disconnect();
            currentElement = null
        }
        $toolbar.animate({top: -60}, 250, function () {
        });
        if (this.selectedPage) {
        }
        if (!skip_select) {
            $.fn.crsa("refreshSelectElement")
        }
    };
    this.isInEdit = function () {
        return in_edit
    };
    this.showToolbar = function ($dest) {
        $dest.html("");
        var $ul = $dest;
        var cmds = [{icon: "<b>B</b>", cmd: "bold"}, {icon: "<em>It</em>", cmd: "Italic"}, {
            icon: "H1",
            cmd: "formatBlock",
            data: "H1"
        }, {icon: "H2", cmd: "formatBlock", data: "H2"}, {icon: "H3", cmd: "formatBlock", data: "H3"}, {
            icon: "H4",
            cmd: "formatBlock",
            data: "H4"
        }, {icon: "H5", cmd: "formatBlock", data: "H5"}, {icon: "H6", cmd: "formatBlock", data: "H6"}, {
            icon: "P",
            cmd: "insertHTML",
            action: function () {
                var selected = getSelectionHtml();
                var el = getElementUnderCarret();
                if (el && selected) {
                    var t = el.wholeText ? el.wholeText : el.innerHTML;
                    if (selected == t || true) {
                        selected = null
                    }
                }
                if (selected && selected.length > 0) {
                    getDocument().execCommand("insertHTML", false, "<p>" + selected + "</p>")
                } else {
                    if (el) {
                        var $el = $(el);
                        var tags = "li,h1,h2,h3,h4,h5,h6,p";
                        if (el.nodeType == 3)$el = $el.parent();
                        if ($el.is("b,strong,em,sup,sub,a")) {
                            if ($el.parent().is(tags)) {
                                $el = $el.parent();
                                $el.replaceWith($("<p/>").append($el.contents()))
                            } else {
                                var $new = $("<p/>");
                                $el.replaceWith($new);
                                $new.append($el)
                            }
                        } else if ($el.is(tags)) {
                            $el.replaceWith($("<p/>").append($el.contents()))
                        } else {
                            getDocument().execCommand("insertHTML", false, "<p>&nbsp;</p>")
                        }
                    }
                }
            }
        }, {icon: "OL", cmd: "insertOrderedList"}, {icon: "UL", cmd: "insertUnorderedList"}, {
            icon: "LINK",
            cmd: "createLink",
            ask: "Please enter the url:",
            placeholder: "http://"
        }];
        $.each(cmds, function (i, cmd) {
            var $li = $("<button/>", {"class": "btn btn-sm btn-default"}).html('<a href="#">' + cmd.icon + "</a>").appendTo($ul);
            (function (cmd) {
                $li.on("click", function (e) {
                    enableObserver();
                    var data = cmd.data ? cmd.data : null;
                    if (cmd.action) {
                        cmd.action(cmd)
                    } else {
                        if (cmd.ask) {
                            showPrompt("Link address", "Edit link address", null, "http://www.example.com", null, function (data) {
                                getDocument().execCommand(cmd.cmd, false, data)
                            })
                        } else {
                            getDocument().execCommand(cmd.cmd, false, data)
                        }
                    }
                    e.preventDefault()
                })
            })(cmd)
        });
        var $done = $("<button/>", {"class": "btn btn-sm btn-info"}).html("Done").appendTo($ul).on("click", function (e) {
            _this.endEdit();
            e.preventDefault()
        })
    }
};