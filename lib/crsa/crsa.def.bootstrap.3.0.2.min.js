$(function () {
    function e(e) {
        return '<div class="container preview-' + e + '">                <div class="row sel">                    <div class="col-xs-4 sel"><div></div></div>                    <div class="col-xs-4"><div></div></div>                    <div class="col-xs-4"><div></div></div>                </div>                <div class="row">                    <div class="col-xs-4"><div></div></div>                    <div class="col-xs-4"><div></div></div>                    <div class="col-xs-4"><div></div></div>                </div>                </div>'
    }

    var a = function () {
        var e;
        e = isApp() ? crsaGetAppDir() + "placeholders/img" : "http://pinegrow.com/placeholders/img";
        var a = Math.round(8 * Math.random()) + 1;
        return e + a + ".jpg"
    }, t = function (e, a) {
        var t = {};
        $.each(e[0].attributes, function (e, a) {
            t[a.nodeName] = a.nodeValue
        });
        var n;
        return e.replaceWith(function () {
            return n = $("<" + a + "/>", t).append(e.contents())
        }), n
    }, n = function (e) {
        var a = {
            type: "select",
            name: "Text align",
            action: "apply_class",
            show_empty: !0,
            options: [{key: "text-left", name: "Left"}, {key: "text-center", name: "Center"}, {
                key: "text-right",
                name: "Right"
            }]
        }, t = {
            type: "select",
            name: "Emphasis",
            action: "apply_class",
            show_empty: !0,
            options: [{key: "text-muted", name: "Muted"}, {key: "text-primary", name: "Primary"}, {
                key: "text-success",
                name: "Success"
            }, {key: "text-info", name: "Info"}, {key: "text-warning", name: "Warning"}, {
                key: "text-danger",
                name: "Danger"
            }]
        }, n = {type: "checkbox", name: "Lead", action: "apply_class", value: "lead"}, i = {
            name: "CSS Rules",
            fields: {rules: {type: "rules", name: null, action: "rules"}}
        }, l = {
            bstext: {name: "Text", fields: {bstextalign: a, bsemphasis: t, bslead: n}},
            bslayout: {
                name: "Layout",
                fields: {
                    bsfloat: {
                        type: "select",
                        name: "Pull",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "pull-left", name: "Left"}, {key: "pull-right", name: "Right"}]
                    }, clearfix: {type: "checkbox", name: "Clear floats", action: "apply_class", value: "clearfix"}
                }
            },
            bsvisible: {
                name: "Visibility",
                fields: {
                    bsvisibiity: {
                        type: "select",
                        name: "Visibility",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "show", name: "Shown"}, {key: "hidden", name: "Hidden"}, {
                            key: "invisible",
                            name: "Invisible"
                        }]
                    },
                    bsprint: {
                        type: "select",
                        name: "Print",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "visible-print", name: "Visible"}, {key: "hidden-print", name: "Hidden"}]
                    },
                    "sr-only": {type: "checkbox", name: "Scr.rdr only", action: "apply_class", value: "sr-only"},
                    bstexthide: {type: "checkbox", name: "Hide text", action: "apply_class", value: "text-hide"}
                }
            },
            bsresponsive: {
                name: "Responsivness",
                fields: {
                    responsive_control: {
                        type: "custom",
                        name: "layout_control",
                        action: "none",
                        show: function (e, a, t, n, i) {
                            var l = ["xs", "sm", "md", "lg"], r = $("<table/>", {"class": "grid-control resp-control"}).appendTo(e), s = $("<tr/>").html("<td><label>Xs</label></td><td><label>Sm</label></td><td><label>Md</label></td><td><label>Lg</label></td>").appendTo(r);
                            s = $("<tr/>").appendTo(r);
                            for (var c = 0; c < l.length; c++) {
                                $td = $("<td/>").appendTo(s);
                                var d = "responsive-" + l[c];
                                $.fn.crsa("addInputField", $td, a, d, o(l[c]), i)
                            }
                        }
                    }
                }
            },
            responsive_fields: {
                name: "Resposnive fields",
                show: !1,
                fields: {
                    "responsive-xs": o("xs"),
                    "responsive-sm": o("sm"),
                    "responsive-md": o("md"),
                    "responsive-lg": o("lg")
                }
            }
        }, r = {
            rules: i,
            id: {name: "Element", fields: {element_id: {type: "text", name: "Element Id", action: "element_id"}}}
        }, s = {};
        return $.each(e, function (e, a) {
            s[e] = a
        }), $.each(r, function (e, a) {
            s[e] = a
        }), $.each(l, function (e, a) {
            s[e] = a
        }), s
    }, i = function (e, a, t) {
        for (var n = {
            type: "select",
            name: null,
            action: "apply_class",
            show_empty: t,
            options: []
        }, i = 1; 12 >= i; i++)n.options.push({key: a + "-" + i, name: i});
        return n
    }, o = function (e) {
        var a = {
            type: "select",
            name: null,
            action: "apply_class",
            show_empty: !0,
            options: [{key: "visible-" + e, name: "Visible"}, {key: "hidden-" + e, name: "Hidden"}]
        };
        return a
    };
    $.fn.crsa.addDefinition({
        type: "bs-container",
        selector: ".container",
        tags: "major",
        preview: e("container"),
        code: '<div class="container crsa-empty-placeholder"></div>',
        name: "Container",
        empty_placeholder: !0,
        action_menu: {add: ["bs-row"]},
        inline_edit: !0,
        sections: n({})
    }), $.fn.crsa.addDefinition({
        type: "bs-row",
        selector: "div.row",
        tags: "major",
        preview: e("row"),
        parent_selector: ".container",
        code: '<div class="row crsa-empty-placeholder"></div>',
        empty_placeholder: !0,
        name: "Row",
        action_menu: {add: ["bs-column", "thumbnail-img", "thumbnail-content"]},
        sections: n({})
    }), $.fn.crsa.addDefinition({
        type: "bs-clear",
        selector: "div.clear-columns",
        code: '<div class="clearfix clear-columns"></div>',
        name: "Clear columns",
        sections: n({})
    }), $.fn.crsa.addDefinition({
        type: "bs-column",
        tags: "major",
        selector: function (e) {
            if (e.is("div")) {
                var a = e.parent();
                if (a.is(".row,.form-group"))return !0
            }
            if (e.is("label"))return !1;
            var t = e.attr("class");
            return t && t.match(/(\s|^)col\-/i) ? !0 : !1
        },
        preview: e("column"),
        parent_selector: ".row",
        code: '<div class="col-md-4"><h3>Column title</h3>            <p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>            </div>',
        empty_placeholder: !0,
        name: "Column",
        inline_edit: !0,
        sections: n({
            layout: {
                name: "Layout",
                fields: {
                    layout_control: {
                        type: "custom",
                        name: "layout_control",
                        action: "none",
                        show: function (e, a, t, n, o) {
                            for (var l = ["xs", "sm", "md", "lg"], r = ["", "-offset", "-push", "-pull"], s = ["Span&nbsp;", "Offs&nbsp;", "Push&nbsp;", "Pull&nbsp;"], c = ["span_", "offset_", "push_", "pull_"], d = $("<table/>", {"class": "grid-control columns-control"}).appendTo(e), p = $("<tr/>").html("<td></td><td><label>Xs</label></td><td><label>Sm</label></td><td><label>Md</label></td><td><label>Lg</label></td>").appendTo(d), m = 0; m < r.length; m++) {
                                p = $("<tr/>").appendTo(d);
                                for (var u = $("<td/>").html("<label>" + s[m] + "</label>").appendTo(p), f = 0; f < l.length; f++) {
                                    u = $("<td/>").appendTo(p);
                                    var h = c[m] + l[f];
                                    $.fn.crsa("addInputField", u, a, h, i(s[m], "col-" + l[f] + r[m], !0), o)
                                }
                            }
                        }
                    }
                }
            },
            layout_phone: {
                name: "Phone",
                show: !1,
                fields: {
                    span_xs: i("Span", "col-xs", !0),
                    offset_xs: i("Offs", "col-xs-offset", !0),
                    push_xs: i("Push", "col-xs-push", !0),
                    pull_xs: i("Pull", "col-xs-pull", !0),
                    span_sm: i("Span", "col-sm", !0),
                    offset_sm: i("Offs", "col-sm-offset", !0),
                    push_sm: i("Push", "col-sm-push", !0),
                    pull_sm: i("Pull", "col-sm-pull", !0),
                    span_md: i("Span", "col-md", !0),
                    offset_md: i("Offs", "col-md-offset", !0),
                    push_md: i("Push", "col-md-push", !0),
                    pull_md: i("Pull", "col-md-pull", !0),
                    span_lg: i("Span", "col-lg", !0),
                    offset_lg: i("Offs", "col-lg-offset", !0),
                    push_lg: i("Push", "col-lg-push", !0),
                    pull_lg: i("Pull", "col-lg-pull", !0)
                }
            }
        })
    });
    var l = [{key: "h1", name: "Heading 1"}, {key: "h2", name: "Heading 2"}, {key: "h3", name: "Heading 3"}, {
        key: "h4",
        name: "Heading 4"
    }, {key: "h5", name: "Heading 5"}, {key: "h6", name: "Heading 6"}], r = ["h1", "h2", "h3", "h4", "h5", "h6"];
    $.each(r, function (e, a) {
        var i = {
            type: a,
            selector: a,
            code: "<" + a + ">Heading " + (e + 1) + "</" + a + ">",
            name: a,
            action_menu: {add: ["small"]},
            sections: n({
                style: {
                    name: "Heading",
                    fields: {
                        description: {
                            type: "select",
                            name: "Level",
                            action: "custom",
                            show_empty: !1,
                            options: l,
                            get_value: function (e) {
                                for (var a = e.data, t = 0; t < l.length; t++)if (a.is(l[t].key))return l[t].key;
                                return null
                            },
                            set_value: function (e, a) {
                                crsaWillChangeDom();
                                var n = e.data, i = n.parent(), o = t(n, a);
                                return $.fn.crsa("setNeedsUpdate", !1, i), $.fn.crsa("setSelectElementOnUpdate", o), a
                            }
                        }
                    }
                }
            })
        };
        $.fn.crsa.addDefinition(i)
    });
    var s = {
        type: "small",
        selector: "small",
        code: "<small>Secondary text</small>",
        preview: "<h1><small>Secondary text</small></h1>",
        name: "Secondary text",
        sections: n({})
    };
    $.fn.crsa.addDefinition(s);
    var c = {type: "p", selector: "p", code: "<p>Paragraph</p>", name: "p", sections: n({})};
    $.fn.crsa.addDefinition(c);
    var d = {
        type: "abbr",
        selector: "abbr",
        code: '<abbr title="Description">term</abbr>',
        name: "Abbreviation",
        sections: n({
            style: {
                name: "Abbreviation",
                fields: {
                    description: {
                        type: "text",
                        name: "Description",
                        action: "element_attribute",
                        attribute: "title"
                    }, initialism: {type: "checkbox", name: "All caps", action: "apply_class", value: "initialism"}
                }
            }
        })
    };
    $.fn.crsa.addDefinition(d);
    var p = {
        type: "address",
        selector: "address",
        code: '<address>            <strong>Twitter, Inc.</strong><br/>    795 Folsom Ave, Suite 600<br/>        San Francisco, CA 94107<br/>                <abbr title="Phone">P:</abbr> (123) 456-7890<br/>                <br/>                <strong>Full Name</strong><br>                <a href="mailto:#">first.last@example.com</a>            </address>',
        name: "Address",
        sections: n({})
    };
    $.fn.crsa.addDefinition(p);
    var m = function (e, a, t, n) {
        crsaWillChangeDom();
        var i = e.data, o = t.source, l = i.find("small");
        if (a && 0 != a.length) {
            o = o && o.length > 0 ? '<cite title="' + o + '">' + o + "</cite>" : "", (!n || 0 == n.length) && o && o.length > 0 && (a += " @SOURCE");
            var r = a.replace(/@source/i, o);
            0 == l.length && (l = $("<small/>").appendTo(i)), l.html(r)
        } else l.remove();
        return a
    }, u = {
        type: "blockquote",
        selector: "blockquote",
        tags: "major",
        code: '<blockquote>            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>        <small>Someone famous in <cite title="Source Title">Source Title</cite></small>    </blockquote>',
        name: "Blockquote",
        sections: n({
            data: {
                name: "Info",
                fields: {
                    citation: {
                        type: "text",
                        name: "Citation",
                        action: "custom",
                        live_update: !1,
                        get_value: function (e) {
                            var a = e.data, t = a.find("small");
                            if (0 == t.length)return null;
                            var n = t.html();
                            return n = n.replace(/<cite.*<\/cite>/i, "@SOURCE")
                        },
                        set_value: m
                    }, source: {
                        type: "text", name: "Source", action: "custom", live_update: !1, get_value: function (e) {
                            var a = e.data, t = a.find("cite");
                            return 0 == t.length ? null : t.text()
                        }, set_value: function (e, a, t) {
                            var n = (e.data, t.citation);
                            return a && a.length > 0 && (n ? n.match(/@source/i) || (n += " @SOURCE") : n = "@SOURCE"), setTimeout(function () {
                                $.fn.crsa("setSelectedElementProperty", "citation", n)
                            }, 100), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(u), $.fn.crsa.addDefinition({
        type: "hr",
        selector: "hr",
        code: "<hr/>",
        name: "hr",
        sections: n({})
    });
    for (var f = ["glyphicon-adjust", "glyphicon-align-center", "glyphicon-align-justify", "glyphicon-align-left", "glyphicon-align-right", "glyphicon-arrow-down", "glyphicon-arrow-left", "glyphicon-arrow-right", "glyphicon-arrow-up", "glyphicon-asterisk", "glyphicon-backward", "glyphicon-ban-circle", "glyphicon-barcode", "glyphicon-bell", "glyphicon-bold", "glyphicon-book", "glyphicon-bookmark", "glyphicon-briefcase", "glyphicon-bullhorn", "glyphicon-calendar", "glyphicon-camera", "glyphicon-certificate", "glyphicon-check", "glyphicon-chevron-down", "glyphicon-chevron-left", "glyphicon-chevron-right", "glyphicon-chevron-up", "glyphicon-circle-arrow-down", "glyphicon-circle-arrow-left", "glyphicon-circle-arrow-right", "glyphicon-circle-arrow-up", "glyphicon-cloud", "glyphicon-cloud-download", "glyphicon-cloud-upload", "glyphicon-cog", "glyphicon-collapse-down", "glyphicon-collapse-up", "glyphicon-comment", "glyphicon-compressed", "glyphicon-copyright-mark", "glyphicon-credit-card", "glyphicon-cutlery", "glyphicon-dashboard", "glyphicon-download", "glyphicon-download-alt", "glyphicon-earphone", "glyphicon-edit", "glyphicon-eject", "glyphicon-envelope", "glyphicon-euro", "glyphicon-exclamation-sign", "glyphicon-expand", "glyphicon-export", "glyphicon-eye-close", "glyphicon-eye-open", "glyphicon-facetime-video", "glyphicon-fast-backward", "glyphicon-fast-forward", "glyphicon-file", "glyphicon-film", "glyphicon-filter", "glyphicon-fire", "glyphicon-flag", "glyphicon-flash", "glyphicon-floppy-disk", "glyphicon-floppy-open", "glyphicon-floppy-remove", "glyphicon-floppy-save", "glyphicon-floppy-saved", "glyphicon-folder-close", "glyphicon-folder-open", "glyphicon-font", "glyphicon-forward", "glyphicon-fullscreen", "glyphicon-gbp", "glyphicon-gift", "glyphicon-glass", "glyphicon-globe", "glyphicon-hand-down", "glyphicon-hand-left", "glyphicon-hand-right", "glyphicon-hand-up", "glyphicon-hd-video", "glyphicon-hdd", "glyphicon-header", "glyphicon-headphones", "glyphicon-heart", "glyphicon-heart-empty", "glyphicon-home", "glyphicon-import", "glyphicon-inbox", "glyphicon-indent-left", "glyphicon-indent-right", "glyphicon-info-sign", "glyphicon-italic", "glyphicon-leaf", "glyphicon-link", "glyphicon-list", "glyphicon-list-alt", "glyphicon-lock", "glyphicon-log-in", "glyphicon-log-out", "glyphicon-magnet", "glyphicon-map-marker", "glyphicon-minus", "glyphicon-minus-sign", "glyphicon-move", "glyphicon-music", "glyphicon-new-window", "glyphicon-off", "glyphicon-ok", "glyphicon-ok-circle", "glyphicon-ok-sign", "glyphicon-open", "glyphicon-paperclip", "glyphicon-pause", "glyphicon-pencil", "glyphicon-phone", "glyphicon-phone-alt", "glyphicon-picture", "glyphicon-plane", "glyphicon-play", "glyphicon-play-circle", "glyphicon-plus", "glyphicon-plus-sign", "glyphicon-print", "glyphicon-pushpin", "glyphicon-qrcode", "glyphicon-question-sign", "glyphicon-random", "glyphicon-record", "glyphicon-refresh", "glyphicon-registration-mark", "glyphicon-remove", "glyphicon-remove-circle", "glyphicon-remove-sign", "glyphicon-repeat", "glyphicon-resize-full", "glyphicon-resize-horizontal", "glyphicon-resize-small", "glyphicon-resize-vertical", "glyphicon-retweet", "glyphicon-road", "glyphicon-save", "glyphicon-saved", "glyphicon-screenshot", "glyphicon-sd-video", "glyphicon-search", "glyphicon-send", "glyphicon-share", "glyphicon-share-alt", "glyphicon-shopping-cart", "glyphicon-signal", "glyphicon-sort", "glyphicon-sort-by-alphabet", "glyphicon-sort-by-alphabet-alt", "glyphicon-sort-by-attributes", "glyphicon-sort-by-attributes-alt", "glyphicon-sort-by-order", "glyphicon-sort-by-order-alt", "glyphicon-sound-5-1", "glyphicon-sound-6-1", "glyphicon-sound-7-1", "glyphicon-sound-dolby", "glyphicon-sound-stereo", "glyphicon-star", "glyphicon-star-empty", "glyphicon-stats", "glyphicon-step-backward", "glyphicon-step-forward", "glyphicon-stop", "glyphicon-subtitles", "glyphicon-tag", "glyphicon-tags", "glyphicon-tasks", "glyphicon-text-height", "glyphicon-text-width", "glyphicon-th", "glyphicon-th-large", "glyphicon-th-list", "glyphicon-thumbs-down", "glyphicon-thumbs-up", "glyphicon-time", "glyphicon-tint", "glyphicon-tower", "glyphicon-transfer", "glyphicon-trash", "glyphicon-tree-conifer", "glyphicon-tree-deciduous", "glyphicon-unchecked", "glyphicon-upload", "glyphicon-usd", "glyphicon-user", "glyphicon-volume-down", "glyphicon-volume-off", "glyphicon-volume-up", "glyphicon-warning-sign", "glyphicon-wrench", "glyphicon-zoom-in", "glyphicon-zoom-out"], h = [], y = 0; y < f.length; y++) {
        var g = f[y];
        h.push({key: g, name: g.replace("glyphicon-", ""), html: '<span class="glyphicon ' + g + '"></span>'})
    }
    var b = {
        type: "glyphicon",
        selector: "span.glyphicon",
        code: '<span class="glyphicon glyphicon-star"></span>',
        name: "Glyphicon",
        sections: n({
            data: {
                name: "Icon",
                fields: {
                    icon: {
                        type: "select",
                        name: "Icon",
                        options: h,
                        rich: {title: "Select icon", modal: !0, "class": "icon-grid"},
                        action: "custom",
                        get_value: function (e) {
                            var a = e.data, t = a.attr("class"), n = t.match(/glyphicon-[a-z\-]*/i);
                            return n
                        },
                        set_value: function (e, a) {
                            var t = e.data, n = t.attr("class"), i = n.match(/glyphicon-[a-z\-]*/i);
                            return i && t.removeClass(i[0]), t.addClass(a), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(b);
    var v = {
        type: "description",
        selector: "dl",
        code: "<dl>            <dt>Description lists</dt>        <dd>A description list is perfect for defining terms.</dd>        <dt>Euismod</dt>        <dd>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.</dd>    </dl>",
        name: "Description list",
        tags: "major",
        action_menu: {add: ["description-term", "description-def"]},
        sections: n({
            style: {
                name: "Style",
                fields: {
                    horizontal: {
                        type: "checkbox",
                        name: "Horizontal",
                        action: "apply_class",
                        value: "dl-horizontal"
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(v);
    var k = {
        type: "description-term",
        selector: "dt",
        parent_selector: "dl",
        code: "<dt>Term</dt>",
        name: "Description term",
        sections: n({})
    };
    $.fn.crsa.addDefinition(k);
    var _ = {
        type: "description-def",
        selector: "dd",
        parent_selector: "dl",
        code: "<dd>Term definition.</dd>",
        name: "Description definition",
        sections: n({})
    };
    $.fn.crsa.addDefinition(_);
    var x = {type: "code", selector: "code", code: "<code>&lt;section&gt;</code>", name: "Code", sections: n({})};
    $.fn.crsa.addDefinition(x);
    var w = {
        type: "code-block",
        selector: "pre",
        code: "<pre>&lt;p&gt;Sample text here...&lt;/p&gt;</pre>",
        name: "Code block",
        sections: n({
            style: {
                name: "Style",
                fields: {scroll: {type: "checkbox", name: "Scrollable", action: "apply_class", value: "pre-scrollable"}}
            }
        })
    };
    $.fn.crsa.addDefinition(w);
    var D = function (e) {
        var a = !0;
        return e.find(">td").each(function (e, t) {
            return $.trim(t.innerHTML).length > 0 ? (a = !1, !1) : void 0
        }), a
    }, C = function (e) {
        var a = 0;
        return e.find(">tr").each(function (e, t) {
            D($(t)) && a++
        }), a
    }, S = function (e) {
        return '<table class="table preview-' + e + '">            <thead>            <tr>                <th>#</th>                <th>First Name</th>                <th>Last Name</th>                <th>Username</th>            </tr>            </thead>        <tbody>            <tr class="sel">                <td>1</td>                <td class="sel">Mark</td>                <td>Otto</td>                <td>@mdo</td>            </tr>            <tr>                <td>2</td>                <td>Jacob</td>                <td>Thornton</td>                <td>@fat</td>            </tr>            <tr>                <td>3</td>                <td>Larry</td>                <td>the Bird</td>                <td>@twitter</td>            </tr>        </tbody>    </table>'
    }, T = {
        type: "table",
        selector: "table",
        tags: "major",
        code: '<table class="table">            <thead>            <tr>                <th>#</th>                <th>First Name</th>                <th>Last Name</th>                <th>Username</th>            </tr>            </thead>        <tbody>            <tr>                <td>1</td>                <td>Mark</td>                <td>Otto</td>                <td>@mdo</td>            </tr>            <tr>                <td>2</td>                <td>Jacob</td>                <td>Thornton</td>                <td>@fat</td>            </tr>            <tr>                <td>3</td>                <td>Larry</td>                <td>the Bird</td>                <td>@twitter</td>            </tr>        </tbody>    </table>',
        preview: S("table"),
        name: "Table",
        sections: n({
            data: {
                name: "Info",
                fields: {
                    rows: {
                        type: "text", name: "Rows", action: "custom", get_value: function (e) {
                            var a = e.data, t = a.find(">tbody"), n = t.find(">tr");
                            return n.length
                        }, set_value: function (e, a, t, n, i) {
                            crsaWillChangeDom(), a = parseInt(a) || 0;
                            var o = e.data, l = o.find(">tbody");
                            0 == l.length && (l = $("<tbody/>").appendTo(o));
                            var r = l.find(">tr"), s = t.columns, c = !1, d = (C(l), a);
                            if (r.length < a) {
                                for (var p = 0; p < a - r.length; p++)for (var m = $("<tr/>").appendTo(l), u = 0; s > u; u++)$("<td/>").appendTo(m);
                                c = !0
                            } else if (r.length > a) {
                                var f = r.length - a;
                                r.each(function (e, a) {
                                    var t = $(a);
                                    return D(t) && (t.remove(), f--, 0 == f) ? !1 : void 0
                                }), d = a + f
                            }
                            return "change" == i && ($.fn.crsa("setNeedsUpdate", !1, o), a = d), a
                        }
                    }, columns: {
                        type: "text", name: "Columns", action: "custom", get_value: function (e) {
                            var a = e.data, t = a.find(">tbody"), n = t.find(">tr"), i = 0;
                            return n.each(function (e, a) {
                                var t = $(a).find(">td").length;
                                t > i && (i = t)
                            }), a.find(">thead >tr").each(function (e, a) {
                                var t = $(a).find(">th").length;
                                t > i && (i = t)
                            }), i
                        }, set_value: function (e, a, t, n, i) {
                            crsaWillChangeDom(), a = parseInt(a) || 0;
                            var o = e.data, l = o.find(">tbody,>thead"), r = l.find(">tr"), s = a;
                            if (a) {
                                var c = 0;
                                r.each(function (e, t) {
                                    var n = $(t).find(">td,>th");
                                    if (n.length > a) {
                                        var i = n.length - a;
                                        n.each(function (e, a) {
                                            var t = $(a);
                                            return "" == $.trim(a.innerHTML) && (t.remove(), i--, 0 == i) ? !1 : void 0
                                        })
                                    } else if (n.length < a)for (var o = n.length; a > o; o++) {
                                        var l = $(t).parent().is("thead") ? "th" : "td";
                                        $("<" + l + "/>").appendTo($(t))
                                    }
                                    var r = $(t).find(">td,>th");
                                    r > c && (c = r)
                                }), s = c
                            }
                            return "change" == i && ($.fn.crsa("setNeedsUpdate", !1, o), a = s), a
                        }
                    }
                }
            },
            style: {
                name: "Style",
                fields: {
                    striped: {type: "checkbox", name: "Striped", action: "apply_class", value: "table-striped"},
                    bordered: {type: "checkbox", name: "Bordered", action: "apply_class", value: "table-bordered"},
                    "hover-rows": {type: "checkbox", name: "Hover rows", action: "apply_class", value: "table-hover"},
                    condensed: {type: "checkbox", name: "Condensed", action: "apply_class", value: "table-condensed"},
                    responsive: {
                        type: "checkbox",
                        name: "Responsive",
                        action: "custom",
                        value: "1",
                        get_value: function (e) {
                            var a = e.data;
                            return a.parent().is("div.table-responsive") ? "1" : null
                        },
                        set_value: function (e, a) {
                            crsaWillChangeDom();
                            var t = e.data, n = t.parent();
                            if (a) {
                                if (!n.is("div.table-responsive")) {
                                    var i = $("<div/>", {"class": "table-responsive"});
                                    t.replaceWith(i), i.append(t)
                                }
                            } else n.is("div.table-responsive") && (n.children().length > 1 ? n.removeClass("table-responsive") : (t.detach(), n.replaceWith(t)));
                            $.fn.crsa("setNeedsUpdate", !1, t)
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(T);
    var L = {
        type: "thead",
        selector: "thead",
        parent_selector: "table",
        code: "<thead><tr><td></td></tr></thead>",
        preview: S("thead"),
        name: "Table heading",
        sections: n({})
    };
    $.fn.crsa.addDefinition(L);
    var I = {
        type: "tbody",
        selector: "tbody",
        parent_selector: "table",
        code: "<tbody><tr><td></td></tr></tbody>",
        preview: S("tbody"),
        name: "Table body",
        sections: n({})
    };
    $.fn.crsa.addDefinition(I);
    var P = {
        type: "select",
        name: "Context",
        action: "apply_class",
        show_empty: !0,
        options: [{key: "active", name: "Active"}, {key: "success", name: "Success"}, {
            key: "warning",
            name: "Warning"
        }, {key: "danger", name: "Danger"}]
    }, z = {
        type: "tr",
        selector: "tr",
        parent_selector: "table,tbody,thead,tfooter",
        code: "<tr><td></td></tr>",
        preview: S("tr"),
        name: "Table row",
        sections: n({style: {name: "Style", fields: {context: P}}})
    };
    $.fn.crsa.addDefinition(z);
    var j = {
        type: "td",
        selector: "td",
        parent_selector: "tr",
        code: "<td></td>",
        preview: S("td"),
        name: "Table cell",
        sections: n({style: {name: "Style", fields: {context: P}}})
    };
    $.fn.crsa.addDefinition(j);
    for (var N = function (e, a) {
        var t = e.is(".form-horizontal"), n = e.find(">div,>button,>fieldset>div,>fieldset>button"), i = a["horizontal-col1"] || 2, o = a["horizontal-col2"] || 10;
        e.find("label").addClass("control-label"), n.each(function (e, a) {
            var n = $(a);
            if (!n.is(".form-group") && t) {
                var l = $("<div/>", {"class": "form-group"});
                n.replaceWith(l), l.append(n), n = l
            }
            var r = n.children();
            if (r.length >= 2) {
                var s = $(r.get(0)), c = $(r.get(1)), d = s.attr("class");
                d && s.attr("class", d.replace(/col-[a-z][a-z]-[0-9]*/gi, "")), d = c.attr("class");
                var p = d && null != d.match(/col-[a-z][a-z]-[0-9]*/gi);
                if (d && p && c.attr("class", d.replace(/col-[a-z][a-z]-[0-9]*/gi, "")), t) {
                    if (s.addClass("col-sm-" + i), !c.is("div") || !p) {
                        var l = $("<div/>");
                        c.replaceWith(l), l.append(c), c = l
                    }
                    if (c.addClass("col-sm-" + o), r.length > 2)for (var m = 2; m < r.length; m++)$(r.get(m)).appendTo(c)
                }
            } else if (1 == r.length) {
                var c = $(r.get(0));
                d = c.attr("class");
                var p = d && null != d.match(/col-[a-z][a-z]-[a-z\-0-9]*/gi);
                if (d && p && c.attr("class", d.replace(/col-[a-z][a-z]-[a-z\-0-9]*/gi, "")), t) {
                    if (!c.is("div") || !p) {
                        var l = $("<div/>");
                        c.replaceWith(l), l.append(c), c = l
                    }
                    c.addClass("col-sm-offset-" + i).addClass("col-sm-" + o)
                }
            }
        }), e.is(".form-inline, .navbar-form") ? (e.find("label").addClass("sr-only"), e.find("div.checkbox > label").removeClass("sr-only")) : e.find("label").removeClass("sr-only")
    }, B = [], R = 1; 12 >= R; R++)B.push({key: R, name: R});
    var A = {
        type: "form",
        tags: "major",
        selector: "form",
        code: '<form role="form">            <div class="form-group">        <label class="control-label" for="exampleInputEmail1">Email address</label>        <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Enter email">        </div>            <div class="form-group">                <label class="control-label" for="exampleInputPassword1">Password</label>                <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">                </div>                <div class="form-group">                    <label class="control-label" for="exampleInputFile">File input</label>                    <input type="file" id="exampleInputFile">                        <p class="help-block">Example block-level help text here.</p>                    </div>                    <div class="checkbox">                        <label class="control-label" >                            <input type="checkbox"> Check me out                            </label>                        </div>                        <button type="submit" class="btn">Submit</button>                    </form>',
        name: "Form",
        action_menu: {
            add: ["form-group", "form-textarea-group", "form-select-group", "form-checkbox-group", "form-radio-group", "form-static-group", "form-fieldset"],
            on_add: function (e, a) {
                var t = $.fn.crsa("getValuesForElement", e);
                e.append(a), N(e, t)
            }
        },
        sections: n({
            layout: {
                name: "Style",
                fields: {
                    layout: {
                        type: "select",
                        name: "Layout",
                        action: "custom",
                        options: [{key: "form-normal", name: "Normal"}, {
                            key: "form-inline",
                            name: "Inline"
                        }, {key: "form-horizontal", name: "Horizontal"}, {key: "navbar-form", name: "Navbar"}],
                        get_value: function (e) {
                            var a = e.data;
                            return a.is(".form-horizontal") ? "form-horizontal" : a.is(".form-inline") ? "form-inline" : a.is(".navbar-form") ? "navbar-form" : "form-normal"
                        },
                        set_value: function (e, a, t) {
                            crsaWillChangeDom();
                            var n = e.data;
                            n.removeClass("form-horizontal").removeClass("form-inline").removeClass("form-normal").removeClass("navbar-form"), n.addClass(a), N(n, t), $.fn.crsa("setNeedsUpdate", !1, n)
                        }
                    }
                }
            },
            horizontal: {
                name: "Horizontal",
                fields: {
                    "horizontal-col1": {
                        type: "select",
                        name: "Label span",
                        options: B,
                        show_empty: !0,
                        action: "custom",
                        get_value: function (e) {
                            var a = e.data, t = null;
                            return a.find("label").each(function (e, a) {
                                var n = $(a), i = n.attr("class");
                                if (i) {
                                    var o = i.match(/col-[a-z][a-z]-([0-9]*)/i);
                                    if (o)return t = parseInt(o[1]), !1
                                }
                            }), null === t && a.find("div").each(function (e, a) {
                                var n = $(a), i = n.attr("class");
                                if (i) {
                                    var o = i.match(/col-[a-z][a-z]-offset-([0-9]*)/i);
                                    if (o)return t = parseInt(o[1]), !1
                                }
                            }), null === t && (t = a.data("crsa-form-col1")), t
                        },
                        set_value: function (e, a, t) {
                            crsaWillChangeDom();
                            var n = e.data;
                            return setTimeout(function () {
                                N(n, t), $.fn.crsa("setNeedsUpdate", !0, n)
                            }, 100), n.data("crsa-form-col1", a), a
                        }
                    },
                    "horizontal-col2": {
                        type: "select",
                        name: "Field span",
                        options: B,
                        show_empty: !0,
                        action: "custom",
                        get_value: function (e) {
                            var a = e.data, t = null;
                            return a.find("input,textarea,div.checkbox,button").parent().each(function (e, a) {
                                var n = $(a), i = n.attr("class");
                                if (i) {
                                    var o = i.match(/col-[a-z][a-z]-([0-9]*)/i);
                                    if (o)return t = parseInt(o[1]), !1
                                }
                            }), null === t && (t = a.data("crsa-form-col2")), t
                        },
                        set_value: function (e, a, t) {
                            crsaWillChangeDom();
                            var n = e.data;
                            return setTimeout(function () {
                                N(n, t), $.fn.crsa("setNeedsUpdate", !0, n)
                            }, 100), n.data("crsa-form-col2", a), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(A);
    var E = {
        type: "form-group",
        selector: function (e) {
            return e.is("div.form-group") ? !0 : !1
        },
        parent_selector: "form,fieldset,div",
        code: function (e) {
            for (var a = 1, t = $(e.body); t.find("#formInput" + a).length > 0;)a++;
            var n = "formInput" + a;
            return '<div class="form-group">            <label class="control-label" for="' + n + '">Field label</label>    <input type="text" class="form-control" id="' + n + '" placeholder="Placeholder text">    </div>'
        },
        name: "Input group",
        action_menu: {
            add: ["form-static", "form-input", "textarea", "form-checkbox", "form-radio", "label", "form-help", "form-select"],
            on_add: function (e, a) {
                e.append(a)
            }
        },
        sections: n({
            data: {
                name: "Data",
                fields: {
                    validation: {
                        type: "select",
                        name: "Validation state",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "has-success", name: "Success"}, {
                            key: "has-warning",
                            name: "Warning"
                        }, {key: "has-error", name: "Error"}]
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(E);
    var W = {
        type: "form-textarea-group", selector: null, parent_selector: "form,fieldset,div", code: function (e) {
            for (var a = 1, t = $(e.body); t.find("#formInput" + a).length > 0;)a++;
            var n = "formInput" + a;
            return '<div class="form-group">            <label class="control-label" for="' + n + '">Field label</label>            <textarea class="form-control" rows="3" id="' + n + '"></textarea>    </div>'
        }, name: "Textarea group", sections: n({})
    };
    $.fn.crsa.addDefinition(W);
    var U = {
        type: "checkbox",
        action: "element_attribute",
        attribute: "disabled",
        name: "Disabled",
        value: "disabled"
    }, F = {
        type: "select",
        name: "Size",
        action: "apply_class",
        show_empty: !0,
        options: [{key: "input-sm", name: "Small"}, {key: "", name: "Default"}, {key: "input-lg", name: "Large"}]
    }, O = {
        type: "form-input",
        selector: function (e) {
            return e.is("input") && "checkbox" != e.attr("type") ? !0 : !1
        },
        code: '<input type="text" class="form-control" placeholder="Placeholder text">',
        name: "Input",
        sections: n({
            data: {
                name: "Data",
                fields: {
                    type: {
                        type: "select",
                        name: "Type",
                        action: "custom",
                        options: [{key: "text", name: "Text"}, {key: "password", name: "Password"}, {
                            key: "number",
                            name: "Number"
                        }, {key: "email", name: "Email"}, {key: "file", name: "File"}, {
                            key: "url",
                            name: "Url"
                        }, {key: "search", name: "Search"}, {key: "tel", name: "Tel"}, {
                            key: "color",
                            name: "Color"
                        }, {key: "datetime", name: "Datetime"}, {
                            key: "datetime-local",
                            name: "Datetime local"
                        }, {key: "date", name: "Date"}, {key: "month", name: "Month"}, {
                            key: "time",
                            name: "Time"
                        }, {key: "week", name: "Week"}],
                        get_value: function (e) {
                            var a = e.data, t = a;
                            return t.attr("type")
                        },
                        set_value: function (e, a) {
                            var t = e.data, n = t;
                            return n.attr("type", a), a
                        }
                    },
                    placeholder: {
                        type: "text",
                        name: "Placeholder",
                        action: "element_attribute",
                        attribute: "placeholder"
                    },
                    "control-size": F,
                    disabled: U
                }
            }
        })
    };
    $.fn.crsa.addDefinition(O);
    var M = {
        type: "textarea",
        selector: "textarea",
        code: '<textarea class="form-control" rows="3"></textarea>',
        name: "Textarea",
        sections: n({
            style: {
                name: "Style",
                fields: {
                    rows: {type: "text", name: "Rows", action: "element_attribute", attribute: "rows"},
                    "control-size": F,
                    disabled: U
                }
            }
        })
    };
    $.fn.crsa.addDefinition(M);
    var V = {
        type: "form-checkbox-group",
        selector: function (e) {
            return e.is("div.checkbox") || e.children("label.checkbox").length > 0 ? !0 : !1
        },
        parent_selector: "form,fieldset,div",
        code: '<div class="checkbox">            <label class="control-label">            <input type="checkbox" value="">            Option one is this and that&mdash;be sure to include why it\'s great            </label>            </div>',
        name: "Checkbox group",
        action_menu: {add: ["form-checkbox", "label", "form-help"]},
        sections: n({
            style: {
                name: "Style",
                fields: {
                    rows: {
                        type: "checkbox",
                        name: "Inline",
                        action: "custom",
                        value: "1",
                        get_value: function (e) {
                            var a = e.data, t = a.find(">label");
                            return t.hasClass("checkbox-inline") ? "1" : null
                        },
                        set_value: function (e, a) {
                            var t = e.data, n = t.find(">label");
                            return a ? (n.addClass("checkbox-inline"), t.removeClass("checkbox")) : (n.removeClass("checkbox-inline"), t.addClass("checkbox")), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(V);
    var H = {
        type: "form-checkbox",
        selector: function (e) {
            return e.is("label") && e.find('>input[type="checkbox"]').length > 0 ? !0 : !1
        },
        code: '<label>            <input class="control-label" type="checkbox" value="">            Checkbox label            </label>',
        name: "Checkbox",
        sections: n({
            style: {
                name: "Style",
                fields: {
                    disabled: {
                        type: "checkbox",
                        name: "Disabled",
                        action: "custom",
                        value: "1",
                        get_value: function (e) {
                            var a = e.data, t = a.find('input[type="checkbox"]');
                            return t.attr("disabled") ? "1" : null
                        },
                        set_value: function (e, a) {
                            var t = e.data, n = t.find('input[type="checkbox"]');
                            return n.attr("disabled", a), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(H);
    var q = {
        type: "form-radio-group",
        selector: function (e) {
            return e.is("div.radio") || e.children("label.radio").length > 0 ? !0 : !1
        },
        parent_selector: "form,fieldset,div",
        code: '<div class="radio">            <label class="control-label">            <input type="radio" name="group" value="option1" checked>            Option one            </label>            </div>',
        name: "Radio group",
        action_menu: {add: ["form-radio", "label", "form-help"]},
        sections: n({
            style: {
                name: "Style",
                fields: {
                    group: {
                        type: "text", name: "name", action: "custom", get_value: function (e) {
                            var a = e.data, t = a.find('input[type="radio"]');
                            return t.attr("name")
                        }, set_value: function (e, a) {
                            var t = e.data, n = t.find('input[type="radio"]');
                            return n.attr("name", a), a
                        }
                    }, rows: {
                        type: "checkbox", name: "Inline", action: "custom", value: "1", get_value: function (e) {
                            var a = e.data, t = a.find(">label");
                            return t.hasClass("radio-inline") ? "1" : null
                        }, set_value: function (e, a) {
                            var t = e.data, n = t.find(">label");
                            return a ? (n.addClass("radio-inline"), t.removeClass("radio")) : (n.removeClass("radio-inline"), t.addClass("radio")), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(q);
    var J = {
        type: "form-radio",
        selector: function (e) {
            return e.is("label") && e.find('>input[type="radio"]').length > 0 ? !0 : !1
        },
        code: '<label class="control-label">            <input type="radio" name="group" value="option1" checked>            Option one            </label>',
        name: "Radio",
        sections: n({
            style: {
                name: "Style",
                fields: {
                    disabled: {
                        type: "checkbox",
                        name: "Disabled",
                        action: "custom",
                        value: "1",
                        get_value: function (e) {
                            var a = e.data, t = a.find('input[type="radio"]');
                            return t.attr("disabled") ? "1" : null
                        },
                        set_value: function (e, a) {
                            var t = e.data, n = t.find('input[type="radio"]');
                            return n.attr("disabled", a), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(J);
    var G = {
        type: "form-select-group", selector: function () {
            return !1
        }, parent_selector: "form,fieldset,div", code: function (e) {
            for (var a = 1, t = $(e.body); t.find("#formInput" + a).length > 0;)a++;
            var n = "formInput" + a;
            return '<div class="form-group">            <label class="control-label" for="' + n + '">Field label</label>            <select id="' + n + '" class="form-control">                <option>1</option>                <option>2</option>                <option>3</option>            </select>    </div>'
        }, name: "Select group", action_menu: {add: ["form-select", "label", "form-help"]}, sections: n({})
    };
    $.fn.crsa.addDefinition(G);
    var X = {
        type: "form-select",
        selector: "select",
        code: '<select class="form-control">                <option>1</option>                <option>2</option>                <option>3</option>            </select>',
        name: "Select",
        action_menu: {add: ["form-option"]},
        sections: n({
            style: {
                name: "Style",
                fields: {
                    multiple: {
                        type: "checkbox",
                        name: "Multiple",
                        action: "element_attribute",
                        attribute: "multiple",
                        value: "multiple",
                        attribute_without_value: !0
                    }, "control-size": F, disabled: U
                }
            }
        })
    };
    $.fn.crsa.addDefinition(X);
    var Y = {
        type: "form-option",
        selector: "option",
        code: '<option value="value">Name</option>',
        preview: "none",
        name: "Select option",
        sections: n({
            data: {
                name: "Data",
                fields: {
                    value: {type: "text", name: "Value", action: "element_attribute", attribute: "value"},
                    name: {type: "text", name: "Name", action: "element_html"}
                }
            }
        })
    };
    $.fn.crsa.addDefinition(Y);
    var K = {
        type: "form-static-group",
        selector: null,
        parent_selector: "form,fieldset,div",
        code: '<div class="form-group">            <label class="control-label">Email</label>            <p class="form-control-static">email@example.com</p>        </div>',
        name: "Static group",
        sections: n({})
    };
    $.fn.crsa.addDefinition(K);
    var Q = {
        type: "form-static",
        selector: "p.form-control-static",
        code: '<p class="form-control-static">email@example.com</p>',
        name: "Static field",
        sections: n({})
    };
    $.fn.crsa.addDefinition(Q);
    var Z = {
        type: "label",
        selector: "label",
        code: '<label class="control-label" for="exampleInputEmail1">Email address</label>',
        name: "Form label",
        sections: n({
            style: {
                name: "Style",
                fields: {for_id: {type: "text", name: "For field id", action: "element_attribute", attribute: "for"}}
            }
        })
    };
    $.fn.crsa.addDefinition(Z);
    var ea = {
        type: "form-fieldset",
        selector: "fieldset",
        parent_selector: "form",
        code: "<fieldset></fieldset>",
        name: "Fieldset",
        action_menu: {add: ["form-group", "form-textarea-group", "form-select-group", "form-checkbox-group", "form-radio-group", "form-static-group"]},
        sections: n({style: {name: "Style", fields: {disabled: U}}})
    };
    $.fn.crsa.addDefinition(ea);
    var aa = {
        type: "form-help",
        selector: "span.help-block",
        code: '<span class="help-block">A block of help text.</span>',
        name: "Help text",
        sections: n({})
    };
    $.fn.crsa.addDefinition(aa);
    var ta = {type: "input-group-span", selector: null, code: "<span>Text</span>", name: "Text", sections: n({})};
    $.fn.crsa.addDefinition(ta);
    var na = {
        type: "form-checkbox-naked",
        selector: null,
        code: '<input type="checkbox">',
        name: "Checkbox",
        sections: n({})
    };
    $.fn.crsa.addDefinition(na);
    var ia = {type: "form-radio-naked", selector: null, code: '<input type="radio">', name: "Radio", sections: n({})};
    $.fn.crsa.addDefinition(ia);
    var oa = {
        type: "form-input-group",
        selector: "div.input-group",
        priority: 100,
        code: '<div class="input-group">            <span class="input-group-addon">@</span>        <input type="text" class="form-control" placeholder="Username">        </div>',
        name: "Input group",
        action_menu: {
            add: ["input-group-span", "form-checkbox-naked", "form-radio-naked", "bs-button", "button-dropdown"],
            on_add: function (e, a, t) {
                var n = "input-group-addon";
                ["form-checkbox-naked", "form-radio-naked"].indexOf(t.type) >= 0 ? a = $("<span/>").append(a) : ["button-dropdown"].indexOf(t.type) >= 0 && a.addClass("input-group-btn").removeClass("btn-group"), a.is("span") && a.addClass(n), e.prepend(a)
            }
        },
        sections: n({
            style: {
                name: "Input group",
                fields: {
                    size: {
                        name: "Size",
                        type: "select",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "input-group-lg", name: "Large"}, {key: "input-group-sm", name: "Small"}]
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(oa);
    var la = {
        type: "bs-button",
        selector: ".btn",
        name: "Button",
        code: '<button type="button" class="btn btn-default">Label</button>',
        content_selector: null,
        drag_code: null,
        allowed_in: null,
        sections: n({
            button: {
                name: "Button",
                fields: {
                    tag: {
                        type: "select",
                        name: "a or button",
                        action: "custom",
                        options: [{key: "a", name: "Link - a tag"}, {key: "button", name: "Button - button tag"}],
                        show_empty: !1,
                        get_value: function (e) {
                            var a = e.data;
                            return a.is("button") ? "button" : "a"
                        },
                        set_value: function (e, a) {
                            crsaWillChangeDom();
                            var t = e.data, n = {};
                            $.each(t[0].attributes, function (e, a) {
                                n[a.nodeName] = a.nodeValue
                            });
                            var i = a;
                            return t.replaceWith(function () {
                                var a = $("<" + i + "/>", n).append(t.contents());
                                return e.data = a, a
                            }), $.fn.crsa("setNeedsUpdate", !1, t), a
                        }
                    },
                    href: {name: "Href (if a)", type: "text", action: "element_attribute", attribute: "href"},
                    target: {name: "Target (if a)", type: "text", action: "element_attribute", attribute: "target"},
                    type: {
                        type: "select",
                        name: "Type",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "btn-primary", name: "Primary"}, {
                            key: "btn-info",
                            name: "Info"
                        }, {key: "btn-success", name: "Success"}, {
                            key: "btn-warning",
                            name: "Warning"
                        }, {key: "btn-danger", name: "Danger"}, {key: "btn-link", name: "Link"}]
                    },
                    size: {
                        type: "select",
                        name: "Size",
                        action: "apply_class",
                        show_empty: !1,
                        options: [{key: "btn-lg", name: "Large"}, {key: "__EMPTY__", name: "Default"}, {
                            key: "btn-sm",
                            name: "Small"
                        }, {key: "btn-xs", name: "Extra small"}]
                    },
                    block: {type: "checkbox", name: "Block level", action: "apply_class", value: "btn-block"},
                    active: {type: "checkbox", name: "Active", action: "apply_class", value: "active"},
                    disabled: {
                        type: "checkbox",
                        name: "Disabled",
                        action: "custom",
                        value: "1",
                        get_value: function (e) {
                            var a = e.data;
                            return null != a.attr("disabled") || a.hasClass("disabled") ? "1" : null
                        },
                        set_value: function (e, a) {
                            var t = e.data;
                            return t.is("button") ? t.attr("disabled", a) : a ? t.addClass("disabled") : t.removeClass("disabled"), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(la);
    var ra = {
        type: "button-dropdown",
        selector: function (e) {
            return e.is(".btn-group") && e.find("> .btn").length > 0 ? !0 : !1
        },
        code: '<div class="btn-group">            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">        Action <span class="caret"></span>    </button>        <ul class="dropdown-menu" role="menu">        <li><a href="#">Action</a></li>        <li><a href="#">Another action</a></li>        <li><a href="#">Something else here</a></li>    <li class="divider"></li>        <li><a href="#">Separated link</a></li>    </ul>        </div>',
        name: "Button dropdown",
        tags: "major",
        action_menu: {
            add: ["button-dropdown-item"], on_add: function (e, a) {
                var t = e.find("> ul.dropdown-menu");
                0 == t.length && (t = $('<ul class="dropdown-menu" role="menu"></ul>').appendTo(e)), t.append(a)
            }
        },
        sections: n({
            variation: {
                name: "Variations",
                fields: {dropup: {name: "Dropup", type: "checkbox", value: "dropup", action: "apply_class"}}
            }
        })
    };
    $.fn.crsa.addDefinition(ra);
    var sa = [{key: "dropdown-header", name: "Header"}, {key: "divider", name: "Divider"}, {
        key: "disabled",
        name: "Disabled"
    }], ca = {
        type: "button-dropdown-item",
        selector: function (e) {
            return e.is("li") && e.parent().is("ul.dropdown-menu")
        },
        parent_selector: "ul.dropdown-menu",
        code: '<li role="presentation"><a role="menuitem" tabindex="-1" href="#">Action</a></li>',
        name: "Button dropdown item",
        sections: n({
            variation: {
                name: "Dropdown item",
                fields: {
                    type: {
                        name: "Type",
                        type: "select",
                        options: sa,
                        show_empty: !0,
                        action: "custom",
                        get_value: function (e) {
                            var a = e.data, t = null;
                            return $.each(sa, function (e, n) {
                                return a.hasClass(n.key) ? (t = n.key, !1) : void 0
                            }), t
                        },
                        set_value: function (e, a) {
                            var t = e.data, n = t.find(">a"), i = "dropdown-header" != a && "divider" != a, o = 0 == n.length ? t.html() : n.html();
                            return i ? (o || (o = "Action"), 0 == n.length && (n = $('<a role="menuitem" tabindex="-1" href="#">Action</a>').appendTo(t)), n.html(o)) : (n.remove(), t.html(o)), $.each(sa, function (e, a) {
                                t.hasClass(a.key) && t.removeClass(a.key)
                            }), t.addClass(a), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(ca);
    var da = {
        type: "select",
        action: "apply_class",
        show_empty: !0,
        name: "Size",
        options: [{key: "btn-group-lg", name: "Large"}, {key: "btn-group-sm", name: "Small"}, {
            key: "btn-group-xs",
            name: "Extra small"
        }]
    }, pa = {
        type: "button-group",
        selector: "div.btn-group, div.btn-group-vertical",
        code: '<div class="btn-group">            <button type="button" class="btn btn-default">Left</button>        <button type="button" class="btn btn-default">Middle</button>    <button type="button" class="btn btn-default">Right</button>    </div>',
        name: "Button group",
        tags: "major",
        sections: n({
            buttons: {
                name: "Buttons",
                fields: {
                    size: da,
                    orientation: {
                        name: "Orientation",
                        show_empty: !1,
                        type: "select",
                        action: "apply_class",
                        options: [{key: "btn-group", name: "Horizontal"}, {key: "btn-group-vertical", name: "Vertical"}]
                    },
                    justified: {
                        name: "Justified",
                        type: "checkbox",
                        value: "btn-group-justified",
                        action: "apply_class",
                        tip: "Requires link(a tag) buttons"
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(pa);
    var ma = {
        type: "button-toolbar",
        selector: "div.btn-toolbar",
        code: '<div class="btn-toolbar" role="toolbar">            <div class="btn-group">        <button type="button" class="btn btn-default">1</button>        <button type="button" class="btn btn-default">2</button>    </div>        <div class="btn-group">            <button type="button" class="btn btn-default">8</button>        </div>    </div>',
        name: "Button toolbar",
        sections: n({})
    };
    $.fn.crsa.addDefinition(ma);
    var ua = {
        type: "img",
        selector: "img",
        code: function () {
            return '<img src="' + a() + '" width="200"/>'
        },
        name: "Image",
        sections: n({
            image: {
                name: "Image",
                fields: {
                    src: {name: "Url", type: "image", action: "element_attribute", attribute: "src"},
                    alt: {name: "Alt", type: "text", action: "element_attribute", attribute: "alt"},
                    width: {name: "Width", type: "text", action: "element_attribute", attribute: "width"},
                    height: {name: "Height", type: "text", action: "element_attribute", attribute: "height"},
                    shape: {
                        type: "select",
                        name: "Shape",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "img-rounded", name: "Rounded"}, {
                            key: "img-circle",
                            name: "Circle"
                        }, {key: "img-thumbnail", name: "Thumbnail"}]
                    },
                    responsive: {type: "checkbox", name: "Responsive", action: "apply_class", value: "img-responsive"}
                }
            }
        })
    };
    $.fn.crsa.addDefinition(ua);
    var fa = {
        type: "button-close",
        selector: "button.close",
        code: '<button type="button" class="close" aria-hidden="true">&times;</button>',
        name: "Close button",
        sections: n({})
    };
    $.fn.crsa.addDefinition(fa);
    var ha = {
        type: "caret",
        selector: "span.caret",
        code: '<span class="caret"></span>',
        name: "Caret",
        sections: n({})
    };
    $.fn.crsa.addDefinition(ha), function () {
        var e = {
            type: "nav-list-item",
            selector: function (e) {
                return e.is("li") && e.parent().is(".nav,.breadcrumb,.pagination")
            },
            parent_selector: "ul,ol",
            code: '<li><a href="#">Title</a></li>',
            name: "Nav item",
            priority: 100,
            sections: n({
                list: {
                    name: "Nav item",
                    fields: {
                        stacked: {
                            type: "select",
                            name: "State",
                            action: "apply_class",
                            show_empty: !0,
                            options: [{key: "active", name: "Active"}, {key: "disabled", name: "Disabled"}]
                        }
                    }
                }
            })
        };
        $.fn.crsa.addDefinition(e);
        var a = {
            type: "tabs",
            selector: "ul.nav-tabs,ul.nav-pills",
            code: '<ul class="nav nav-tabs">                <li class="active"><a href="#">Home</a></li>            <li><a href="#">Profile</a></li>            <li><a href="#">Messages</a></li>        </ul>',
            name: "Tabs",
            action_menu: {
                add: ["nav-list-item", "navbar-dropdown"], on_add: function (e, a) {
                    a.is("li") || (a = $("<li/>").append(a).addClass("dropdown")), e.append(a)
                }
            },
            sections: n({
                tabs: {
                    name: "Tabs and Pills",
                    fields: {
                        type: {
                            type: "select",
                            name: "Type",
                            action: "apply_class",
                            show_empty: !1,
                            options: [{key: "nav-tabs", name: "Tabs"}, {key: "nav-pills", name: "Pills"}]
                        },
                        stacked: {type: "checkbox", name: "Stacked", action: "apply_class", value: "nav-stacked"},
                        justified: {type: "checkbox", name: "Justified", action: "apply_class", value: "nav-justified"}
                    }
                }
            })
        };
        $.fn.crsa.addDefinition(a)
    }(), function () {
        var e = {
            type: "nav-list-item-current",
            selector: null,
            parent_selector: "ul,ol",
            code: '<li class="active">Data</li>',
            name: "Active item",
            sections: n({})
        };
        $.fn.crsa.addDefinition(e);
        var a = {
            type: "breadcrumb",
            tags: "major",
            selector: "ol.breadcrumb",
            code: '<ol class="breadcrumb">                <li><a href="#">Home</a></li>            <li><a href="#">Library</a></li>        <li class="active">Data</li>        </ol>',
            name: "Breadcrumbs",
            action_menu: {
                add: ["nav-list-item", "nav-list-item-current"], on_add: function (e, a) {
                    e.append(a)
                }
            },
            sections: n({})
        };
        $.fn.crsa.addDefinition(a)
    }(), function () {
        $.fn.crsa.addDefinition({
            type: "pagination-item",
            selector: null,
            parent_selector: "ul.pagination",
            code: '<li><a href="#">_NUM_</a></li>',
            name: "Item"
        }), $.fn.crsa.addDefinition({
            type: "pagination-current",
            selector: null,
            parent_selector: "ul.pagination",
            code: '<li class="active"><a href="#">_NUM_ <span class="sr-only">(current)</span></a></li>',
            name: "Active item"
        }), $.fn.crsa.addDefinition({
            type: "pagination-previous",
            selector: null,
            parent_selector: "ul.pagination",
            code: '<li><a href="#">&laquo;</a></li>',
            name: "Previous"
        }), $.fn.crsa.addDefinition({
            type: "pagination-next",
            selector: null,
            parent_selector: "ul.pagination",
            code: '<li><a href="#">&raquo;</a></li>',
            name: "Next"
        });
        var e = {
            type: "pagination",
            tags: "major",
            selector: "ul.pagination",
            code: '<ul class="pagination">                <li><a href="#">&laquo;</a></li>            <li class="active"><a href="#">1 <span class="sr-only">(current)</span></a></li>            <li><a href="#">2</a></li>            <li><a href="#">3</a></li>            <li><a href="#">&raquo;</a></li>        </ul>',
            name: "Pagination",
            action_menu: {
                add: ["pagination-item", "pagination-current", "pagination-previous", "pagination-next"],
                on_add: function (e, a, t) {
                    if ("pagination-previous" == t.type)e.prepend(a); else if ("pagination-next" == t.type)e.append(a); else {
                        var n = 0, i = e.find(">li").each(function (e, a) {
                            var t = parseInt($(a).text());
                            t && t > n && (n = t)
                        });
                        if (n++, a.html(a.html().replace("_NUM_", n)), i.length > 0) {
                            var o = $(i.get(i.length - 1)), l = o.text();
                            l.match(/(&raquo;|»)/i) ? a.insertBefore(o) : e.append(a)
                        } else e.append(a)
                    }
                }
            },
            sections: n({
                list: {
                    name: "Pagination",
                    fields: {
                        stacked: {
                            type: "select",
                            name: "Size",
                            action: "apply_class",
                            show_empty: !0,
                            options: [{key: "pagination-lg", name: "Large"}, {key: "pagination-sm", name: "Small"}]
                        }
                    }
                }
            })
        };
        $.fn.crsa.addDefinition(e)
    }(), function () {
        $.fn.crsa.addDefinition({
            type: "pager-item",
            selector: function (e) {
                return e.is("li") && e.parent().is(".pager")
            },
            parent_selector: ".pager",
            code: '<li><a href="#">Title</a></li>',
            name: "Item",
            sections: n({
                list: {
                    name: "Pager item",
                    fields: {
                        stacked: {
                            type: "select",
                            name: "Type",
                            action: "apply_class",
                            show_empty: !0,
                            options: [{key: "previous", name: "Previous"}, {key: "next", name: "Next"}]
                        }, disabled: U
                    }
                }
            })
        }), $.fn.crsa.addDefinition({
            type: "pager-prev",
            selector: null,
            parent_selector: ".pager",
            code: '<li class="previous"><a href="#">&larr; Older</a></li>',
            name: "Previous"
        }), $.fn.crsa.addDefinition({
            type: "pager-next",
            selector: null,
            parent_selector: ".pager",
            code: '<li class="next"><a href="#">Newer &rarr;</a></li>',
            name: "Next"
        });
        var e = {
            type: "pager",
            selector: "ul.pager",
            code: '<ul class="pager">                <li><a href="#">Previous</a></li>            <li><a href="#">Next</a></li>        </ul>',
            name: "Pager",
            action_menu: {
                add: ["pager-item", "pager-prev", "pager-next"], on_add: function (e, a) {
                    e.append(a)
                }
            },
            sections: n({})
        };
        $.fn.crsa.addDefinition(e)
    }(), function () {
        var e = function (e, a) {
            var t = e.find("div" + a);
            return 0 == t.length && (t = e.find("> div")), 0 == t.length && (t = e), t = $(t.get(0))
        }, a = function (e) {
            var a = e.find(">ul.nav");
            return 0 == a.length && (a = $("<ul/>", {"class": "nav navbar-nav"}).appendTo(e)), $(a.get(0))
        }, t = {
            type: "navbar",
            selector: ".navbar",
            code: '<nav class="navbar navbar-default" role="navigation">                <div class="navbar-header">                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">                        <span class="sr-only">Toggle navigation</span>                        <span class="icon-bar"></span>                        <span class="icon-bar"></span>                        <span class="icon-bar"></span>                    </button>                    <a class="navbar-brand" href="#">Brand</a>                </div>                <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">                    <ul class="nav navbar-nav">                        <li class="active"><a href="#">Link</a></li>                        <li><a href="#">Link</a></li>                        <li class="dropdown">                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown <b class="caret"></b></a>                            <ul class="dropdown-menu">                                <li><a href="#">Action</a></li>                                <li><a href="#">Another action</a></li>                                <li><a href="#">Something else here</a></li>                                <li class="divider"></li>                                <li><a href="#">Separated link</a></li>                                <li class="divider"></li>                                <li><a href="#">One more separated link</a></li>                            </ul>                        </li>                    </ul>                    <form class="navbar-form navbar-left" role="search">                        <div class="form-group">                            <input type="text" class="form-control" placeholder="Search">                            </div>                            <button type="submit" class="btn btn-default">Submit</button>                        </form>                        <ul class="nav navbar-nav navbar-right">                            <li><a href="#">Link</a></li>                            <li class="dropdown">                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown <b class="caret"></b></a>                                <ul class="dropdown-menu">                                    <li><a href="#">Action</a></li>                                    <li><a href="#">Another action</a></li>                                    <li><a href="#">Something else here</a></li>                                    <li class="divider"></li>                                    <li><a href="#">Separated link</a></li>                                </ul>                            </li>                        </ul>                    </div>                </nav>',
            name: "Navigation bar",
            tags: "major",
            action_menu: {
                add: ["link", "navbar-brand", "navbar-form", "navbar-list", "navbar-dropdown"],
                on_add: function (t, n, i) {
                    if (["link", "navbar-dropdown"].indexOf(i.type) >= 0) {
                        var o = e(t, ".navbar-collapse"), l = a(o), r = $("<li/>").appendTo(l);
                        r.append(n)
                    } else if (["navbar-brand"].indexOf(i.type) >= 0) {
                        var o = e(t, ".navbar-header");
                        o.append(n)
                    } else if (["navbar-form", "navbar-list"].indexOf(i.type) >= 0) {
                        var o = e(t, ".navbar-collapse");
                        o.append(n)
                    }
                }
            },
            sections: n({
                navbar: {
                    name: "Navbar style",
                    fields: {
                        collapse: {
                            name: "Collapsable",
                            type: "checkbox",
                            value: "1",
                            action: "custom",
                            get_value: function (e) {
                                var a = e.data;
                                return a.find("> .navbar-header").length > 0 ? "1" : null
                            },
                            set_value: function (e, a) {
                                crsaWillChangeDom();
                                var t = e.data;
                                if (a) {
                                    var n = t.find("> .navbar-header");
                                    0 == n.length && (n = $("<div/>", {"class": "navbar-header"}).prependTo(t));
                                    var i = t.find(".navbar-brand");
                                    i.length > 0 && 0 == n.has(i).length && i.appendTo(n);
                                    var o = t.find("> div.navbar-collapse"), l = o.attr("id");
                                    l || (l = getUniqueId()), 0 == o.length && (o = $("<div/>", {
                                        "class": "collapse navbar-collapse",
                                        id: l
                                    }).appendTo(t));
                                    var r = t.find(".navbar-toggle");
                                    0 == r.length && (r = $("<button/>", {
                                        "class": "navbar-toggle",
                                        "data-toggle": "collapse",
                                        "data-target": l
                                    }).html('<span class="sr-only">Toggle navigation</span>                        <span class="icon-bar"></span>                        <span class="icon-bar"></span>                        <span class="icon-bar"></span>')), r.prependTo(n), t.children().each(function (e, a) {
                                        a != n.get(0) && a != o.get(0) && $(a).appendTo(o)
                                    })
                                } else {
                                    var n = t.find("> .navbar-header"), r = t.find(".navbar-toggle").remove(), o = t.find("> div.navbar-collapse");
                                    n.children().each(function (e, a) {
                                        $(a).prependTo(t)
                                    }), o.children().each(function (e, a) {
                                        a != r.get(0) && $(a).appendTo(t)
                                    }), n.remove(), r.remove(), o.remove()
                                }
                                return $.fn.crsa("setNeedsUpdate", !1, t), a
                            }
                        },
                        type: {
                            name: "Type",
                            type: "select",
                            show_empty: !0,
                            action: "apply_class",
                            options: [{
                                key: "navbar-fixed-top",
                                name: "Fixed - top",
                                tip: "Add padding-top to body to prevent navbar overlapping the content."
                            }, {
                                key: "navbar-fixed-bottom",
                                name: "Fixed - bottom",
                                tip: "Add padding-bottom to body to prevent navbar overlapping the content."
                            }, {key: "navbar-static-top", name: "Static - top"}]
                        },
                        inverse: {name: "Inverse", type: "checkbox", value: "navbar-inverse", action: "apply_class"}
                    }
                }
            })
        };
        $.fn.crsa.addDefinition(t);
        var i = {
            type: "navbar-brand",
            selector: ".navbar-brand",
            code: '<a class="navbar-brand" href="#">Brand</a>',
            name: "Brand",
            sections: n({
                link: {
                    name: "Link",
                    fields: {
                        href: {name: "Url", type: "text", action: "element_attribute", attribute: "href"},
                        target: {name: "Target", type: "text", action: "element_attribute", attribute: "target"}
                    }
                }
            })
        };
        $.fn.crsa.addDefinition(i);
        var o = {
            type: "navbar-form",
            selector: null,
            code: '<form class="navbar-form navbar-left" role="search">            <div class="form-group">                <input type="text" class="form-control" placeholder="Search">                </div>                <button type="submit" class="btn btn-default">Submit</button>            </form>',
            name: "Navbar form",
            sections: n({})
        };
        $.fn.crsa.addDefinition(o);
        var l = {
            type: "navbar-list",
            selector: "ul.navbar-nav",
            code: '<ul class="nav navbar-nav"></ul>',
            name: "Section",
            action_menu: {
                add: ["link", "navbar-dropdown"], on_add: function (e, a) {
                    var t = $("<li/>").appendTo(e);
                    t.append(a)
                }
            },
            sections: n({
                layout: {
                    name: "Navbar section",
                    fields: {
                        type: {
                            name: "Position",
                            type: "select",
                            show_empty: !0,
                            action: "apply_class",
                            options: [{key: "navbar-left", name: "Left"}, {key: "navbar-right", name: "Right"}]
                        }
                    }
                }
            })
        };
        $.fn.crsa.addDefinition(l);
        var r = {
            type: "navbar-dropdown",
            selector: null,
            code: '<a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown <b class="caret"></b></a>                            <ul class="dropdown-menu">                                <li><a href="#">Action</a></li>                                <li><a href="#">Another action</a></li>                                <li class="divider"></li>                                <li><a href="#">Separated link</a></li>                            </ul>',
            name: "Dropdown",
            sections: n({})
        };
        $.fn.crsa.addDefinition(r)
    }();
    var ya = {
        type: "list",
        tags: "major",
        selector: "ul,ol",
        code: "<ul>            <li>Lorem ipsum dolor sit amet</li>        <li>Consectetur adipiscing elit</li>        <li>Integer molestie lorem at massa</li>        <li>Nulla volutpat aliquam velit        <ul>        <li>Phasellus iaculis neque</li>        <li>Purus sodales ultricies</li>        </ul>        </li>    </ul>",
        name: "List",
        sections: n({
            style: {
                name: "Style",
                fields: {
                    ordered: {
                        type: "checkbox",
                        name: "Ordered",
                        action: "custom",
                        value: "1",
                        get_value: function (e) {
                            var a = e.data;
                            return "OL" == a.get(0).nodeName ? "1" : null
                        },
                        set_value: function (e, a) {
                            crsaWillChangeDom();
                            var t = e.data, n = {};
                            $.each(t[0].attributes, function (e, a) {
                                n[a.nodeName] = a.nodeValue
                            });
                            var i = "1" == a ? "ol" : "ul";
                            return t.replaceWith(function () {
                                var a = $("<" + i + "/>", n).append(t.contents());
                                return e.data = a, a
                            }), $.fn.crsa("setNeedsUpdate", !1, t), a
                        }
                    },
                    unstyled: {type: "checkbox", name: "Unstyled", action: "apply_class", value: "list-unstyled"},
                    inline: {type: "checkbox", name: "Inline", action: "apply_class", value: "list-inline"}
                }
            }
        })
    };
    $.fn.crsa.addDefinition(ya);
    var ga = {
        type: "list_item",
        selector: "li",
        parent_selector: "ol,ul",
        code: "<li>List item</li>",
        name: "List Item",
        sections: n({})
    };
    $.fn.crsa.addDefinition(ga), function () {
        $.fn.crsa.addDefinition({
            type: "span-label",
            selector: "span.label",
            code: '<span class="label label-default">New</span>',
            name: "Label",
            sections: n({
                list: {
                    name: "Label",
                    fields: {
                        variation: {
                            type: "select",
                            name: "Type",
                            action: "apply_class",
                            show_empty: !0,
                            options: [{key: "label-default", name: "Default"}, {
                                key: "label-primary",
                                name: "Primary"
                            }, {key: "label-success", name: "Success"}, {
                                key: "label-info",
                                name: "Info"
                            }, {key: "label-warning", name: "Warning"}, {key: "label-danger", name: "Danger"}]
                        }
                    }
                }
            })
        }), $.fn.crsa.addDefinition({
            type: "badge",
            selector: "span.badge",
            code: '<span class="badge">42</span>',
            name: "Badge",
            sections: n({
                badge: {
                    name: "Badge",
                    fields: {value: {type: "text", name: "Value", action: "element_html"}}
                }
            })
        }), $.fn.crsa.addDefinition({
            type: "page-header",
            selector: "div.page-header",
            code: '<div class="page-header">                <h1>Example page header <small>Subtext for header</small></h1>            </div>',
            name: "Page header",
            sections: n({})
        })
    }(), function () {
        $.fn.crsa.addDefinition({
            type: "jumbotron",
            tags: "major",
            selector: "div.jumbotron",
            code: '<div class="jumbotron">                <h1>Hello, world!</h1>                <p>This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>                <p><a class="btn btn-primary btn-lg" role="button">Learn more</a></p>            </div>',
            name: "Jumbotron",
            action_menu: {
                add: ["jumbotron-h1", "jumbotron-p", "jumbotron-b"], on_add: function (e, a, t) {
                    var n = e.find(".container");
                    if (n.length > 0 && (e = $(n.get(0))), "jumbotron-b" == t.type) {
                        var i = e.find(".btn").last();
                        i.length > 0 ? (a.insertAfter(i), a.before("&nbsp;")) : (a = $("<p/>").append(a), e.append(a))
                    } else e.append(a)
                }
            },
            sections: n({
                list: {
                    name: "Jumbotron",
                    fields: {
                        fullscreen: {
                            type: "checkbox",
                            name: "Full width",
                            action: "custom",
                            value: "1",
                            get_value: function (e) {
                                var a = e.data, t = a.closest(".container");
                                return 0 == t.length ? "1" : null
                            },
                            set_value: function (e, a) {
                                crsaWillChangeDom();
                                var t = e.data, n = function () {
                                    var e = t.parents(".container");
                                    if (0 != e.length) {
                                        var a = $(e.get(0));
                                        t.detach(), t.insertBefore(a)
                                    }
                                }, i = function () {
                                    var e = t.find("> .container");
                                    0 == e.length && (e = $("<div/>", {"class": "container"})), e.append(t.contents()), e.appendTo(t)
                                }, o = function () {
                                    var e = t.find("> .container");
                                    0 != e.length && (e.detach(), t.prepend(e.contents()), e.remove())
                                }, l = function () {
                                    var e = t.parents(".container");
                                    if (!(e.length > 0)) {
                                        var a = t.closest("body");
                                        t.detach();
                                        var n = a.find(".container"), i = null;
                                        n.each(function (e, a) {
                                            return 0 == $(a).closest(".navbar").length ? (i = $(a), !1) : void 0
                                        }), i = i.length > 0 ? $(i.get(0)) : $("<div/>", {"class": "container"}).prependTo(a), i.prepend(t)
                                    }
                                };
                                return a ? (n(), i()) : (l(), o()), $.fn.crsa("setNeedsUpdate"), a
                            }
                        }
                    }
                }
            })
        }), $.fn.crsa.addDefinition({
            type: "jumbotron-p",
            selector: null,
            parent_selector: ".jumbotron",
            code: "<p>This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>",
            name: "Text",
            sections: n({})
        }), $.fn.crsa.addDefinition({
            type: "jumbotron-h1",
            selector: null,
            parent_selector: ".jumbotron",
            code: "<h1>Hello, world!</h1>",
            name: "Title",
            sections: n({})
        }), $.fn.crsa.addDefinition({
            type: "jumbotron-b",
            selector: null,
            parent_selector: ".jumbotron,.jumbotron p",
            code: '<a class="btn btn-primary btn-lg" role="button">Learn more</a>',
            name: "Button",
            sections: n({})
        })
    }(), function () {
        $.fn.crsa.addDefinition({
            type: "thumbnail-img",
            selector: null,
            tags: "major",
            parent_selector: ".row",
            code: function () {
                return '<div class="col-xs-6 col-md-3">            <a href="#" class="thumbnail">                <img src="' + a() + '" alt="">            </a>            </div>'
            },
            preview: function () {
                return '<div class="col-xs-12">            <a href="#" class="thumbnail">                <img src="' + a() + '" alt="">            </a>            </div>'
            },
            name: "Image thumbnail",
            sections: n({})
        }), $.fn.crsa.addDefinition({
            type: "thumbnail-content",
            selector: null,
            tags: "major",
            parent_selector: ".row",
            code: '<div class="col-sm-6 col-md-4">                <div class="thumbnail">            <img data-src="holder.js/300x200" alt="">                <div class="caption">                    <h3>Thumbnail label</h3>                    <p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>                    <p><a href="#" class="btn btn-primary" role="button">Button</a> <a href="#" class="btn btn-default" role="button">Button</a></p>                </div>            </div>            </div>',
            preview: '<div class="col-sm-12">                <div class="thumbnail">            <img data-src="holder.js/300x200" alt="">                <div class="caption">                    <h3>Thumbnail label</h3>                    <p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>                    <p><a href="#" class="btn btn-primary" role="button">Button</a> <a href="#" class="btn btn-default" role="button">Button</a></p>                </div>            </div>            </div>',
            name: "Content thumbnail",
            sections: n({})
        })
    }(), function () {
        $.fn.crsa.addDefinition({
            type: "alert",
            selector: "div.alert",
            code: '<div class="alert alert-success">                <strong>Well done!</strong> You successfully read this important alert message.            </div>',
            name: "Alert",
            action_menu: {
                actions: [{
                    label: "Style links", action: function (e) {
                        e.find("a").addClass("alert-link")
                    }
                }]
            },
            sections: n({
                style: {
                    name: "Alert",
                    fields: {
                        type: {
                            type: "select",
                            name: "Type",
                            action: "apply_class",
                            show_empty: !1,
                            options: [{key: "alert-success", name: "Success"}, {
                                key: "alert-info",
                                name: "Info"
                            }, {key: "alert-warning", name: "Warning"}, {key: "alert-danger", name: "Danger"}]
                        },
                        close: {
                            type: "checkbox",
                            name: "Dismissable",
                            value: "1",
                            action: "custom",
                            get_value: function (e) {
                                var a = e.data;
                                return a.find("button.close").length > 0 ? "1" : null
                            },
                            set_value: function (e, a) {
                                crsaWillChangeDom();
                                var t = e.data, n = t.find("button.close");
                                return a ? 0 == n.length && (n = $("<button/>", {
                                    type: "button",
                                    "class": "close",
                                    "data-dismiss": "alert",
                                    "aria-hidden": "true"
                                }).html("&times;").prependTo(t)) : n.remove(), $.fn.crsa("setNeedsUpdate", !1, t), a
                            }
                        }
                    }
                }
            })
        })
    }(), function () {
        $.fn.crsa.addDefinition({
            type: "progress",
            selector: "div.progress",
            code: '<div class="progress">                <div class="progress-bar" role="progressbar" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100" style="width: 60%;">            <span class="sr-only">30% Complete</span>            </div>        </div>',
            preview: '<div class="progress progress-striped active">                <div class="progress-bar" role="progressbar" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100" style="width: 60%;">            <span class="sr-only">30% Complete</span>            </div>            <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 20%;">            <span class="sr-only">20% Complete</span>            </div>        </div>',
            name: "Progress bar",
            tags: "major",
            action_menu: {add: ["progress-bar"]},
            sections: n({
                style: {
                    name: "Progress bar",
                    fields: {
                        striped: {
                            type: "checkbox",
                            name: "Striped",
                            value: "progress-striped",
                            action: "apply_class"
                        }, animated: {type: "checkbox", name: "Animated", value: "active", action: "apply_class"}
                    }
                }
            })
        });
        var e = [{key: "progress-bar-success", name: "Success"}, {
            key: "progress-bar-info",
            name: "Info"
        }, {key: "progress-bar-warning", name: "Warning"}, {key: "progress-bar-danger", name: "Danger"}];
        $.fn.crsa.addDefinition({
            type: "progress-bar",
            selector: "div.progress-bar",
            parent_selector: "div.progress",
            code: '<div class="progress-bar" role="progressbar" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100" style="width: 60%;">            <span class="sr-only">30% Complete</span>            </div>        </div>',
            preview: '<div class="progress">                <div class="progress-bar" role="progressbar" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100" style="width: 60%;">            <span class="sr-only">30% Complete</span>            </div>        </div>',
            name: "Progress bar section",
            sections: n({
                style: {
                    name: "Progress bar section",
                    fields: {
                        type: {type: "select", name: "Type", action: "apply_class", show_empty: !1, options: e},
                        percent: {
                            type: "text", name: "Completed %", action: "custom", get_value: function (e) {
                                var a = e.data, t = a.get(0).style.width;
                                return t = null != t ? t.replace("%", "") : null
                            }, set_value: function (a, t) {
                                var n = a.data, i = null == t ? 50 : parseInt(t);
                                i > 100 && (i = 100), n.get(0).style.width = i + "%", n.attr("aria-valuenow", i);
                                for (var o = i + "% Complete", l = 0; l < e.length; l++)if (n.hasClass(e[l].key)) {
                                    o += " (" + e[l].name + ")";
                                    break
                                }
                                n.find("span").html(o);
                                return t
                            }
                        }
                    }
                }
            })
        })
    }(), function () {
        $.fn.crsa.addDefinition({
            type: "media", tags: "major", selector: "div.media", code: function () {
                return '<div class="media">                <a class="pull-left" href="#">            <img class="media-object" src="' + a() + '" width="100">            </a>            <div class="media-body">            <h4 class="media-heading">Media heading</h4>        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.        </div>        </div>'
            }, name: "Media", sections: n({})
        }), $.fn.crsa.addDefinition({
            type: "media-list",
            selector: "ul.media-list",
            code: '<ul class="media-list"></ul>',
            name: "Media list",
            preview: "none",
            action_menu: {add: ["media-list-item"]},
            sections: n({})
        }), $.fn.crsa.addDefinition({
            type: "media-list-item", priority: 100, selector: "div.media", code: function () {
                return '<li class="media">                                <a class="pull-left" href="#">                            <img class="media-object" src="' + a() + '" width="100">                            </a>                            <div class="media-body">                            <h4 class="media-heading">Media heading</h4>                        Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.                        </div>                        </li>'
            }, name: "Media list item", sections: n({})
        })
    }(), function () {
        $.fn.crsa.addDefinition({
            type: "list-group",
            selector: "ul.list-group,div.list-group",
            priority: 100,
            code: '<ul class="list-group">                <li class="list-group-item">Cras justo odio</li>                <li class="list-group-item">Dapibus ac facilisis in</li>                <li class="list-group-item">Morbi leo risus</li>        </ul>',
            name: "List group",
            tags: "major",
            sections: n({
                style: {
                    name: "List group",
                    fields: {
                        percent: {
                            type: "checkbox",
                            name: "Linked",
                            value: "1",
                            action: "custom",
                            get_value: function (e) {
                                var a = e.data;
                                return a.is("div") ? "1" : null
                            },
                            set_value: function (e, a) {
                                crsaWillChangeDom();
                                var n, i = e.data, o = "1" == a ? "div" : "ul", l = "1" == a ? "a" : "li";
                                if (i.is(o))n = i; else {
                                    var r = i.children().detach();
                                    n = t(i, o), e.data = n
                                }
                                var s = [];
                                r.each(function (e, a) {
                                    var n = $(a);
                                    if (n.is(l))s.push(n); else {
                                        var i = t(n, l);
                                        "a" == l && i.attr("href", "#"), s.push(i)
                                    }
                                });
                                for (var c = 0; c < s.length; c++)s[c].appendTo(n);
                                return $.fn.crsa("setNeedsUpdate", !1, n), a
                            }
                        }
                    }
                }
            })
        }), $.fn.crsa.addDefinition({
            type: "list-group-item",
            selector: "li.list-group-item",
            priority: 100,
            parent_selector: "ul,ol",
            code: '<li class="list-group-item">Cras justo odio</li>',
            name: "List group item",
            action_menu: {add: ["h4", "p", "img", "badge"]},
            sections: n({})
        }), $.fn.crsa.addDefinition({
            type: "list-group-item-link",
            selector: "a.list-group-item",
            priority: 100,
            parent_selector: ".list-group",
            code: '<a class="list-group-item" href="#">Cras justo odio</a>',
            name: "List group item",
            action_menu: {add: ["h4", "p", "img", "badge"]},
            sections: n({
                link: {
                    name: "Link",
                    fields: {
                        href: {name: "Url", type: "text", action: "element_attribute", attribute: "href"},
                        active: {type: "checkbox", name: "Active", value: "active", action: "apply_class"}
                    }
                }
            })
        })
    }(), $.fn.crsa.addDefinition({
        type: "panel",
        tags: "major",
        selector: "div.panel",
        priority: 100,
        code: '<div class="panel panel-default">            <div class="panel-body">Basic panel example</div>        </div>',
        name: "Panel",
        action_menu: {
            add: ["panel-heading", "panel-footer", "table", "list-group"], on_add: function (e, a, t) {
                if ("panel-heading" == t.type)e.prepend(a); else if ("panel-footer" == t.type)e.append(a); else if ("table" == t.type || "list-group" == t.type) {
                    var n = e.find(">.panel-body");
                    0 == n.length ? e.append(a) : a.insertAfter(n.last())
                }
            }
        },
        sections: n({
            panel: {
                name: "Panel",
                fields: {
                    variation: {
                        type: "select",
                        name: "Type",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "panel-primary", name: "Primary"}, {
                            key: "panel-success",
                            name: "Success"
                        }, {key: "panel-info", name: "Info"}, {key: "panel-warning", name: "Warning"}, {
                            key: "panel-danger",
                            name: "Danger"
                        }]
                    }
                }
            }
        })
    }), $.fn.crsa.addDefinition({
        type: "panel-heading",
        selector: "div.panel-heading",
        parent_selector: ".panel",
        priority: 100,
        code: '<div class="panel-heading">Panel heading without title</div>',
        name: "Panel heading",
        sections: n({
            style: {
                name: "Panel heading",
                fields: {
                    tag: {
                        type: "select",
                        name: "Title tag",
                        action: "custom",
                        show_empty: !0,
                        options: l,
                        get_value: function (e) {
                            for (var a = e.data, t = 0; t < l.length; t++)if (a.find(l[t].key).length > 0)return l[t].key;
                            return null
                        },
                        set_value: function (e, a) {
                            var t = e.data, n = t.text();
                            if (a) {
                                var i = $("<" + a + "/>").html(n);
                                t.html("").append(i)
                            } else t.html(n);
                            return a
                        }
                    }
                }
            }
        })
    }), $.fn.crsa.addDefinition({
        type: "panel-footer",
        selector: "div.panel-footer",
        parent_selector: ".panel",
        code: '<div class="panel-footer">Panel footer</div>',
        name: "Panel footer",
        sections: n({})
    });
    var ba = function (e, a, t, n) {
        var i = {left: [0, 1, 1, 3], right: [0, 1, 1, 1], top: [0, 0, 0, 0], bottom: [0, 0, 2, 2]}, o = null;
        return $.each(e, function (e, l) {
            if (e == a + "-" + t)o = l.value; else if (e == a)if (n)o = l.value; else {
                var r = splitCssValue(l.value);
                if (0 == r.length)return null;
                var s = null;
                r[r.length - 1].match(/!important/i) && (s = r.pop()), r.length > 0 && r.length <= 4 && (o = r[i[t][r.length - 1]]), s && (o = o + " " + s)
            }
        }), o
    };
    $.fn.crsa.addDefinition({
        type: "well",
        selector: "div.well",
        code: '<div class="well">Look, I\'m in a well!</div>',
        name: "Well",
        sections: n({
            panel: {
                name: "Well",
                fields: {
                    variation: {
                        type: "select",
                        name: "Size",
                        action: "apply_class",
                        show_empty: !0,
                        options: [{key: "well-lg", name: "Large"}, {key: "well-sm", name: "Small"}]
                    }
                }
            }
        })
    });
    var va = function (e, a, t, n, i) {
        var o = n, l = "left" == t ? o : ba(e.values, a, "left", i), r = "right" == t ? o : ba(e.values, a, "right", i), s = "top" == t ? o : ba(e.values, a, "top", i), c = "bottom" == t ? o : ba(e.values, a, "bottom", i), d = null == l || null == r || null == s || null == c;
        if (i && !d && (d = !(l == r && r == s && s == c)), d)$.fn.crsacss("lessRuleValueChanged", e, a + "-left", l, null, !0), $.fn.crsacss("lessRuleValueChanged", e, a + "-right", r, null, !0), $.fn.crsacss("lessRuleValueChanged", e, a + "-top", s, null, !0), $.fn.crsacss("lessRuleValueChanged", e, a + "-bottom", c, null, !0), $.fn.crsacss("lessRuleValueChanged", e, a, null); else {
            var p, m = !1;
            l.match(/!important/i) && (l = $.trim(l.replace(/!important/i, "")), m = !0), r.match(/!important/i) && (r = $.trim(r.replace(/!important/i, "")), m = !0), s.match(/!important/i) && (s = $.trim(s.replace(/!important/i, "")), m = !0), c.match(/!important/i) && (c = $.trim(c.replace(/!important/i, "")), m = !0), p = l == r && r == s && s == c ? l : l == r && s == c ? s + " " + l : l == r ? s + " " + l + " " + c : s + " " + r + " " + c + " " + l, m && (p += " !important"), $.fn.crsacss("lessRuleValueChanged", e, a + "-left", null, null, !0), $.fn.crsacss("lessRuleValueChanged", e, a + "-right", null, null, !0), $.fn.crsacss("lessRuleValueChanged", e, a + "-top", null, null, !0), $.fn.crsacss("lessRuleValueChanged", e, a + "-bottom", null, null, !0), $.fn.crsacss("lessRuleValueChanged", e, a, p)
        }
        return n
    }, ka = function (e, a, t, n) {
        return {
            type: "text", name: e, action: "custom", get_value: function (e) {
                var i = e.data;
                return ba(i.values, a, t, n)
            }, set_value: function (e, i) {
                return va(e.data, a, t, i, n)
            }
        }
    }, _a = function (e, a, t) {
        var n = function (e) {
            for (var a = splitCssValue(e, !0), t = [], n = 0; n < a.length; n++)"," != a[n] && t.push(getUrlFromCssUrlValue(a[n]));
            return t.join(", ")
        }, i = "background-" + a, o = null;
        return e[i] && (o = e[i].value, t && (o = n(o))), o
    }, xa = function (e, a, t) {
        if ("image" == a && t) {
            var n = t.split(",");
            t = "";
            for (var i = 0; i < n.length; i++)t.length > 0 && (t += ", "), t += n[i].indexOf("@") >= 0 ? "url(" + n[i] + ")" : "url('" + n[i] + "')"
        }
        var o = "background-" + a;
        if (e.values[o])$.fn.crsacss("lessRuleValueChanged", e, o, t); else {
            $.fn.crsacss("lessRuleValueChanged", e, o, t)
        }
    }, $a = function (e, a) {
        var t = "text";
        switch (a) {
            case"color":
                t = "color";
                break;
            case"repeat":
                t = "select";
                break;
            case"image":
                t = "image";
                break;
            default:
                t = "text"
        }
        var n = {
            type: t, name: e, action: "custom", get_value: function (e) {
                var t = e.data;
                return _a(t.values, a, "image" == a)
            }, set_value: function (e, t) {
                return xa(e.data, a, t), t
            }
        };
        return "repeat" == a && (n.show_empty = !0, n.options = [{key: "repeat", name: "Repeat"}, {
            key: "no-repeat",
            name: "No repeat"
        }, {key: "repeat-x", name: "Repeat X"}, {key: "repeat-y", name: "Repeat Y"}]), n
    }, wa = function (e) {
        var a = {
            dimension: {
                name: "Dimension",
                fields: {
                    width: {name: "Width", type: "slider", min: 0, max: 2e3, units: !0},
                    "min-width": {name: "Min width", type: "slider", min: 0, max: 2e3, units: !0},
                    "max-width": {name: "Max width", type: "slider", min: 0, max: 2e3, units: !0},
                    height: {name: "Height", type: "slider", min: 0, max: 2e3, units: !0},
                    "min-height": {name: "Min height", type: "slider", min: 0, max: 2e3, units: !0},
                    "max-height": {name: "Max height", type: "slider", min: 0, max: 2e3, units: !0},
                    "margin-left": ka("Margin left", "margin", "left"),
                    "margin-right": ka("Margin right", "margin", "right"),
                    "margin-top": ka("Margin top", "margin", "top"),
                    "margin-bottom": ka("Margin bottom", "margin", "bottom"),
                    "padding-left": ka("Padding left", "padding", "left"),
                    "padding-right": ka("Padding right", "padding", "right"),
                    "padding-top": ka("Padding top", "padding", "top"),
                    "padding-bottom": ka("Padding bottom", "padding", "bottom"),
                    border: {name: "Border", type: "slider"},
                    "border-left": {name: "Border left", type: "slider"},
                    "border-right": {name: "Border right", type: "slider"},
                    "border-top": {name: "Border top", type: "slider"},
                    "border-bottom": {name: "Border bottom", type: "slider"},
                    "border-radius": {name: "Border radius", type: "slider"},
                    position: {
                        name: "Position",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "static", name: "Static"}, {key: "relative", name: "Relative"}, {
                            key: "absolute",
                            name: "Absolute"
                        }, {key: "fixed", name: "Fixed"}, {key: "inherit", name: "Inherit"}]
                    },
                    display: {
                        name: "Display",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "none", name: "None"}, {key: "inline", name: "Inline"}, {
                            key: "inline-block",
                            name: "Inline block"
                        }, {key: "block", name: "Block"}, {key: "list-item", name: "List item"}, {
                            key: "inherit",
                            name: "Inherit"
                        }]
                    },
                    "float": {
                        name: "Float",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "left", name: "Left"}, {key: "right", name: "Right"}]
                    },
                    clear: {
                        name: "Clear",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "left", name: "Left"}, {key: "right", name: "Right"}, {
                            key: "both",
                            name: "Both"
                        }]
                    }
                }
            },
            text: {
                name: "Font / Text",
                fields: {
                    color: {name: "Color", type: "color"},
                    "font-family": {name: "Family", type: "slider"},
                    "font-size": {name: "Size", type: "slider"},
                    "line-height": {name: "Line height", type: "slider"},
                    "font-weight": {
                        name: "Weight",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "normal", name: "Normal"}, {key: "bold", name: "Bold"}, {
                            key: "lighter",
                            name: "Lighter"
                        }, {key: "bolder", name: "Bolder"}, {key: "100", name: "100"}, {
                            key: "200",
                            name: "200"
                        }, {key: "300", name: "300"}, {key: "400", name: "400"}, {key: "500", name: "500"}, {
                            key: "600",
                            name: "600"
                        }, {key: "700", name: "700"}, {key: "800", name: "800"}, {
                            key: "900",
                            name: "900"
                        }, {key: "inherit", name: "Inherit"}]
                    },
                    "font-style": {
                        name: "Style",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "normal", name: "Normal"}, {key: "italic", name: "Italic"}, {
                            key: "oblique",
                            name: "Oblique"
                        }, {key: "inherit", name: "Inherit"}]
                    },
                    "font-variant": {
                        name: "Variant",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "normal", name: "Normal"}, {
                            key: "small-caps",
                            name: "Small caps"
                        }, {key: "inherit", name: "Inherit"}]
                    },
                    "text-transform": {
                        name: "Transform",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "none", name: "None"}, {
                            key: "capitalize",
                            name: "Capitalize"
                        }, {key: "uppercase", name: "Uppercase"}, {
                            key: "lowercase",
                            name: "Lowercase"
                        }, {key: "inherit", name: "Inherit"}]
                    },
                    "text-align": {
                        name: "Align",
                        type: "select",
                        show_empty: !0,
                        options: [{key: "left", name: "Left"}, {key: "center", name: "Center"}, {
                            key: "right",
                            name: "Right"
                        }, {key: "justify", name: "Justify"}, {key: "inherit", name: "Inherit"}]
                    }
                }
            },
            background: {
                name: "Background",
                fields: {
                    background: {name: "Background", type: "text"},
                    "background-color": $a("Color", "color"),
                    "background-image": $a("Image", "image"),
                    "background-repeat": $a("Repeat", "repeat"),
                    "background-position": $a("Position", "position"),
                    "background-attachment": $a("Attachment", "attachment"),
                    "background-size": {name: "Size", type: "text"},
                    "background-origin": {name: "Origin", type: "text"}
                }
            }
        };
        return $.each(a, function (a, t) {
            e[a] = t
        }), e
    }, Da = {
        type: "link",
        selector: "a[href]",
        code: '<a href="http://">Link</a>',
        name: "Link",
        inline_edit: !0,
        sections: n({
            link: {
                name: "Link",
                fields: {
                    href: {name: "Url", type: "text", action: "element_attribute", attribute: "href"},
                    target: {name: "Target", type: "text", action: "element_attribute", attribute: "target"}
                }
            }
        })
    };
    $.fn.crsa.addDefinition(Da), Da = {
        type: "anchor",
        selector: "a[name]",
        code: '<a name="name"></a>',
        preview: "none",
        name: "Anchor",
        inline_edit: !0,
        sections: n({
            link: {
                name: "Anchor",
                fields: {name: {name: "Name", type: "text", action: "element_attribute", attribute: "name"}}
            }
        })
    }, $.fn.crsa.addDefinition(Da);
    var Ca = {
        type: "body",
        selector: "body",
        name: "Body",
        paint_tree_node: function (e, a) {
            var t = getIframeOfElement(a), n = getCrsaPageForIframe(t);
            n.live_update ? e.addClass("live-update") : e.removeClass("live-update")
        },
        sections: n({
            live_update: {
                name: "Mirror content",
                fields: {
                    class_name: {
                        type: "select",
                        name: "Source page",
                        action: "custom",
                        live_update: !1,
                        show_empty: !0,
                        options: function (e, a) {
                            var t = getIframeOfElement(a.data), n = getCrsaPageForIframe(t), i = $.fn.crsapages("getAllPages"), o = [];
                            return $.each(i, function (e, a) {
                                a != n && o.push({key: a.uid, name: a.name})
                            }), o
                        },
                        get_value: function (e) {
                            var a = getIframeOfElement(e.data), t = getCrsaPageForIframe(a);
                            return t.live_update ? t.live_update.uid : null
                        },
                        set_value: function (e, a) {
                            var t = getIframeOfElement(e.data), n = getCrsaPageForIframe(t), i = $.fn.crsapages("getAllPages"), o = !1;
                            return $.each(i, function (e, t) {
                                return t.uid == a ? (n.setLiveUpdate(t), o = !0, !1) : void 0
                            }), o || n.setLiveUpdate(null), a
                        }
                    }
                }
            }
        })
    };
    $.fn.crsa.addDefinition(Ca), c = {
        type: "div",
        selector: "div",
        code: '<div class="crsa-empty-placeholder"></div>',
        empty_placeholder: !0,
        name: "Div",
        priority: 1001,
        sections: n({})
    }, $.fn.crsa.addDefinition(c), $.fn.crsa.addVariablesSection("custom", "Custom variables"), $.fn.crsa.addVariable("@test", "@test", "text", "100px", "custom");
    var Sa = {
        type: "rule",
        selector: "img",
        code: '<img src=""/>',
        name: "Image",
        sections: wa({
            name: {
                name: "Class name",
                fields: {
                    class_name: {type: "text", name: "Class name", action: "rule_name", live_update: !1},
                    media_rule: {type: "text", name: "Media rule", action: "rule_media", live_update: !0}
                }
            }
        })
    };
    $.fn.crsa.addRulesDefinition(Sa), $.fn.crsa.addLibSection("bsgrid", "Grid<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bsgrid", ["bs-container", "bs-row", "bs-column", "thumbnail-img", "thumbnail-content", "bs-clear"]), $.fn.crsa.addLibSection("bsbuttons", "Bootstrap<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bsbuttons", ["bs-button", "img", "button-close", "caret", "button-toolbar", "button-group", "button-dropdown", "button-dropdown-item"]), $.fn.crsa.addLibSection("bstypo", "Text &amp; Images<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bstypo", ["h1", "h2", "h3", "h4", "h5", "h6", "small", "page-header", "p", "link", "anchor", "abbr", "address", "blockquote", "glyphicon", "img", "hr"]), $.fn.crsa.addLibSection("bsui", "UI elements<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bsui", ["span-label", "badge", "alert", "progress", "progress-bar", "media", "media-list", "media-list-item", "list-group", "list-group-item", "panel", "panel-heading", "panel-footer", "well"]), $.fn.crsa.addLibSection("bslists", "Lists<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bslists", ["list", "list_item", "description", "description-term", "description-def"]), $.fn.crsa.addLibSection("bstable", "Tables<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bstable", ["table", "thead", "tbody", "tr", "td"]), $.fn.crsa.addLibSection("bscode", "Code<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bscode", ["code", "code-block"]), $.fn.crsa.addLibSection("bsform", "Forms<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bsform", ["form", "form-group", "form-textarea-group", "form-select-group", "form-select", "form-option", "form-checkbox-group", "form-radio-group", "form-static-group", "form-static", "form-input", "textarea", "form-checkbox", "form-radio", "label", "form-fieldset", "form-help", "form-input-group"]), $.fn.crsa.addLibSection("bsnavbar", "Navigation<small> / Bootstrap</small>"), $.fn.crsa.addElementsToLibSection("bsnavbar", ["navbar", "tabs", "breadcrumb", "pagination", "pager", "jumbotron"]);
    var Ta = [{
        name: "Sections",
        key: "html-sections",
        els: ["section/p", "nav/p", "article/p", "aside/p", "h1", "h2", "h3", "h4", "h5", "h6", "header/p", "footer/p", "address", "main/p"]
    }, {
        name: "Grouping elements",
        key: "html-grouping",
        els: ["p", "hr/e", "pre", "blockquote", "ol/p", "ul/p", "li", "dl", "dt", "dd", "figure", "figcaption", "div/p"]
    }, {
        name: "Text",
        key: "html-text",
        els: ["a", "em", "strong", "small", "s", "cite", "q", "dfn", "abbr", "data", "time", "code", "var", "samp", "kbd", "sub", "sup", "i", "b", "u", "mark", "ruby", "rt", "rp", "bdi", "bdo", "span", "br", "wbr"]
    }, {name: "Edits", key: "html-edits", els: ["ins", "del"]}, {
        name: "Embedded content",
        key: "html-embed",
        els: ["img/e", "iframe/e", "embed/e", "object/e", "param/e", "video/e", "audio/e", "source/e", "track/e", "canvas/e", "map/e", "area/e", "svg/e", "math"]
    }, {
        name: "Tables",
        key: "html-tables",
        els: ["table/p", "caption", "colgroup/p", "col/p", "tbody/p", "thead/p", "tfoot/p", "tr/p", "td/p", "th"]
    }, {
        name: "Forms",
        key: "html-forms",
        els: ["form/p", "fieldset/p", "legend", "label", "input/e", "button/e", "select/e", "datalist/e", "optgroup/e", "option/e", "textarea/e", "keygen/e", "output/e", "progress/e", "meter/e"]
    }, {
        name: "Interactive elements",
        key: "html-interactive",
        els: ["details", "summary", "menuitem", "menu/p"]
    }], La = ["br", "hr", "wbr"], Ia = n({});
    $.each(Ta, function (e, a) {
        var t = [];
        $.each(a.els, function (e, a) {
            var n = a.indexOf("/p") >= 0, i = a.indexOf("/e") >= 0;
            n && (i = !0), a = a.replace("/e", "").replace("/p", "");
            var o = La.indexOf(a) >= 0, l = o ? "<" + a + "/>" : "<" + a + ">" + a + "</" + a + ">", r = n ? ' class="crsa-empty-placeholder"' : "", s = i ? "" : a, c = o ? "<" + a + r + "/>" : "<" + a + r + ">" + s + "</" + a + ">", d = {
                type: "html-" + a,
                selector: a,
                code: c,
                preview: l,
                empty_placeholder: n,
                name: a,
                priority: 2e3,
                sections: Ia
            };
            $.fn.crsa.addDefinition(d), t.push("html-" + a)
        }), $.fn.crsa.addLibSection(a.key, a.name + "<small> / Html5</small>"), $.fn.crsa.addElementsToLibSection(a.key, t)
    }), c = {
        type: "tag", selector: function () {
            return !0
        }, name: "Div", display_name: "tag", priority: 2001, sections: n({})
    }, $.fn.crsa.addDefinition(c), $.fn.crsa.addRulesSection("buttons", "Buttons"), $.fn.crsa.addRule("buttons", ".btn", "Default", {color: "$button_text_color"}), $.fn.crsa.addRule("buttons", ".btn-primary", "Primary"), $.fn.crsa.addRule("buttons", ".btn-info", "Info"), $.fn.crsa.addRule("buttons", ".btn-success", "Success"), $.fn.crsa.addRule("buttons", ".btn-warning", "Warning"), $.fn.crsa.addRule("buttons", ".btn-danger", "Danger"), $.fn.crsa.addRule("buttons", ".btn-inverse", "Inverse"), $.fn.crsa.addRule("buttons", ".btn-link", "Link")
});