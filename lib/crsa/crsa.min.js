function removeCrsaClasses(e) {
    var t = e.attr("class");
    t && (t = t.replace(/(^|\W)crsa\-[a-z\-]*/gi, ""), e.attr("class", t))
}

function copyCodeToClipboard(e) {
    if (isApp()) {
        e = removeCrsaClassesFromHtml(e), e = pinegrow.formatHtml(e);
        var t = require("nw.gui"),
            a = t.Clipboard.get();
        a.set(e, "text"), crsaQuickMessage("Code copied to clipboard.")
    }
}

function removeCrsaClassesFromHtml(e) {
    var t = /\s*crsa\-[a-z\-]*/g;
    return e.replace(/class=".*"/g, function(e) {
        return e.replace(t, "")
    }).replace(/(<[^>]*?)\s*class\=['"]\s*['"]/gi, "$1")
}

function makeDialog(e, t, a, n) {
    "undefined" == typeof n && (n = "");
    var r = "string" == typeof n ? n : "",
        o = '<div class="modal-content">                <div class="modal-header">                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>                    <h4 class="modal-title">' + e + '</h4>                </div>                <div class="modal-body">' + r + '                </div>                <div class="modal-footer"><p class="pull-left"></p>';
    t && (o += '<button type="button" class="btn btn-default btn-sm cancel">' + t + "</button>"), a && (o += '<button type="button" class="btn btn-primary btn-sm ok">' + a + "</button>"), o += "</div>            </div>";
    var i = $("<div/>", {
        "class": "modal-dialog crsa-dialog-nonmodal"
    }).html(o);
    return "object" == typeof n && i.find(".modal-body").append(n), i
}

function makeAndShowDialog(e, t, a, n, r, o) {
    var i = makeDialog(e, t, a, n);
    $("body").append(i);
    var l = 100,
        s = 100;
    i.css("top", s + "px").css("left", l + "px"), i.draggable({
        handle: ".modal-header"
    }).on("dragstart", function() {
        $.fn.crsapages("showOverlays")
    }).on("dragstop", function() {
        $.fn.crsapages("showOverlays", !0)
    }), i.find("button.close,button.cancel").click(function() {
        r && r(), i.remove()
    }), i.find("button.ok").click(function() {
        o && o(), i.remove()
    }), i.on("hidden.bs.modal", function() {
        i.remove()
    })
}

function setDialogNotice(e, t, a) {
    var n = e.find(".modal-footer > p");
    n.html(t).attr("class", "pull-left " + a)
}

function makeModalDialog(e, t, a, n, r, o, i) {
    "function" == typeof n && (n = n());
    var l = makeDialog(e, t, a, n);
    l.removeClass("crsa-dialog-nonmodal");
    var s = $("<div/>", {
        "class": "modal fade",
        tabIndex: "-1",
        role: "dialog"
    }).append(l);
    return s.find("button.close,button.cancel").click(function() {
        r && r(), s.modal("hide")
    }), s.find("button.ok").click(function() {
        o && o(), s.modal("hide")
    }), s.on("hidden.bs.modal", function() {
        s.remove()
    }), i && i(s), s.modal({
        backdrop: !0
    }), s
}

function makeModalDialogWhole(e) {
    "function" == typeof e && (e = e());
    var t = $(e),
        a = $("<div/>", {
            "class": "modal fade",
            tabIndex: "-1",
            role: "dialog"
        }).append(t);
    return a.modal({
        backdrop: "static",
        keyboard: !1
    }), a
}

function showAlert(e, t, a, n, r, o) {
    return t || (t = "Notice"), n || a || (n = "OK"), makeModalDialog(t, a, n, e, r, o)
}

function crsaHandleExternalLinks(e) {
    isApp() && e.find("a.external").on("click", function(e) {
        e.preventDefault();
        var t = require("nw.gui"),
            a = $(e.delegateTarget).attr("href");
        t.Shell.openExternal(a)
    })
}

function showNotice(e, t, a, n, r, o) {
    var a = "notice_hide_" + a;
    if (!o) {
        if (a in localStorage && "1" == localStorage[a]) return n && n(!1), void 0;
        if (r && a in localStorage) return n && n(!1), void 0
    }
    var i = $('<label class="pull-left control-label"><input type="checkbox"> Don\'t show this notice again</label>'),
        l = showAlert(e, t, null, null, null, function() {
            n && n(!0), localStorage[a] = i.find("input").is(":checked") ? "1" : "0"
        });
    return r || l.find(".modal-footer").prepend(i), crsaHandleExternalLinks(l), l
}

function showPrompt(e, t, a, n, r, o) {
    var i = $('<form role="form">        <div class="form-group">        <label for="dlgInput">' + e + '</label>        <input type="text" class="form-control" id="dlgInput" placeholder="' + n + '">        </div>        </form>'),
        l = i.find("input"),
        s = i;
    s.on("submit", function(e) {
        e.preventDefault(), o && o(l.val()), c.modal("hide")
    }), a && l.val(a);
    var c = showAlert(i, t, "Cancel", "Ok", r, function() {
        o && o(l.val())
    });
    return c.on("shown.bs.modal", function() {
        l.focus()
    }), c
}

function getIframeBody(e) {
    var t = e.contentDocument || e.contentWindow.document;
    return t.body
}

function getIframeDocument(e) {
    return e.contentDocument || e.contentWindow.document
}

function getIframeOfElement(e) {
    var t = null;
    if (!e || 0 == e.length) return null;
    var a = e.get(0).ownerDocument;
    return $("iframe.content-iframe").each(function(e, n) {
        var r = getIframeDocument(n);
        return r == a ? (t = $(n), !1) : void 0
    }), t
}

function getCrsaPageOfElement(e) {
    var t = getIframeOfElement(e);
    return t ? getCrsaPageForIframe(t) : null
}

function shortenString(e, t, a) {
    return "undefined" == typeof a && (a = "..."), !e || e.length <= t ? e : e.substr(0, t) + a
}

function getObjectFromElement(e) {
    return e && e.length > 0 ? {
        type: "element",
        data: e
    } : null
}

function getObjectFromRule(e) {
    return {
        type: "rule",
        selector: e.selector,
        data: e
    }
}

function getUniqueId(e, t, a) {
    var n = 0;
    "undefined" != typeof a && (a = "" + a, n = parseInt(a.replace(/[a-z]*/i, ""))), t || (t = pinegrow.getSelectedPage());
    var r = t ? t.get$Html() : null;
    e || (e = "crsa_id_");
    for (var o = a ? n : gen_id_count;;) {
        o++;
        var i = e + o;
        if (r) {
            if (0 == r.find("#" + i).length) return a || (gen_id_count = o), i
        } else if (0 == $("#" + i).length) return a || (gen_id_count = o), i
    }
}

function getClosestCrsaElement(e) {
    for (var t = getType(e); e && e.length > 0 && null === t;) e = e.parent(), t = getType(e);
    return t ? e : $()
}

function getType(e, t, a, n) {
    "undefined" == typeof t && (t = !1);
    var r = null;
    if (!t) {
        if (r = e.data("crsa-def")) return r;
        if (r === !1) return null
    }
    return a ? null : (n || (n = getCrsaPageForIframe(getIframeOfElement(e))), n ? ($.each(n.getComponentTypes(), function(t, a) {
        var n = !1;
        return a.selector_tag ? n = e.get(0).tagName === a.selector_tag : "function" == typeof a.selector ? n = a.selector(e) : a.selector && (n = e.is(a.selector)), n ? (r = a, !1) : !0
    }), r && e.data("crsa-def", null !== r ? r : !1), r) : null)
}

function getElementName(e, t, a, n, r, o) {
    var i = e.get(0);
    if (!e || !i) return t ? t.name : "Element";
    if (t || (t = getType(e)), !t) return i.tagName + " (unknown)";
    var l = null;
    if (t.display_name && "function" == typeof t.display_name) l = t.display_name(e, t);
    else {
        var s;
        if (r) {
            s = "";
            for (var c = 0; c < i.childNodes.length; c++)
                if (3 == i.childNodes[c].nodeType && (s += $.trim(i.childNodes[c].textContent), s.length)) {
                    s = s.substring(0, 30);
                    break
                }
            s = s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
        }
        l = t.name;
        var d = i.nodeName.toLowerCase();
        o || "tag" == t.display_name ? l = d : o && l.toLowerCase() != d && (l += " (" + d + ")");
        var u = i.id;
        if (u && (l += a ? '<span class="name-id">#' + u + "</span>" : "#" + u), n) {
            var p = i.className;
            p && (p = p.replace(/\s*crsa\-[a-z\-]*/gi, ""), p = p.replace(/\s\s+/g, "").replace(/\s/gi, "."), p && p.length > 0 && (l += a ? '<span class="name-class">.' + p + "</span>" : "." + p))
        }
        s && (l = l + " | " + (a ? '<span class="name-text">' + s + "</span>" : s))
    }
    return l
}

function isInDOMTree(e) {
    return !!findUltimateAncestor(e).body
}

function findUltimateAncestor(e) {
    for (var t = e; t.parentNode;) t = t.parentNode;
    return t
}

function getTreeNodeForElement(e, t) {
    t || (t = pinegrow.getSelectedPage().treeTop);
    var a = e.data("crsa-tree-node"),
        n = a && a.length > 0 && isInDOMTree(a.get(0)) ? a : null;
    if (!n && t) {
        var r = e.attr("data-pg-tree-id");
        if (r) return n = t.find('[data-pg-tree-id="' + r + '"]'), n.length ? n : null
    }
    return n
}

function isApp() {
    return "undefined" != typeof process && process.versions && "node-webkit" in process.versions
}

function crsaChooseFile(e, t, a, n) {
    var r = $('<input style="display:none;" type="file"/>').appendTo($("body"));
    a && r.attr("multiple", ""), n && r.attr("nwworkingdir", n), t ? r.attr("nwsaveas", t) : r.removeAttr("nwsaveas"), r.on("change", function() {
        var t = $(this).val(),
            n = a ? t : crsaMakeUrlFromFile(t);
        t && t.length > 0 && e(n, t), r.remove()
    }), r.trigger("click")
}

function crsaGetObjectParentUrl(e) {
    if ("element" == e.type) {
        var t = e.data;
        return getCrsaPageForIframe(getIframeOfElement(t)).url
    }
    return "rule" == e.type ? e.data.crsa_stylesheet.url : "stylesheet" == e.type ? e.data.url : null
}

function crsaGetVersion() {
    return "1.27"
}

function crsaCheckForNewVersion(e) {
    $.ajax({
        url: "http://pinegrow.com/version.json?z=" + (new Date).getTime(),
        data: null,
        dataType: "json"
    }).done(function(t) {
        t.version && parseFloat(t.version) > parseFloat(crsaGetVersion()) ? e(t) : e(null)
    }).fail(function() {
        e(null)
    })
}

function crsaGetVersionName() {
    var e = crsaGetVersion() + " " + (isApp() ? "App" : "Web");
    return isApp() && crsaIsBig() && (e += " Pro"), pg_is_beta && (e += " BETA"), e
}

function crsaIsBig() {
    return crsaStorage.getValue("crsaBig") ? !0 : isApp() ? 1 : 1
}

function crsaCheckMe(e, t, a) {
    for (var n = "", r = 0; r < e.length; r++) {
        var o = e.charCodeAt(r);
        if (n += String.fromCharCode(o * (r + 11) % 25 + 65), 4 == r) break
    }
    return a && console.log(n), t.toLowerCase() == n.toLowerCase()
}

function crsaIsEmailActivated() {
    if (isApp() && crsaIsBig()) return !0;
    if (!crsaStorage.getValue("userEmail")) return !1;
    if (!crsaStorage.getValue("activationCode")) return !1;
    var e = crsaCheckMe(crsaStorage.getValue("userEmail"), crsaStorage.getValue("activationCode"));
    return e && !crsaStorage.getValue("activatedDate") && crsaStorage.setValue("activatedDate", (new Date).getTime()), e
}

function crsaGenCode(e, t) {
    t || (t = 0);
    var a = 8,
        n = 65,
        r = 90,
        o = 3,
        i = 0,
        l = "";
    if (e) {
        if (e = $.trim(e.toUpperCase()), e.length != a) return !1;
        for (var s = 0; a > s; s++) {
            var c = e.charCodeAt(s);
            if (s % o != o - 1);
            else if (c != i % (r - n) + n) return !1;
            i += c
        }
        return !0
    }
    for (var s = 0; a > s; s++) {
        var c;
        c = s % o != o - 1 ? Math.round(Math.random() * (r - n)) + n : i % (r - n + t) + n, l += String.fromCharCode(c), i += c
    }
    return l
}
var gen_id_count = 1;
window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame, window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame,
    function(e) {
        function t(t) {
            var a = null,
                n = 0,
                r = 0,
                o = nt.crsapages("getZoom");
            nt.find(".content").each(function(o, i) {
                var l = e(i),
                    s = l.offset(),
                    c = l.width(),
                    d = l.height();
                return t.pageX >= s.left && t.pageX <= s.left + c && t.pageY >= s.top && t.pageY <= s.top + d ? (a = l.find("> iframe"), n = t.pageX - s.left, r = t.pageY - s.top, !1) : void 0
            });
            var i = getType(st);
            if (lt = !1, a) {
                var l = a,
                    s = getIframeDocument(l[0]),
                    d = e(getIframeBody(l.get(0)));
                n /= o, r /= o;
                var u = e(s.elementFromPoint(n, r));
                if (u.length > 0 && u.get(0) === st.get(0)) return;
                for (u.has(d.get(0)).length > 0 && (u = d); u.length > 0 && st.has(u.get(0)).length > 0 && !u.is("body");) u = u.parent();
                if (st.has(u.get(0)).length > 0) return; {
                    var p, f = u,
                        g = null,
                        m = !1;
                    u.closest(".crsa-selected")
                }
                i.parent_selector && (u = u.closest(i.parent_selector), m = !0);
                for (var h = "img,iframe,script,embed,vide,audio,:hidden", v = function(e) {
                        return "inline" == e.css("display") && !e.is("img")
                    }; !u.is("body") && (u.is(h) || (v(u) || u.is("p")) && !v(st));) u = u.parent(), m = !0;
                if (m ? u.length > 0 ? (p = P(u), f = getClosestCrsaElement(f), p.children().each(function(t, a) {
                        return e(a).find(f).length > 0 || a == f.get(0) ? (g = e(a), !1) : void 0
                    })) : lt = !0 : (u = getClosestCrsaElement(u), u.length > 0 && (p = P(u))), 0 == u.length || !p || 0 == p.length) return !0;
                var w = u.offset(),
                    b = n - w.left,
                    y = r - w.top;
                if (!ot || ot[0] !== u[0]) {
                    if (ot = u, it = {
                            inline: !0,
                            appended: null,
                            iframe: l
                        }, ot && (st.find(ot).length > 0 || ot.get(0) === st.get(0))) return;
                    var C = st.attr("style");
                    st.hide();
                    var k = u.width(),
                        S = u.height();
                    st.show(), C ? st.attr("style", C) : st.removeAttr("style");
                    var T = u.width(),
                        E = u.height();
                    it.inline = T - k > E - S, c(u)
                }
                var A = getCrsaPageForIframe(l);
                if (A.undoSetFlag || (A.undoSetFlag = !0, A.undoStack.add("Drag & Drop / " + getElementName(st))), g) {
                    var x = g.offset(),
                        _ = n - x.left;
                    _ < g.width() / 2 ? st.insertBefore(g) : st.insertAfter(g)
                } else {
                    var k = u.width(),
                        S = u.height(),
                        D = it.inline ? b > k / 2 : y > S / 2;
                    if (it.appended !== D) {
                        if (D) {
                            var I = p.children();
                            if (I.length) {
                                for (var F = null, N = I.length - 1; N >= 0; N--) {
                                    var O = e(I.get(N));
                                    if (O.is(":visible")) {
                                        F = O;
                                        break
                                    }
                                }
                                F ? st.insertAfter(F) : p.prepend(st)
                            } else p.append(st)
                        } else p.prepend(st);
                        it.appended = D
                    }
                }
                st.get(0).ownerDocument != s && console.log("different iframe!"), c(u)
            } else ot = null, st && st.detach()
        }

        function a(t) {
            if (t.preview_image) {
                var a = e("<img/>"),
                    n = t.framework.getBaseUrl() + "/images/" + t.preview_image;
                return a.attr("src", n), a.data("crsa-def", t), a.get(0).crsaDef = t, a
            }
            if (!t.preview) return r(t, !0);
            if ("none" == t.preview) return null;
            var i = "function" == typeof t.preview ? t.preview(o()) : t.preview;
            i = i.replace(/<script/g, "<ascript").replace(/<\/script/g, "</ascript");
            var l = e("<div/>").append(i).contents();
            return l.data("crsa-def", t), l.get(0).crsaDef = t, l
        }

        function n(t) {
            return e.trim("function" == typeof t.code ? t.code(o()) : t.code)
        }

        function r(t, a) {
            var r, o = n(t);
            a && (o = o.replace(/<script/g, "<ascript").replace(/<\/script/g, "</ascript"));
            var i = e("<div/>").append(o).contents();
            a || (r = pgCreateNodeFromHtml(o), r.mapIdsToDomElement(i.get(0)));
            var l = e(i.get(0));
            if (l.data("crsa-def", t), l.get(0).crsaDef = t, t && t.empty_placeholder) {
                var s = "string" == typeof t.empty_placeholder ? t.empty_placeholder : "pg-empty-placeholder",
                    c = 0 == l.get(0).innerHTML.length || "" == e.trim(l.html());
                c ? l.hasClass(s) || (l.addClass(s), r && r.addClass(s)) : (l.removeClass(s), r && r.removeClass(s))
            }
            return i
        }

        function o() {
            return {
                body: J ? getIframeBody(J.get(0)) : null,
                page: J
            }
        }

        function i(t, a) {
            if ("element" == t.type) {
                var n = t.data,
                    r = getElementPgNode(n),
                    o = new pgParserSourceProblem(r, n);
                if (r || o.add("element", getElementName(n), "change"), !o.ok()) throw o;
                var i = n.data("crsa-values");
                if (i) return i;
                var s = e("iframe.content-iframe");
                i = {};
                var c = l(t);
                !a && c && (a = c.sections ? c.sections : null); {
                    r.getAttr("id")
                }
                return c && a && e.each(a, function(a, o) {
                    o.fields && e.each(o.fields, function(a, o) {
                        var l = o.action ? o.action : "style";
                        if (o.get_value) i[a] = o.get_value(t, a);
                        else if ("none" == l);
                        else if ("style" == l) {
                            if (!d) {
                                var c = r.getAttr("id");
                                if (c) var d = s.crsacss("find", "#" + c)
                            }
                            if (d && d.length > 0) {
                                var u = s.crsacss("getCss", d, a);
                                u && ("image" == o.type && (u = u.replace(/url\(/g, "").replace(/\"/g, "").replace(/\'/g, "").replace(/\)/g, "")), i[a] = u)
                            }
                        } else if ("apply_class" == l) {
                            var p = Wt(o, t);
                            p ? (i[a] = "__EMPTY__", e.each(p, function(e, t) {
                                return r.hasClass(t.key) ? (i[a] = t.key, !1) : void 0
                            })) : o.value && (i[a] = r.hasClass(o.value) ? o.value : null)
                        } else if ("element_id" == l) i[a] = r.getAttr("id");
                        else if ("element_attribute" == l) i[a] = r.getAttr(o.attribute);
                        else if ("element_html" == l) i[a] = e.trim(r.html());
                        else if ("rules" == l)
                            if (_t.showOnlyClassesInProperties) {
                                var f = [];
                                e.each(n.get(0).classList, function(e, t) {
                                    f.push("." + t)
                                }), i[a] = f
                            } else i[a] = J.crsacss("getRulesForElement", n, !0)
                    })
                }), i
            }
            if ("rule" == t.type) {
                i = {};
                var c = l(t),
                    d = t.data,
                    u = d.values;
                return c && c.sections && e.each(c.sections, function(a, n) {
                    e.each(n.fields, function(e, a) {
                        var n = a.action ? a.action : "style";
                        if (a.get_value) i[e] = a.get_value(t, e);
                        else if ("style" == n && u) {
                            var r, o = u[e] ? u[e] : null;
                            o && (r = o.value, "image" == a.type && (r = r.replace(/url\(/g, "").replace(/\"/g, "").replace(/\'/g, "").replace(/\)/g, "")), i[e] = o.value)
                        } else "rule_name" == n ? i[e] = t.selector : "rule_media" == n && (i[e] = d.media ? d.media : null)
                    })
                }), i
            }
            return {}
        }

        function l(t, a) {
            switch (t.type) {
                case "element":
                    return getType(t.data, a);
                case "rule":
                    return e.fn.crsa.defaults.rulesDefinition
            }
            return null
        }

        function s(e, t, a, n, r, o, i) {
            "undefined" == typeof o && (o = t.contents().scrollLeft()), "undefined" == typeof i && (i = t.contents().scrollTop()), r || (r = t.position());
            var l = a,
                s = l.left * n + r.left - o * n,
                c = l.top * n + r.top - i * n;
            e.css("left", s + "px").css("top", c + "px")
        }

        function c(t) {
            if (xt) {
                var a = getIframeOfElement(xt);
                a && a.parent().find(".crsa-hl-overlay").hide()
            }
            var n, r = e.fn.crsapages("getZoom"),
                o = function(t) {
                    var a = n.find(t);
                    return a && 0 != a.length || (a = e("<div/>", {
                        "class": "crsa-hl-overlay " + t.replace(/\./g, " ")
                    }).appendTo(n)), a
                };
            t && t.length > 0 ? window.requestAnimationFrame(function() {
                var a = getIframeOfElement(t);
                if (a) {
                    n = a.parent();
                    var i = a.position();
                    xt = t;
                    var l = a.contents().scrollLeft(),
                        c = a.contents().scrollTop();
                    t.each(function(t, d) {
                        if (1 == t) return !1;
                        var u = e(d),
                            p = u.offset(),
                            f = parseInt(u.css("padding-left")),
                            g = f * r,
                            m = parseInt(u.css("padding-right")),
                            h = m * r,
                            v = parseInt(u.css("padding-top")),
                            w = v * r,
                            b = parseInt(u.css("padding-bottom")),
                            y = b * r,
                            C = parseInt(u.css("margin-top")),
                            k = C * r,
                            P = parseInt(u.css("margin-bottom")),
                            S = P * r,
                            T = parseInt(u.css("margin-left")),
                            E = T * r,
                            A = parseInt(u.css("margin-right")),
                            x = A * r,
                            _ = u.innerWidth() - f - m,
                            D = _ * r,
                            I = u.innerHeight() - v - b,
                            F = I * r,
                            N = ct && "element" == ct.type && ct.data.get(0) == u.get(0),
                            O = o(".crsa-hl-size");
                        if (O.css({
                                width: D + g + h + "px",
                                height: F + w + y + "px"
                            }), s(O, a, {
                                left: p.left,
                                top: p.top
                            }, r, i, l, c), O.appendTo(n), pinegrow.sourceParser) {
                            var M = getElementPgNode(u);
                            M ? O.removeClass("dyn") : O.addClass("dyn")
                        }
                        N && O.hide();
                        var R = o(".crsa-hl-padding-top");
                        R.css({
                            width: D + g + h + "px",
                            height: w + "px"
                        }), s(R, a, {
                            left: p.left,
                            top: p.top
                        }, r, i, l, c), R.appendTo(n);
                        var R = o(".crsa-hl-padding-bottom");
                        R.css({
                            width: D + g + h + "px",
                            height: y + "px"
                        }), s(R, a, {
                            left: p.left,
                            top: p.top + v + I
                        }, r, i, l, c), R.appendTo(n);
                        var R = o(".crsa-hl-padding-left");
                        R.css({
                            width: g + "px",
                            height: F + "px"
                        }), s(R, a, {
                            left: p.left,
                            top: p.top + v
                        }, r, i, l, c), R.appendTo(n);
                        var R = o(".crsa-hl-padding-right");
                        R.css({
                            width: h + "px",
                            height: F + "px"
                        }), s(R, a, {
                            left: p.left + f + _,
                            top: p.top + v
                        }, r, i, l, c), R.appendTo(n);
                        var R = o(".crsa-hl-margin-top");
                        R.css({
                            width: D + g + h + "px",
                            height: k + "px"
                        }), s(R, a, {
                            left: p.left,
                            top: p.top - C
                        }, r, i, l, c), R.appendTo(n);
                        var R = o(".crsa-hl-margin-bottom");
                        R.css({
                            width: D + g + h + "px",
                            height: S + "px"
                        }), s(R, a, {
                            left: p.left,
                            top: p.top + v + I + b
                        }, r, i, l, c), R.appendTo(n);
                        var R = o(".crsa-hl-margin-left");
                        R.css({
                            width: E + "px",
                            height: w + F + y + "px"
                        }), s(R, a, {
                            left: p.left - T,
                            top: p.top
                        }, r, i, l, c), R.appendTo(n);
                        var R = o(".crsa-hl-margin-right");
                        R.css({
                            width: x + "px",
                            height: w + F + y + "px"
                        }), s(R, a, {
                            left: p.left + f + _ + m,
                            top: p.top
                        }, r, i, l, c), R.appendTo(n);
                        var L = p.top - C - 16 / r,
                            R = o(".crsa-hl-name");
                        R.html(getElementName(u, null, !1, !0, !1, !0)), L < a.scrollTop() + 20 ? (L = p.top + v + I + b, p.left = p.left + f + _ + m - R.outerWidth() / r) : N && (L = p.top + v + I + b), s(R, a, {
                            left: p.left,
                            top: L
                        }, r, i, l, c), R.appendTo(n)
                    }), n.find("> .crsa-hl-overlay").show()
                }
            }) : xt = null
        }

        function d(a) {
            var n = new CrsaProfile,
                o = ct ? ct.data : null,
                i = a ? getIframeOfElement(a) : o ? getIframeOfElement(o) : null;
            if (i) {
                o && o.removeClass("crsa-selected"), e(getIframeBody(i.get(0))).find(".crsa-selected").removeClass("crsa-selected");
                var s = getTreeRootForElement(a, i),
                    c = getCrsaPageForIframe(i);
                if (a && c) {
                    var p = getElementPgNode(a);
                    if (p && p.document != c.sourceNode) return showAlert("<b>Refresh (CMD + R) the page</b> before making changes.", null, "OK"), void 0
                }(null == c.treeCurrentRoot || null == s || s.get(0) != c.treeCurrentRoot.get(0)) && Rt.createTreeWidget(i, e("#crsa-tree"), s), (null == J || J.get(0) != i.get(0)) && Lt(i);
                var f = null,
                    m = !1;
                if (a) {
                    var f = getTreeNodeForElement(a),
                        y = f ? gt.getElementOfTreeNode(f) : null;
                    if (f && y && y.get(0) == a.get(0)) {
                        for (var C = f.parent().closest("ul.crsa-tree-node-closed"); C.length > 0;) f = C.closest("li"), C = f.parent().closest("ul.crsa-tree-node-closed");
                        a = gt.getElementOfTreeNode(f), m = f.find(">ul.crsa-tree-node-closed").length > 0
                    }
                    a && a.addClass("crsa-selected"), o = a
                } else o = null;
                a && (o = a, gt.setSelectedElement(a, pt)), rt && (rt.remove(), rt = null);
                var k = null;
                if (o) {
                    ct = getObjectFromElement(o), k = l(ct, !0);
                    var P = i.closest(".page"),
                        S = e("<div/>", {
                            "class": "crsa-inline-menu"
                        }).appendTo(e(P)),
                        T = e("<i/>", {
                            "class": "fa fa-fw fa-trash-o crsa-inline-menu-delete"
                        }).appendTo(S);
                    T.on("click", function(e) {
                        var t = getClosestCrsaElement(o.parent()),
                            a = getElementPgNode(o),
                            n = new pgParserSourceProblem(a, o);
                        return a || n.add("element", getElementName(o), "remove"), n.ok() ? (willMakeChange(J, "Delete element / " + getElementName(o)), h(o, i, function() {
                            a.remove(), didMakeChange(J, t), Bt(o, X)
                        }), e.preventDefault(), void 0) : (showAlert(n.toString(), "Can't remove this element"), void 0)
                    });
                    var A = e("<i/>", {
                        "class": "fa fa-fw fa-copy crsa-inline-menu-duplicate"
                    }).appendTo(S);
                    A.on("click", function(e) {
                        var t = getElementPgNode(o),
                            a = new pgParserSourceProblem(t, o);
                        return t || a.add("element", getElementName(o), "duplicate"), a.ok() ? (willMakeChange(J, "Duplicate element / " + getElementName(o)), w(o, i, function(e) {
                            var a = t.clone();
                            a.insertAfter(t), a.mapIdsToDomElement(e.get(0)), didMakeChange(J, e, e.parent()), Ht(e), Rt.updateStructureAndWireAllElemets(i, e.parent()), E(i)
                        }), e.preventDefault(), void 0) : (showAlert(a.toString(), "Can't duplicate this element"), void 0)
                    });
                    var x = [{
                        label: "Edit text",
                        action: function(t) {
                            K.startEdit(e(".crsa-edit-toolbar"), t)
                        }
                    }, {
                        label: "Remove tags",
                        manage_change: !0,
                        action: function(e) {
                            willMakeChange(J, "Remove tags / " + getElementName(e)), b(e, i), didMakeChange(J, e)
                        }
                    }, {
                        label: "Edit code",
                        "class": "action-edit-code",
                        kbd: "C",
                        manage_change: !0,
                        action: function(e) {
                            v(e)
                        }
                    }, {
                        label: "Show CSS Rules",
                        "class": "action-show-rules",
                        kbd: "R",
                        manage_change: !0,
                        action: function(e) {
                            pinegrow.showCSSRules(e, null, !0)
                        }
                    }, {
                        label: Rt.isCollapsed(o) ? "Uncollapse" : "Collapse",
                        action: function(e) {
                            Rt.collapseElement(e, null)
                        }
                    }, {
                        label: "Add as Component",
                        "class": "action-add-comp",
                        kbd: "O",
                        action: function(e) {
                            g(e)
                        }
                    }, {
                        label: "Insert Lorem Ipsum",
                        action: function(e) {
                            willMakeChange(J, "Insert Lorem Ipsum to / " + getElementName(e));
                            var t = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus pulvinar faucibus neque, nec rhoncus nunc ultrices sit amet. Curabitur ac sagittis neque, vel egestas est. Aenean elementum, erat at aliquet hendrerit, elit nisl posuere tortor, id suscipit diam dui sed nisi. Morbi sollicitudin massa vel tortor consequat, eget semper nisl fringilla. Maecenas at hendrerit odio. Sed in mi eu quam suscipit bibendum quis at orci. Pellentesque fermentum nisl purus, et iaculis lectus pharetra sit amet.",
                                a = (e.html(), e.get(0).tagName.toLowerCase());
                            ["h1", "h2", "h3", "h4", "h5", "h6"].indexOf(a) >= 0 && (t = "Lorem ipsum dolor sit amet"), r(k).html() == e.html() ? e.html("") : e.html().length > 0 && (t = " " + t), e.append(t), didMakeChange(J, e)
                        }
                    }];
                    if (isApp() && x.push({
                            label: "Copy code",
                            "class": "action-copy-code",
                            action: function(e) {
                                var t = getElementPgNode(e);
                                t ? copyCodeToClipboard(t.toStringOriginal(!0, pinegrow.getFormatHtmlOptions())) : copyCodeToClipboard(e.get(0).outerHTML)
                            }
                        }), k) {
                        var _ = {
                            add: k.action_menu && k.action_menu.add ? k.action_menu.add : null,
                            on_add: k.action_menu && k.action_menu.on_add ? k.action_menu && k.action_menu.on_add : null,
                            actions: k.action_menu && k.action_menu.actions ? x.concat(k.action_menu.actions) : x
                        };
                        if (_) {
                            var D = e("<div/>", {
                                    "class": "btn-group"
                                }).html('<button type="button" class="btn btn-link btn-xs dropdown-toggle" data-toggle="dropdown">Actions <span class="caret"></span></button>                    <ul class="dropdown-menu" role="menu">                    </ul>').appendTo(S),
                                I = D.find("ul");
                            _.add && (e("<li/>", {
                                "class": "dropdown-header",
                                role: "presentation"
                            }).html("Insert").appendTo(I), e.each(_.add, function(t, a) {
                                var n = X.getTypeDefinition(a);
                                if (n) {
                                    e("<li/>", {
                                        "class": "add"
                                    }).html('<a href="#">' + n.name + "</a>").appendTo(I).data("add-def", n)
                                }
                            })), _.actions && (e("<li/>", {
                                "class": "dropdown-header",
                                role: "presentation"
                            }).html("Actions").appendTo(I), e.each(_.actions, function(t, a) {
                                var n = e("<li/>", {
                                    "class": "action"
                                }).html('<a href="#" class="' + (a.class ? a.class : "") + '">' + a.label + "</a>").appendTo(I).data("action", a);
                                a.kbd && crsaAddKbd(n.find(">a"), a.kbd)
                            })), I.find("a").on("click", function(t) {
                                t.preventDefault();
                                var a = e(t.delegateTarget).closest("li");
                                if (a.hasClass("add")) {
                                    var n = a.data("add-def");
                                    Ut(_, o, n, !1)
                                } else if (a.hasClass("action")) {
                                    var r = a.data("action");
                                    r.manage_change || willMakeChange(J, "Action - " + r.label), r.action(o), r.manage_change || didMakeChange(J, o)
                                }
                            }), D.find(".btn").button()
                        }
                    }
                    m && S.addClass("collapsed");
                    var F = null,
                        N = e("<i/>", {
                            "class": "fa fa-bars crsa-inline-menu-move"
                        }).appendTo(S);
                    o && o.is("body") && N.hide();
                    var O = !1,
                        M = null,
                        R = getElementPgNode(o);
                    R || N.on("mousedown", function(e) {
                        var t = new pgParserSourceProblem(R, o);
                        return R || t.add("element", getElementName(o), "change"), t.ok() ? (e.preventDefault(), e.stopImmediatePropagation(), void 0) : (showAlert(t.toString(), "Can't move this element"), void 0)
                    }), crsaIsInEdit() ? N.on("mousedown", function(e) {
                        crsaIsInEdit() && (showAlert("Go out of content editing mode before moving elements.", "Can't move during content editing"), e.preventDefault(), e.stopImmediatePropagation())
                    }) : N.draggable({
                        helper: function() {
                            var t = o.clone(!0).css("opacity", .5).css("min-width", 400).css("min-height", 200).css("transform", "scale(0.33, 0.33)").css("transform-origin", "0 0");
                            return e("body").append(t), t.get(0)
                        }
                    }).on("dragstart", function(t) {
                        e.fn.crsapages("clearUndoSetFlag"), F = getIframeOfElement(o), st = o.clone(!0, !0).removeClass("crsa-selected").removeClass("crsa-highlighted");
                        var a = R.clone();
                        a.mapIdsToDomElement(st.get(0)), willMakeChange(F, "Drag & Drop / " + getElementName(o)), getCrsaPageForIframe(F).undoSetFlag = !0, t.shiftKey ? O = !0 : (O = !1, M = o.attr("style"), o.hide()), S.hide(), nt.crsapages("showOverlays")
                    }).on("dragstop", function(t, a) {
                        nt.crsapages("showOverlays", !0);
                        var n = getIframeOfElement(st),
                            r = !1;
                        a.helper.remove();
                        var i = getElementPgNode(o),
                            l = getElementPgNode(st);
                        ot || (O = !1, r = !0, showAlert("Move elements only <b>within the page</b> or <b>from page to page</b>. If you want to use the tree, move tree elements withing the tree.", "Invalid drop target")), O || (o.show(), M ? o.attr("style", M) : o.removeAttr("style")), r || l && pgInsertNodeAtDOMElementLocation(l, st) || (showAlert("The element can't be placed here because the destination is a dynamic element, created by Javascript code.", "Can't put it here"), r = !0), r || (F.get(0) != n.get(0) ? (Rt.updateStructureAndWireAllElemets(F), Lt(n), didMakeChange(F)) : O || (o.remove(), i.remove()), d(st), ot && (Rt.updateStructureAndWireAllElemets(n), didMakeChange(n, st, st.parent()), zt(st, getCrsaPageForIframe(F), getCrsaPageForIframe(n)))), ot = null, e.fn.crsapages("clearUndoSetFlag"), st = null
                    }).on("drag", function(e) {
                        t(e)
                    }), u(S, o, i), rt = S;
                    var L;
                    rt.on("mousewheel", function() {
                        var e = rt.get(0);
                        e.classList.contains("crsa-disable-hover") || e.classList.add("crsa-disable-hover"), L = setTimeout(function() {
                            e.classList.remove("crsa-disable-hover")
                        }, 250)
                    }).on("mouseenter.crsa", function() {
                        rt.stop().animate({
                            opacity: 1
                        }, 250)
                    }).on("mouseleave.crsa", function() {
                        rt.stop().animate({
                            opacity: .25
                        }, 250)
                    });
                    var k = getType(o);
                    k && k.on_selected && k.on_selected(o), n.show("se 2")
                } else ct = null;
                Rt.showSelectedInsertFactory(o), Rt.showProperties(ct, null, k), e("body").trigger("crsa-element-selected", ct), J && o && getCrsaPageForIframe(J).elementWasSelected(o)
            }
        }

        function u(e, t, a) {
            var n = nt.crsapages("getZoom"),
                r = a.position(),
                o = a.parent().position();
            r.left += o.left, r.top += o.top;
            var i = t.offset(),
                l = i.left * n + r.left,
                s = i.top * n + r.top - a.contents().scrollTop() * n,
                c = e.outerHeight(),
                d = e.outerWidth();
            return s -= c, 20 > s && (s = (i.top + t.outerHeight()) * n + r.top - a.contents().scrollTop() * n, s > 100 ? s = 100 : 20 > s && (s = -100)), l + d > a.width() * n - 100 && e.find(".dropdown-menu").addClass("pull-right"), l + d > a.width() * n && (l = a.width() * n - d), e.css("left", l + "px").css("top", s + "px"), void 0;
            var c, s
        }

        function p() {
            rt && ct && "element" == ct.type && u(rt, ct.data, J)
        }

        function f(t, a, n) {
            n || (n = X.getAllTypes(a));
            var r = null;
            return e.each(n, function(e, a) {
                return a.action_menu && a.action_menu.add && a.action_menu.add.indexOf(t.type) >= 0 ? (r = a.action_menu, !1) : void 0
            }), r
        }

        function g(t, a) {
            if (t.is("body") || t.find("body").length || 0 == t.closest("body").length) return showAlert("BODY and HEAD elements can't be added as components", "Notice"), void 0;
            a || e.each(X.frameworks, function(e, t) {
                return t.user_lib ? (a = t, !1) : void 0
            });
            var n;
            a || (a = new PgFramework("userlib" + Math.floor(1e5 * Math.random()), "User Lib"), a.user_lib = !0, pinegrow.addFramework(a), X.addFramework(a)), a.lib_sections.length > 0 ? n = a.lib_sections[0] : (n = new PgFrameworkLibSection(a.key + "_components", "Components"), a.addLibSection(n));
            var r = a.getAutoId("comp"),
                o = new PgComponentType(r.type, "Comp " + r.count);
            m(t, o, X, !0), a.addComponentType(o), n.addComponentType(o), a.changed = !0, pinegrow.frameworksChanged(), crsaQuickMessage("Component was added to LIB.")
        }

        function m(t, a, n, r) {
            var o = n.getAllTypes(t),
                i = getElementPgNode(t);
            i ? a.code = i.toStringOriginal(!0, pinegrow.getFormatHtmlOptions()) : (a.code = t.get(0).outerHTML, a.code = removeCrsaClassesFromHtml(a.code.replace(/\s*data\-pg\-[a-z\-]+="[^"]*"/g, ""))), a.parent_selector = null, a.preview = null;
            var l = !r;
            e.each(o, function(e, t) {
                return t.name && !l && (l = !0, a.name += " / " + t.name), t.parent_selector ? (a.parent_selector = t.parent_selector, !1) : void 0
            })
        }

        function h(t, a, n) {
            var r = (new Date).getTime(),
                o = (e("#crsa-tree > div.tree-container"), t.parent());
            t.remove(), d(null), Rt.updateStructureAndWireAllElemets(a, o), c(null), n && n();
            (new Date).getTime() - r
        }

        function v(t) {
            if (t.is("script") || t.find("script").length > 0, t.is("body")) return showAlert("<p>Use page code view to edit code of the <b>body</b> element (<b>Page -&gt; Edit code</b> or <b>CMD + E</b>).</p>", "Can't edit code here"), void 0;
            var a = getElementPgNode(t),
                n = new pgParserSourceProblem(a, t);
            if (a || n.add("element", getElementName(t), "find"), !n.ok()) return showAlert(n.toString(), "Can't edit this element"), void 0;
            var r = !1,
                o = t.parent();
            willMakeChange(J, "Edit element code / " + getElementName(t));
            var i, l = showCodeEditor("text/html", "Edit element code", "edit-element-html", function() {
                    p(s.getDoc().getValue()) && (Rt.setNeedsUpdateDelayed(o), didMakeChange(J))
                }, function() {
                    Rt.setNeedsUpdate(!0, o)
                }, function() {
                    r && (p(i), Rt.setNeedsUpdate(!0, o), didMakeChange(J)), getCrsaPageForIframe(J).undoStack.remove()
                }),
                s = l.mirror,
                c = l.dialog,
                d = c.find(".modal-footer label"),
                u = (t.get(0), !1),
                p = function(n) {
                    if (u) return !1;
                    n = e.trim(n), r = !0;
                    try {
                        var o = pgCreateNodeFromHtml(n);
                        pinegrow.httpServer.setCurrentRequestContext(X.url, X.sourceNode);
                        var i = o.toStringWithIds(!0, pinegrow.getFormatHtmlOptions(), function(e, t, a) {
                            return "node" == a && "script" == e.tagName ? '<script data-pg-id="' + e.getId() + '"></script>' : pinegrow.httpServer.createProxyUrlNodeOutputFilter(e, t, a)
                        });
                        console.log(i);
                        var l = e(getIframeDocument(J.get(0)).createElement("div")).append(i).contents();
                        if (1 != l.length) throw "Syntax error";
                        return t.replaceWith(l), ct && "element" == ct.type && ct.data.get(0) == t.get(0) && (ct = getObjectFromElement(l)), t = l, a.replaceWith(o), a.remove(), a = o, setDialogNotice(c, ""), d.show(), !0
                    } catch (s) {
                        d.hide(), setDialogNotice(c, "You can only edit one HTML element here!", "text-danger")
                    }
                    return !1
                };
            i = a.toStringOriginal(!0, pinegrow.getFormatHtmlOptions());
            var f = removeCrsaClassesFromHtml(i);
            u = !0, s.getDoc().setValue(f), u = !1, s.getDoc().clearHistory();
            c.find(".modal-body>div");
            return
        }

        function w(e, t, a) {
            var n = e.clone();
            removeCrsaClasses(n);
            var r = e.css("opacity"),
                o = n.attr("style");
            n.css("opacity", "0"), null == r && (r = 1), n.insertAfter(e), Rt.isCollapsed(e) && n.data("crsa-tree-collapsed", n.children().length > 0), n.animate({
                opacity: r
            }, 100, function() {
                o ? n.attr("style", o) : n.removeAttr("style"), a && a(n)
            })
        }

        function b(e, t) {
            e.replaceWith(e.contents()), Rt.updateStructureAndWireAllElemets(t), E(t)
        }

        function y(e, t, a, n, r, o) {
            return "element" == e.type ? getElementName(e.data, t, a, n, r, o) : "rule" == e.type ? getRuleName(e.data) : void 0
        }

        function C(t, a, n) {
            var r = e("#crsa-rules-out .panel-content"),
                o = e("#crsa-rules");
            yt.setReferenceElement(t, !0), yt.setShowOnlyClasses(!1, !0), "undefined" != typeof n && yt.setOnlyActive(n, !1), yt.setFilter(a ? a : null), yt.filter_set_in_props_mode = a ? !0 : !1, yt.showListPanel(!1);
            var i = e("#tab3");
            i.hasClass("active") || (0 == r.find("#crsa-rules").length && r.append(o), e("#crsa-rules-out").data("panel").show()), yt.resizeRulesList()
        }

        function k(t, a) {
            var n;
            if (n = _t.showOnlyClassesInProperties ? e.fn.crsacss("getClassesForElement", a) : e.fn.crsacss("getRulesForElement", a, !0, !0)) {
                var r = e("<ul/>", {
                    "class": "clearfix"
                }).appendTo(t);
                e.each(n, function(t, a) {
                    if ("object" == typeof a && (a = a.selector ? a.selector : null), a) {
                        var n = null != getClassFromSelector(a),
                            o = e("<li/>", {
                                "class": "crsa-input-rule" + (n ? " class" : "")
                            }).appendTo(r).data("class", a).html(a);
                        if (n) {
                            e("<i/>", {
                                "class": "fa fa-times crsa-input-rule-remove"
                            }).appendTo(o)
                        }
                    }
                })
            }
            var o = e("<li/>", {
                "class": "link crsa-input-add-class"
            }).appendTo(r).html('<a href="#">+ Add class</a>');
            o.find("a").on("click", function(t) {
                t.preventDefault(), i(e(t.delegateTarget))
            });
            e("<a/>", {
                "class": "cm-prop-addrule",
                href: "#"
            }).html("CSS Rules...").appendTo(t).on("click", function(e) {
                C(a), e.preventDefault()
            });
            t.find(".crsa-input-rule-remove").on("click", function(t) {
                var a = e(t.delegateTarget),
                    n = a.parent(),
                    r = n.data("class");
                e("#crsa-rules").trigger("crsa-cm-class-remove", r), t.preventDefault(), t.stopPropagation()
            });
            var a = (e("#crsa-rules-out .panel-content"), ct.data);
            t.find(".crsa-input-rule").on("click", function(t) {
                var n = e(t.delegateTarget),
                    r = n.data("class");
                pinegrow.showCSSRules(a, r), t.preventDefault()
            });
            var i = function(t) {
                var a = t.offset(),
                    n = a.left > e(window).width() / 2 ? "left" : "right",
                    r = getUniqueId();
                if (t.data("popover-active")) return t.popover("destroy"), t.data("popover-active", null), void 0; {
                    var o = function(e) {
                        setTimeout(function() {
                            e.closest(".popover").remove()
                        }, 500)
                    };
                    t.popover({
                        html: !0,
                        placement: n,
                        trigger: "manual",
                        title: "Assign CSS class",
                        container: "body",
                        content: '<form id="' + r + '"><div class="form-group"><input class="form-control" placeholder="class-name" style="margin-bottom:8px;"/><p class="help-block"></p></p><button class="ok assign btn">Assign</button><button class="ok show-css btn btn-link">Show list...</button><button class="closeit btn btn-link">Cancel</button></div></form>'
                    }).on("shown.bs.popover", function() {
                        var a = e("#" + r),
                            n = a.find("input").focus(),
                            i = a,
                            l = a.find("button.assign"),
                            s = a.find("button.show-css"),
                            c = (a.find("p.help-block").hide(), a.find("button.closeit")),
                            d = function() {
                                var r = e.trim(n.val());
                                return r && 0 != r.length ? (r = r.replace(".", ""), e("#crsa-rules").trigger("crsa-cm-class-add", r), t.popover("hide"), o(a), void 0) : (a.addClass("has-error"), void 0)
                            };
                        i.on("submit", function(e) {
                            e.preventDefault(), d(e)
                        }), l.on("click", function(e) {
                            e.preventDefault(), d(e)
                        }), s.on("click", function(e) {
                            e.preventDefault(), C(t), t.popover("hide"), o(a)
                        }), c.on("click", function(e) {
                            t.popover("hide"), e.preventDefault(), o(a)
                        })
                    }).on("hidden.bs.popover", function() {
                        setTimeout(function() {
                            t.popover("destroy").data("popover-active", null)
                        }, 10)
                    })
                }
                t.popover("show").data("popover-active", !0)
            }
        }

        function P(e) {
            var t = getType(e, !1);
            return t.inner_container ? e.find(t.inner_container) : e
        }

        function S(e) {
            window.console && window.console.log && window.console.log("CRSA - " + e)
        }

        function T(t) {
            var a = e("#crsa-left-plane .nav-tabs");
            switch (t) {
                case "lib":
                    a.find("li:eq(0) a").tab("show");
                    break;
                case "prop":
                    a.find("li:eq(1) a").tab("show");
                    break;
                case "css":
                    a.find("li:eq(2) a").tab("show");
                    break;
                case "vars":
                    a.find("li:eq(3) a").tab("show")
            }
        }

        function E(e) {
            e || (e = J)
        }

        function A() {
            var t = e(window),
                a = t.width(),
                n = t.height(),
                r = nt.offset(),
                o = n - r.top;
            nt.css("height", o + "px");
            var i = e("#crsa-left-plane"),
                l = e("#crsa-tree"),
                s = e("#textedit"),
                c = e("#textedit_bar"),
                d = s.is(":visible");
            if (d) {
                var u = s.offset(),
                    p = n - u.top,
                    f = (a - l.width() - (i.width() + i.offset().left)) / 2;
                localStorage.crsaCodeEditWidth && (f = parseInt(localStorage.crsaCodeEditWidth), 200 > f && (f = 200));
                var g = a - l.width() - 0 - f;
                20 > g && (f -= 20 - g, g = 20), s.css("height", p + "px").css("width", f + "px").css("left", g + "px"), c.css("left", g + "px").show(); {
                    c.offset()
                }
                c.css("width", f + "px"), nt.crsapages("centerPages", i.offset().left + i.width() + 10, 10 + l.width() + f), setTimeout(function() {
                    Y.editorSizeChanged()
                }, 100)
            } else i.show(), l.show(), c.hide(), nt.crsapages("centerPages", i.offset().left + i.width() + 10, a - l.offset().left + 10);
            var m = i.offset(),
                h = n - m.top;
            i.css("height", h + "px");
            var v = e("#crsa-rules-out");
            v.data("panel").autoSize();
            var w = i.find(".tab-content"),
                b = w.position(),
                y = h - b.top;
            w.css("height", y + "px");
            var C = l.offset(),
                k = n - C.top;
            l.css("height", k + "px"), e.fn.crsapages("canvasResized")
        }

        function x() {
            _(), alert("Saving files is disabled in trial version. Use Page -> Edit code to see or copy the code.")
        }

        function _() {
            if (Ft) {
                var t = require("fs"),
                    a = Ot + "/datapg.comm";
                try {
                    t.unlinkSync(a)
                } catch (n) {}
                console.log("__PG_UPGRADE__"), Mt && clearInterval(Mt), Mt = setInterval(function() {
                    try {
                        var n = t.readFileSync(a, {
                            encoding: "utf8"
                        });
                        n && "108" == n && (crsaStorage.setValue("crsaBig", "true"), e("#crsa-topbar .trial").hide(), alert("Thanks for upgrading the app!")), t.unlinkSync(a)
                    } catch (r) {
                        console.log("waiting for " + a)
                    }
                }, 1e3)
            } else Q();
            return
        }

        function D() {
            var t = '<p><a target="_blank" class="link" href="http://pinegrow.com">Pinegrow Web Designer</a> &copy; Humane technologies llc.</p> <p>Designed &amp; developed by <a href="mailto:matjaz@humane-tehnologije.si">Matjaz Trontelj</a>.</p> <p>Pinegrow uses the following open source projects:</p> <ul> <li><a target="_blank" class="link" href="https://github.com/rogerwang/node-webkit">Node-Webkit</a> (Node.js + Chromium)</li> <li><a target="_blank" class="link" href="https://github.com/mjsarfatti/nestedSortable">nestedSortable</a> for jQuery UI</li> <li><a target="_blank" class="link" href="http://bgrins.github.io/spectrum/">Spectrum</a> color picker</li> <li><a target="_blank" class="link" href="http://codemirror.net/">CodeMirror editor</a></li> <li><a target="_blank" class="link" href="http://fontawesome.io/">Font Awesome</a></li> <li><a target="_blank" class="link" href="http://getbootstrap.com/">Twitter Bootstrap</a></li> <li><a target="_blank" class="link" href="http://jquery.com">jQuery and jQuery UI</a></li> <li><a target="_blank" class="link" href="http://lesscss.org/">Less.js</a></li> <li><a target="_blank" class="link" href="https://github.com/Stuk/jszip">jsZip</a></li> </ul>',
                a = makeModalDialog("About Pinegrow Web Designer - " + crsaGetVersionName(), "Close", null, t);
            isApp() && a.find("a.link").on("click", function(t) {
                t.preventDefault();
                var a = require("nw.gui"),
                    n = e(t.delegateTarget).attr("href");
                a.Shell.openExternal(n)
            })
        }

        function I() {
            var t = '<p>Feel free to contact us at <a href="mailto:info@pinegrow.com">info@pinegrow.com</a>.</p>        <p>When reporting a bug please include screenshots and sample files/code that will help us to investigate the problem.</p>        <p>And check out <a class="link" target="_blank" href="http://pinegrow.com/index.html#support">Support section</a> of our website.</p>',
                a = makeModalDialog("Contact us", "Close", null, t);
            isApp() && a.find("a.link").on("click", function(t) {
                t.preventDefault();
                var a = require("nw.gui"),
                    n = e(t.delegateTarget).attr("href");
                a.Shell.openExternal(n)
            })
        }

        function F(t, a) {
            var n = '<p>Download Pinegrow desktop app for Windows and Mac to <b>open and save your local files directly</b>.</p><p><a href="http://pinegrow.com" target="_blank">Download Pinegrow for Mac, Windows and Linux</a></p>';
            t && (n = t + n);
            var r = makeModalDialog("Download Pinegrow Web Designer" + (a ? " " + a : ""), "Close", null, n);
            isApp() && r.find("a.link").on("click", function(t) {
                t.preventDefault();
                var a = require("nw.gui"),
                    n = e(t.delegateTarget).attr("href");
                a.Shell.openExternal(n)
            })
        }

        function N() {
            return !0
        }

        function O(t) {
            var a, n = null;
            ! function(r) {
                e(t.get(0).contentWindow).off("scroll.crsa").on("scroll.crsa", function() {
                    if (t.get(0) == J.get(0) && (p(), rt)) {
                        var e = rt.get(0);
                        clearTimeout(a), e.classList.contains("crsa-disable-hover") || e.classList.add("crsa-disable-hover"), a = setTimeout(function() {
                            e.classList.remove("crsa-disable-hover")
                        }, 250)
                    }
                    n && 0 != n.length || (n = r.$page.find(".crsa-hl-name")), n.is(":visible") && c(null)
                }).off("click.crsa").on("click.crsa", function(t) {
                    "HTML" == t.target.tagName && (t.preventDefault(), e(r.getBody()).trigger("click"))
                });
                var o = r.getDocument();
                e(o).off("keydown.crsa").on("keydown.crsa", function(e) {
                    return Rt.processKeydownEvent(e)
                }), o.removeEventListener("click", M), o.addEventListener("click", M, !0, !1), o.removeEventListener("dblclick", j), o.addEventListener("dblclick", j, !0, !1), o.removeEventListener("input", q), o.addEventListener("input", q, !0, !1), o.removeEventListener("mouseover", R), o.addEventListener("mouseover", R, !0, !1), o.removeEventListener("mouseout", L), o.addEventListener("mouseout", L, !0, !1), o.removeEventListener("mouseenter", U), o.addEventListener("mouseenter", U, !0, !1), o.removeEventListener("mouseleave", $), o.addEventListener("mouseleave", $, !0, !1), t.get(0).contentWindow.ondragover = function(e) {
                    return e.preventDefault(), !1
                }, t.get(0).contentWindow.ondrop = function(e) {
                    return e.preventDefault(), !1
                }
            }(getCrsaPageForIframe(t))
        }

        function M(t) {
            if (!pinegrow.getIgnoreClicks()) {
                {
                    var a = t.target,
                        n = e(a);
                    getCrsaPageOfElement(n)
                }
                if (Ct) return !0;
                if (t.shiftKey) return !0;
                if (!getType(n)) return !0;
                if (n.attr("data-pg-allow-click") && n.get(0).href) {
                    var r = ht.getOriginalUrl(n.get(0).href);
                    return pinegrow.openPage(r), t.stopPropagation(), t.preventDefault(), !1
                }
                d(n), t.stopPropagation(), t.preventDefault(), Pt.trigger("click")
            }
        }

        function R(t) {
            if (Ct) return !0;
            if (!st) {
                var a = t.target,
                    n = e(a);
                if (!getType(n)) return !0;
                c(n), t.stopPropagation(), t.preventDefault()
            }
        }

        function L(t) {
            if (Ct) return !0;
            if (!st) {
                var a = t.target,
                    n = e(a);
                if (!getType(n)) return !0;
                c(null), t.stopPropagation(), t.preventDefault()
            }
        }

        function U(t) {
            if (Ct) return !0;
            if (!st) {
                var a = t.target,
                    n = e(a);
                if (!getType(n)) return !0;
                var r = ct && "element" == ct.type && ct.data.get(0) == n.get(0);
                r && rt && rt.stop().animate({
                    opacity: 1
                }, 250)
            }
        }

        function $(t) {
            if (Ct) return !0;
            if (!st) {
                var a = t.target,
                    n = e(a);
                if (!getType(n)) return !0;
                var r = ct && "element" == ct.type && ct.data.get(0) == n.get(0);
                r && rt && rt.stop().animate({
                    opacity: .25
                }, 250)
            }
        }

        function j(t) {
            if (Ct) return !0;
            var a = t.target,
                n = e(a);
            if (!getType(n)) return !0;
            var r = getCrsaPageOfElement(n);
            K.setSelectedPage(r.$iframe), K.startEdit(e(".crsa-edit-toolbar"), n), t.preventDefault(), t.stopPropagation()
        }

        function q(t) {
            if (Ct) return !0;
            var a = t.target,
                n = e(a);
            n.is("input") && setTimeout(function() {
                showNotice("If you want to edit field's initial value do that in PROP panel.", "Notice", "edit-field-value")
            }, 100)
        }

        function W() {
            if (crsaStorage.getValue("activatedDate")) {
                var e = 7,
                    t = 86400,
                    a = parseInt(crsaStorage.getValue("activatedDate")),
                    n = Math.floor(((new Date).getTime() - a) / 1e3);
                crsaStorage.hasValue("trialVersion") && crsaStorage.getValue("trialVersion") != crsaGetVersion() && n > 1 * t && (a = (new Date).getTime() - 0 * e * t * 1e3, n = Math.floor(((new Date).getTime() - a) / 1e3), crsaStorage.setValue("activatedDate", a), crsaStorage.setValue("trialVersion", crsaGetVersion));
                var r = e * t;
                return n > r ? 0 : r - n
            }
            return null
        }

        function V() {
            var e = W();
            if (null === e) return "not started yet";
            if (0 === e) return "expired";
            var t = Math.round(e / 86400);
            return t > 0 ? 1 == t ? "1 day left" : t + " days left" : "less than 1 day left"
        }

        function H(e) {
            pinegrow.getComponent("whatsnew", function(t) {
                var a = t.html;
                showNotice(a, "Welcome to Pinegrow " + crsaGetVersion(), "new_version_" + crsaGetVersion(), null, !0, e)
            })
        }

        function B() {
            pinegrow.getComponent("settings", function(e) {
                var t = e.html,
                    a = showAlert(t, "Pinegrow Settings", "Cancel", "Save", function() {
                        z(u)
                    }, function() {
                        pinegrow.setSetting("backup", n.is(":checked") ? "1" : "0"), pinegrow.setSetting("show-placeholders", o.is(":checked") ? "1" : "0"), pinegrow.setSetting("auto-reloading", i.is(":checked") ? "1" : "0"), pinegrow.setSetting("code-theme-cm", l.val()), pinegrow.setSetting("code-editor", s.val()), pinegrow.setSetting("html-indent-size", c.val()), pinegrow.setSetting("ui-zoom", d.val()), pinegrow.setSetting("webserver-port", p.val())
                    }),
                    n = a.find(".backup"),
                    r = pinegrow.getSetting("backup", "1");
                "1" == r && n.attr("checked", "checked");
                var o = a.find(".show-placeholders");
                r = pinegrow.getSetting("show-placeholders", "1"), "1" == r && o.attr("checked", "checked");
                var i = a.find(".auto-reloading");
                r = pinegrow.getSetting("auto-reloading", "1"), "1" == r && i.attr("checked", "checked");
                var l = a.find(".code-theme");
                r = pinegrow.getSetting("code-theme-cm", "default"), l.val(r);
                var s = a.find(".code-editor");
                r = pinegrow.getSetting("code-editor", ""), s.val(r);
                var c = a.find(".html-indent-size");
                r = pinegrow.getSetting("html-indent-size", "4"), c.val(r);
                var d = a.find(".ui-zoom");
                r = pinegrow.getSetting("ui-zoom", "0"), d.val(r);
                var u = r;
                d.on("change", function() {
                    z(d.val())
                });
                var p = a.find(".webserver-port");
                r = pinegrow.getSetting("webserver-port", "40000"), p.val(r), p.on("change", function() {
                    alert("Save settings and restart Pinegrow to activate the change.")
                }), i.on("change", function() {
                    i.is(":checked") && alert("Save settings and restart Pinegrow to activate the change.")
                })
            })
        }

        function z(t) {
            if (isApp()) {
                t = parseFloat(t); {
                    var a = require("nw.gui");
                    a.Window.get().zoomLevel = t
                }
                0 > t ? e("body").addClass("zoom") : e("body").removeClass("zoom")
            }
        }

        function Q() {
            pinegrow.getComponent("dialog-intro", function(t) {
                var a = t.html,
                    n = e(".intro");
                0 == n.length ? (n = makeModalDialogWhole(a).addClass("intro"), n.on("hidden.bs.modal", function() {
                    setTimeout(function() {
                        n.remove()
                    }, 500)
                })) : n.modal("show");
                var r = n.find(".intro-section-trial-active"),
                    o = n.find(".intro-section-3trial-active");
                o.find("p.why").hide(), o.find("h3 a").on("click", function(e) {
                    e.preventDefault(), o.find("p.why").toggle(), gaSendPageView("trialInfo")
                });
                var i = function() {
                        var e = o.find(".trial-days-left");
                        e.html(V())
                    },
                    l = n.find(".modal-header .close"),
                    s = !0;
                n.find(".modal-footer .btn").on("click", function(e) {
                    e.preventDefault(), s ? (n.modal("hide"), H()) : null === W() ? alert("Please activate the trial first. It'll only take a minute.") : alert("Trial has expired. Get the full version to continue using Pinegrow.")
                });
                var c = n.find(".intro-section-trial1"),
                    d = c.find("form"),
                    u = c.find("#trialEmail"),
                    p = n.find(".intro-section-trial2"),
                    f = p.find("form"),
                    g = p.find("#trialCode"),
                    m = c.find(".btn-link"),
                    h = p.find(".btn-link"),
                    v = n.find(".intro-section-buy"),
                    w = v.find("form"),
                    b = w.find("#buyEmail"),
                    y = w.find("#buySerial"),
                    C = n.find(".intro-section-buy-done"),
                    k = function(e, t, a) {
                        a || (a = "has-error");
                        var n = e.parent().find("p.text-danger");
                        t ? (e.find(".form-group").addClass(a), n.html(t).show(), e.find("button i").hide().parent().removeAttr("disabled")) : (e.find(".form-group").removeClass("has-error has-success"), n.html("").hide(), e.find("button i").hide().parent().removeAttr("disabled"))
                    },
                    P = function(e) {
                        e ? l.show() : l.hide(), s = e
                    };
                k(d), k(f), k(w), C.hide(), crsaStorage.getValue("userEmail") && u.val(crsaStorage.getValue("userEmail")), P(!0), crsaIsBig() ? (r.hide(), o.hide(), c.hide(), p.hide(), v.hide(), C.show()) : crsaIsEmailActivated() ? (i(), N() ? (o.show(), r.hide()) : (r.show(), o.hide()), c.hide(), p.hide(), 0 === W() && P(!1)) : (P(!1), r.hide(), o.hide(), p.hide(), m.on("click", function(t) {
                    t.preventDefault();
                    var a = e.trim(u.val());
                    a && a.indexOf("@") >= 0 ? (crsaStorage.setValue("userEmail", a), c.hide(), p.show()) : k(d, "Please enter your email address. Enter the same email you used to get the activation key.")
                }), h.on("click", function(e) {
                    e.preventDefault(), p.hide(), c.show()
                }));
                var S = 'Email could not be registered. Please check if your email and key are correct. <a href="mailto:info@pinegrow.com">Contact us</a> if the problem persists, we\'ll help you out.';
                d.on("submit", function(t) {
                    k(d, null), t.preventDefault();
                    var a = e.trim(u.val());
                    if (gaSendPageView("RegisterEmail/Step1"), !a || a.indexOf("@") < 0) k(d, "Please enter your email address.");
                    else {
                        var n = d.find("button i");
                        n.show(), n.parent().attr("disabled", "disabled"); {
                            require("request")
                        }
                        jQuery.ajax({
                            type: "POST",
                            url: "http://focus.islate.si/cob/callSmarty/Course/externalActivateEmail",
                            data: {
                                email: a,
                                aaashort: !0
                            }
                        }).done(function(e) {
                            "OK" == e.status ? (crsaStorage.setValue("userEmail", a), k(d, null), c.hide(), p.show(), mixpanel && (mixpanel.identify(a), mixpanel.people.set({
                                $email: a,
                                $name: a,
                                trial_started: !1,
                                trial_date: new Date,
                                app_run: 0
                            })), alert("The activation key was send to your email address. Please check your inbox and your spam folder. Enter the key under 1. START TRIAL.")) : k(d, S)
                        }).fail(function(e, t) {
                            k(d, S + " (" + t + ")")
                        })
                    }
                });
                var T = 'Invalid activation code. Please check if your email and activation code are correct. <a href="mailto:info@pinegrow.com">Contact us</a> if the problem persists, we\'ll help you out.';
                f.on("submit", function(t) {
                    k(f, null), t.preventDefault();
                    var a = e.trim(g.val()),
                        n = crsaStorage.getValue("userEmail") ? crsaStorage.getValue("userEmail") : "unknown";
                    a ? crsaCheckMe(n, a) ? (crsaStorage.setValue("activationCode", a), crsaStorage.setValue("activatedDate", (new Date).getTime()), crsaStorage.setValue("trialVersion", crsaGetVersion()), i(), k(f, "Activated! Thanks.", "has-success"), gaSendPageView("RegisterEmail/Activated"), o.show(), p.hide(), P(!0), mixpanel && (mixpanel.identify(n), mixpanel.people.set({
                        $email: n,
                        $name: n,
                        trial_started: !0,
                        trial_start_date: new Date,
                        app_run: 1
                    })), alert("Your 7 day trial was activated. Use Page -> Edit Code to check out the code. Upgrade the app to save files directly.")) : k(f, T) : k(f, "Please enter the activation code.")
                });
                var E = 'Pinegrow could not be upgraded. Please check if your email and serial number are correct. <a href="mailto:info@pinegrow.com">Contact us</a> if the problem persists, we\'ll help you out.',
                    A = function(t) {
                        crsaStorage.setValue("crsaBig", !0);
                        var a = crsaStorage.getValue("userEmail");
                        a && mixpanel && (mixpanel.identify(a), mixpanel.people.set({
                            upgraded: !0,
                            upgraded_date: new Date,
                            license_email: t
                        })), e("ul.trial li").hide(), gaSendPageView("BuyScreen/AppActivated"), k(w), v.hide(), C.show(), c.hide(), p.hide(), r.hide(), o.hide(), P(!0)
                    };
                w.find("button").on("click", function(e) {
                    if (e.shiftKey) {
                        e.preventDefault();
                        var t = crsaStorage.getValue("manualToken");
                        t || (t = "MC" + Math.ceil(1e4 * Math.random()), crsaStorage.setValue("manualToken", t)), alert("Activation token is " + t)
                    }
                }), w.on("submit", function(t) {
                    k(w), t.preventDefault();
                    var a = e.trim(b.val()),
                        n = e.trim(y.val());
                    if (a && n) {
                        crsaCheckMe(n, "", "matjaz@pllop.com" == a);
                        var r = crsaStorage.getValue("manualToken");
                        if (r && crsaCheckMe(r, n, "matjaz@pllop.com" == a)) A(a);
                        else {
                            var o = w.find("button i");
                            o.show(), o.parent().attr("disabled", "disabled"); {
                                require("request")
                            }
                            jQuery.ajax({
                                type: "POST",
                                url: "http://shop.pinegrow.com/cob/callSmarty/Course/externalActivateProduct",
                                data: {
                                    email: a,
                                    serial: n
                                }
                            }).done(function(e) {
                                "OK" == e.status ? A(a) : k(w, E)
                            }).fail(function(e, t, a) {
                                k(w, E + " (" + t + ")"), console.log(e, t, a)
                            })
                        }
                    } else k(w, "Please fill out both fields: email and serial number.")
                }), isApp() && n.find("section a").on("click", function(t) {
                    var a = e(t.delegateTarget).attr("href");
                    if (a) {
                        t.preventDefault();
                        var n = require("nw.gui"),
                            a = e(t.delegateTarget).attr("href");
                        a.indexOf("paddle") >= 0 && gaSendPageView("paddle"), n.Shell.openExternal(a)
                    }
                })
            })
        }
        e.fn.crsa = function(t) {
            return Rt[t] ? Rt[t].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof t && t ? (e.error("Method " + t + " does not exist on jQuery.crsa"), void 0) : Rt.init.apply(this, arguments)
        };
        var G, K = null,
            Y = null,
            Z = null,
            J = null,
            X = null,
            et = !1,
            tt = null,
            at = null,
            nt = null,
            rt = null,
            ot = null,
            it = null,
            lt = !1,
            st = null,
            ct = null,
            dt = null,
            ut = null,
            pt = !1,
            ft = null;
        window.pg_is_beta = !1;
        var gt, mt, ht, vt = !1,
            wt = "__EMPTY__",
            K = (new less.Parser, new CrsaEditor),
            bt = !0,
            yt = null,
            Ct = !1,
            kt = null,
            Pt = e("body"),
            St = null,
            Tt = [],
            Et = null,
            At = null,
            xt = null,
            _t = null,
            Dt = null,
            It = null,
            Ft = !1,
            Nt = null,
            Ot = null,
            Mt = null,
            Rt = {
                init: function(t) {
                    var a;
                    isApp() ? (console.log("Running as standalone app..."), a = require("nw.gui"), process.on("uncaughtException", function(e) {
                        console.log("node exception " + e)
                    }), Ot = a.App.dataPath, e.each(a.App.argv, function(e, t) {
                        t.indexOf("--pg-home-dir") >= 0 && (Nt = t.replace("--pg-home-dir=", ""), Ft = !0, console.log("Nice, I'm a Mac App!"))
                    })) : console.log("Running as web app..."), navigator.platform.indexOf("Win") >= 0 && (vt = !0), G = e.extend({}, e.fn.crsa.defaults, t), _t = G.custom_logic ? G.custom_logic : new PgCustomLogic, G.templates && e.each(G.templates, function(e, t) {
                        var a = new CrsaProject;
                        a.fromSimpleTemplate(t), Tt.push(a)
                    });
                    var n = [];
                    if (e.each(e.fn.crsa.defaults.types, function(e, t) {
                            n.push(t)
                        }), n.sort(function(e, t) {
                            return e.priority == t.priority ? 0 : e.priority < t.priority ? -1 : 1
                        }), e.fn.crsa.defaults.types = {}, e.each(n, function(t, a) {
                            e.fn.crsa.defaults.types[a.type] = a
                        }), Qt(), $trial = e("#crsa-topbar .trial"), isApp() ? crsaIsBig() && $trial.hide() : $trial.html('<li><span>You\'re playing in the online playground.</span> <a href="#">Download Mac / Windows app for more.</a></li>'), $trial.find("a").on("click", function(e) {
                            isApp() ? Q() : F(), e.preventDefault()
                        }), window.pinegrow = new Pinegrow, Y = new CrsaCodeEdit, mt = new jt, It = new pgRecentFiles, isApp()) try {
                        ht = new CrsaHttpServer, pinegrow.httpServer = ht, console.log("Internal http server running on " + ht.url)
                    } catch (o) {
                        console.log("Could not start internal http server: " + o)
                    }
                    if (e("body").trigger("pinegrow-ready", pinegrow), isApp() && pinegrow.loadAllFrameworksFromFile(), crsaAddKbd(e(".menu-file-save"), "CMD S"), crsaAddKbd(e(".menu-file-save-as"), "SHIFT CMD S"), vt || crsaAddKbd(e(".menu-file-save-all"), "ALT CMD S"), isApp()) {
                        e(".menu-project-divider").remove(), e(".menu-file-save-project").remove(), e(".menu-file-load-project").remove(), e(".menu-file-download").remove(), crsaIsBig() || e(".menu-dev-tools").remove();
                        var i = function() {
                            crsaCheckForNewVersion(function(t) {
                                if (t) {
                                    var a = e(".version-info").html("");
                                    a.append("<h4>update is available for download</h4>"), a.append("<p>" + t.desc + "</p>"), a.append('<a href="' + t.url + '">Learn more &amp; download</a>'), a.find("a").on("click", function(t) {
                                        t.preventDefault();
                                        var a = require("nw.gui"),
                                            n = e(t.delegateTarget).attr("href");
                                        a.Shell.openExternal(n)
                                    }), a = e("#crsa-topbar .trial li");
                                    var n = e('<a href="http://pinegrow.com" data-toggle="tooltip" data-placement="bottom" title="' + t.desc + '" target="_blank">Update is available for download</a>');
                                    a.html(""), a.append(n), a.parent().show(), n.tooltip(), n.on("click", function(t) {
                                        t.preventDefault();
                                        var a = require("nw.gui"),
                                            n = e(t.delegateTarget).attr("href");
                                        a.Shell.openExternal(n)
                                    })
                                }
                            })
                        };
                        if (i(), setInterval(function() {
                                i()
                            }, 36e5), "darwin" == process.platform) {
                            var a = require("nw.gui"),
                                l = new a.Menu({
                                    type: "menubar"
                                });
                            l.createMacBuiltin("Pinegrow");
                            var s = new a.MenuItem({
                                label: "Zoom"
                            });
                            s.click = function() {
                                a.Window.get().maximize()
                            }, l.items[2].submenu.insert(s, 1), l.items[1].submenu.removeAt(0), l.items[1].submenu.removeAt(0), l.items[1].submenu.removeAt(0), a.Window.get().menu = l
                        }
                        var a = require("nw.gui");
                        a.Window.get().maximize();
                        var u = a.Window.get();
                        z(pinegrow.getSetting("ui-zoom", "0")), u.on("close", function() {
                            crsaHasChanges() ? showAlert("One or more pages or component libraries (see File -> Manage Frameworks) have unsaved changes. Are you sure you want to quit the app?", "Unsaved changes", "Don't quit", "Quit", null, function() {
                                u.close(!0)
                            }) : u.close(!0)
                        })
                    } else e(".menu-file-save").remove(), e(".menu-file-save-html").remove(), e(".menu-file-save-as").remove(), e(".menu-file-save-all").remove(), e(".menu-file-cache").remove(), e(".menu-save-divider").remove(), e(".menu-file-new-window").remove(), e(".menu-dev-tools").remove(), window.onbeforeunload = function() {
                        return crsaHasChanges() ? "Some of the pages and stylesheets are changed. Changes will be lost if you leave this page." : null
                    };
                    yt = new CrsaClassManager(e("#crsa-rules")), nt = this.find(".canvas"), dt = e("#crsa-rule-edit");
                    var p = 0;
                    if (navigator.userAgent.match(/msie/i) ? p = 0 : navigator.userAgent.match(/webkit/i) ? p = 2 : navigator.userAgent.match(/mozilla/i) && (p = 1), 0 == p) alert("Sorry, Internet explorer is not supported at the moment. Pinegrow Web Designer works in Chrome, Safari and FireFox. Or you can download the Pinegrow desktop app for Windows.");
                    else {
                        pinegrow.sourceParser, vt && e("body").addClass("win"), isApp() && e("body").addClass("app"), e("body").crsastorage(), e("div.canvas").crsapages(), nt.crsacss(), gt = new CrsaTree(e("#crsa-tree")), gt.onSortReceive = function(e, t, a, n) {
                            willMakeChange(J, "Added to tree / " + getElementName(e)), factoryCopyHelper = null, st && (st.remove(), st = null);
                            var o = Z.data("crsa-factory-def");
                            if (!e) {
                                var i = o;
                                i && (o = i, e = r(i), e.data("crsa-def", null), i = getType(e), n.item.html("").append('<div class="crsa-tree-node-name">' + i.name + "</div>"), gt.assignTreeNodeToElement(n.item, e, !0))
                            }
                            var l = P(t);
                            if (1 > a) l.prepend(e);
                            else {
                                var s = n.item.prev(),
                                    c = gt.getElementOfTreeNode(s);
                                e.insertAfter(c)
                            }
                            var u = getIframeOfElement(e),
                                p = e.parent(),
                                f = getElementPgNode(e);
                            f && pgInsertNodeAtDOMElementLocation(f, e) ? (didMakeChange(J, e), Ht(e, o), d(e)) : (showAlert("The element can't be placed here because the destination is a dynamic element, created by Javascript code.", "Can't put it here"), e.remove()), window.requestAnimationFrame(function() {
                                Rt.updateStructureAndWireAllElemets(u, p)
                            })
                        }, gt.onSortStart = function(e) {
                            nt.crsapages("showOverlays"), willMakeChange(J, "Tree Drag & Drop / " + getElementName(e))
                        }, gt.onSortStop = function(e, t, a, n) {
                            if (!e) {
                                var o = Z.data("crsa-factory-def");
                                o && (e = r(o))
                            }
                            nt.crsapages("showOverlays", !0);
                            var i = P(t),
                                l = getElementPgNode(i),
                                s = getElementPgNode(e),
                                c = new pgParserSourceProblem(s, e);
                            l || c.add("element", getElementName(t), "find"), s || c.add("element", getElementName(e), "find");
                            var d = null,
                                u = null;
                            if (a >= 1) {
                                var p = n.item.prev(),
                                    u = gt.getElementOfTreeNode(p);
                                d = getElementPgNode(u), d || c.add("element", getElementName(u), "find")
                            }
                            return c.ok() ? (1 > a ? (i.prepend(e), l.prepend(s)) : (e.insertAfter(u), s.insertAfter(d)), didMakeChange(J, e), void 0) : (showAlert(c.toString(), "Can't move this element"), Rt.updateStructureAndWireAllElemets(getIframeOfElement(e)), void 0)
                        };
                        e.each(G.pages, function(e, t) {
                            Rt.openPage(t.src)
                        }), 0 == G.pages.length && isApp() && !crsaIsBig() ? setTimeout(function() {
                            Q()
                        }, 1e3) : H();
                        var f = function(e) {
                            var t = e,
                                a = 0,
                                n = function() {
                                    var e = t[a],
                                        r = crsaMakeUrlFromFile(e),
                                        o = pinegrow.getCrsaPageByUrl(r);
                                    return o ? (crsaQuickMessage(o.name + " is already open."), !o.changed, void 0) : (Rt.openPage(r, null, function(r) {
                                        r.setLocalFile(e), scrollCanvasToPage(r.$iframe), a++, a < t.length && n()
                                    }), It.add(r), void 0)
                                };
                            t.length > 0 && n()
                        };
                        if (isApp()) {
                            window.ondragover = function(e) {
                                return e.preventDefault(), !1
                            }, window.ondrop = function(e) {
                                return e.preventDefault(), !1
                            };
                            var g = e("body").get(0);
                            g.ondragover = function() {
                                return !1
                            }, g.ondragend = function() {
                                return !1
                            }, g.ondrop = function(e) {
                                e.preventDefault();
                                var t = [];
                                if (e.dataTransfer.files) {
                                    for (var a = 0; a < e.dataTransfer.files.length; ++a) t.push(e.dataTransfer.files[a].path);
                                    f(t)
                                }
                                return !1
                            }, a.App.on("open", function(e) {
                                console.log("command line: " + e), f([e])
                            });
                            var m = [];
                            if (e.each(a.App.argv, function(e, t) {
                                    0 == t.indexOf("--") || m.push(t)
                                }), m.length && f(m), function(e, t) {
                                    if (!t.__SV) {
                                        var a, n, r, o;
                                        window.mixpanel = t, t._i = [], t.init = function(e, a, n) {
                                            function i(e, t) {
                                                var a = t.split(".");
                                                2 == a.length && (e = e[a[0]], t = a[1]), e[t] = function() {
                                                    e.push([t].concat(Array.prototype.slice.call(arguments, 0)))
                                                }
                                            }
                                            var l = t;
                                            for ("undefined" != typeof n ? l = t[n] = [] : n = "mixpanel", l.people = l.people || [], l.toString = function(e) {
                                                    var t = "mixpanel";
                                                    return "mixpanel" !== n && (t += "." + n), e || (t += " (stub)"), t
                                                }, l.people.toString = function() {
                                                    return l.toString(1) + ".people (stub)"
                                                }, r = "disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" "), o = 0; o < r.length; o++) i(l, r[o]);
                                            t._i.push([e, a, n])
                                        }, t.__SV = 1.2, a = e.createElement("script"), a.type = "text/javascript", a.async = !0, a.src = "http://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js", n = e.getElementsByTagName("script")[0], n.parentNode.insertBefore(a, n)
                                    }
                                }(document, window.mixpanel || []), mixpanel.init("6d81675e34d4963ef74285ddbcc77031"), mixpanel && !crsaIsBig() && crsaIsEmailActivated()) {
                                var h = crsaStorage.getValue("userEmail");
                                h && (mixpanel.identify(h), mixpanel.track("TrialAppStart"), mixpanel.people.set({
                                    $last_login: new Date
                                }), mixpanel.people.increment({
                                    app_run: 1
                                }))
                            }
                        }
                        e(".menu-file-open-file").on("click", function(e) {
                            return e.preventDefault(), gaSendPageView("FileOpen"), isApp() ? (crsaChooseFile(function(e, t) {
                                f(t.split(";"))
                            }, null, !0), void 0) : (F('<div class="alert alert-info">Use <b>File - New page</b> to add a page to your project. Or download Pinegrow desktop app to open your local files.</div>', "to open your files"), void 0)
                        }), e(".menu-file-open-url").on("click", function(e) {
                            if (e.preventDefault(), gaSendPageView("FileOpenUrl"), !isApp()) return F('<div class="alert alert-info">Use <b>File - New page</b> to add a page to your project. Or download Pinegrow desktop app to open files from the Internet.</div>', "to open remote files"), void 0;
                            var t = showPrompt("Page url:", "Open page from url", null, "http://pinegrow.com", null, function(e) {
                                if (e) {
                                    e.indexOf("://") < 0 && (e = "http://" + e);
                                    var t = document.createElement("a");
                                    t.href = e, e = t.href, t = null, Rt.openPage(e, null, function(e) {
                                        scrollCanvasToPage(e.$iframe)
                                    }), It.add(e)
                                }
                            });
                            t.find(".modal-body").append("<p>NOTE: <b>If you want to save changes</b> it is recommended to first save the page locally (for example, with &quot;Save as complete page&quot; in your browser) and then open it with <b>Open file</b>.</p>")
                        });
                        var v = function() {
                            Tt && (Et = new CrsaProjectBrowser, Et.title = "Add a page to your project", Et.intro = "<p>Choose a page to add to your project:</p>", Et.setProjects(Tt), Et.selectedProject = At, Et.onFileSelected = function(e, t) {
                                Rt.openPage(crsaGetBaseForUrl(window.location.href) + "/" + e.url, null, function(e) {
                                    e.crsaProjectTemplate = t, scrollCanvasToPage(e.$iframe), At = t
                                })
                            }, Et.show())
                        };
                        e(".menu-file-template").on("click", function(e) {
                            e.preventDefault(), gaSendPageView("FileOpenTemplate"), isApp(), v()
                        });
                        var w = function() {
                            "1" == pinegrow.getSetting("backup", "1") && showNotice("<p>When you save a file Pinegrow saves a <b>backup copy of the original file</b> into the _pgbackup folder, located in the same location as the saved file. A current timestamp is appended to the backup file name.</p><p>This feature is useful when you are still experimenting with Pinegrow and want to make sure that you don't accidentally corrupt your source files in case Pinegrow can't handle them correctly (like templates, PHP, JSP...). But this can create a lot of backup files.</p><p>You can <b>disable backups</b> in <b>Support -&gt; Settings</b>.</p>", "About file backups", "save-backup")
                        };
                        e(".menu-file-save").on("click", function(e) {
                            if (e.preventDefault(), J)
                                if (isApp()) {
                                    if (!crsaIsBig() && bt) return x(), void 0;
                                    Y && Y.refreshBeforeSaveIfNeeded();
                                    var t = getCrsaPageForIframe(J);
                                    t.live_update && t.save_parent && (t = t.live_update), t.save(function(e) {}, !0, !0), w()
                                } else F('<div class="alert alert-info">Use <b>File - Download your project</b> to download a Zip file with your project.</div>', "to save files")
                        }), e(".menu-file-save-as").on("click", function(e) {
                            if (e.preventDefault(), J) {
                                if (!crsaIsBig() && bt) return x(), void 0;
                                Y && Y.refreshBeforeSaveIfNeeded();
                                var t = getCrsaPageForIframe(J);
                                t.save(function(e) {
                                    e || console.log("File saved!")
                                }, !0, !0, !0), w()
                            }
                        }), e(".menu-file-save-html").on("click", function(e) {
                            if (e.preventDefault(), J) {
                                if (!crsaIsBig() && bt) return x(), void 0;
                                Y && Y.refreshBeforeSaveIfNeeded();
                                var t = getCrsaPageForIframe(J);
                                t.live_update && t.save_parent && (t = t.live_update), t.save(function(e) {
                                    e || console.log("File HTML saved!")
                                }, !0, !1), w()
                            }
                        }), e(".menu-file-save-all").on("click", function(t) {
                            if (t.preventDefault(), J) {
                                if (!crsaIsBig() && bt) return x(), void 0;
                                Y && Y.refreshBeforeSaveIfNeeded(), e.fn.crsapages("saveAll"), t.preventDefault(), w()
                            }
                        }), e(".menu-file-close-all").on("click", function(t) {
                            t.preventDefault();
                            var a = function(t) {
                                var a = e.fn.crsapages("getAllPages").slice();
                                e.each(a, function(e, a) {
                                    return t && a.hasChanges() ? !0 : (a.force_close = !0, a.$page.find(".crsa-close").trigger("click"), void 0)
                                })
                            };
                            if (crsaHasChanges()) {
                                var n = showAlert("One or more pages have unsaved changes. Do you want to save changes before closing?", "Unsaved changes", "Cancel", "Save all &amp; Close", null, function() {
                                    return !crsaIsBig() && bt ? (setTimeout(function() {
                                        x()
                                    }, 1e3), void 0) : (Y && Y.refreshBeforeSaveIfNeeded(), a(!0), e.fn.crsapages("saveAll", !0), w(), void 0)
                                });
                                e('<a href="#" class="btn pull-left">Don\'t save</a>').appendTo(n.find(".modal-footer")).on("click", function(e) {
                                    e.preventDefault(), a(), n.modal("hide")
                                })
                            } else a();
                            t.preventDefault()
                        }), e(".menu-file-download").on("click", function(t) {
                            return t.preventDefault(), J ? (gaSendPageView("FileDownload"), isApp() && !crsaIsBig() && bt ? (_(), void 0) : (e.fn.crsapages("downloadAllPages"), void 0)) : void 0
                        }), e(".menu-file-save-project").on("click", function(e) {
                            if (e.preventDefault(), J) {
                                gaSendPageView("FileSaveProject");
                                var t = new CrsaBrowserStorage;
                                t.hasSavedProject() || (isApp() ? showAlert("<p>Your current project was saved. You can open it later with <b>File - Load project</b>.</p><p><b>Only one project can be saved in this way.</b> Use File - Open and File - Save to open and save any file you want.</p>") : showAlert('<p>Your current project was saved to browser storage. You can open it later with <b>File - Load project</b>.</p><p><b>Only one project can be saved in this way.</b> <a href="http://pinegrow.com#buy" target="_blank"><b>Get the Pinegrow desktop app</b></a> to open and save any file you want.</p>')), t.saveProject() ? crsaQuickMessage("Project was saved.") : showAlert("There is nothing to save. First add some pages to the project (<b>File - New page</b>).", "Nothing to save")
                            }
                        }), e(".menu-file-load-project").on("click", function(e) {
                            e.preventDefault(), gaSendPageView("FileLoadProject");
                            var t = new CrsaBrowserStorage;
                            t.hasSavedProject() ? t.restoreProject() || showAlert("Ups... something went wrong.", "Couldn't load project") : showAlert("No saved project found. Choose <b>File - Remember project</b> to save a project first.", "Couldn't load project")
                        }), e(".menu-file-close").on("click", function(e) {
                            e.preventDefault(), X && X.$page.find(".crsa-close").trigger("click")
                        }), e(".menu-dev-tools").on("click", function(e) {
                            if (isApp()) {
                                var t = require("nw.gui").Window.get();
                                t.showDevTools(), e.preventDefault()
                            }
                        }), e(".menu-file-cache").on("click", function(t) {
                            var a = require("nw.gui");
                            a.App.clearCache();
                            for (var n = e.fn.crsapages("getAllPages"), r = 0; r < n.length; r++) n[r].clearAssetsCache();
                            t.preventDefault()
                        }), e(".menu-file-manage-ss").on("click", function(t) {
                            e.fn.crsacss("showStylesheetsManager", null), t.preventDefault()
                        }), e(".menu-file-manage-fm").on("click", function(t) {
                            e.fn.crsacss("showFrameworkManager", pinegrow.getSelectedPage()), t.preventDefault()
                        }), e(".menu-file-new-window").on("click", function(e) {
                            if (e.preventDefault(), isApp()) {
                                a.Window.get(window.open(window.location.href))
                            }
                        }), e(".menu-support-about").on("click", function(e) {
                            D(), e.preventDefault()
                        }), e(".menu-support-settings").on("click", function(e) {
                            B(), e.preventDefault()
                        }), e(".menu-support-contact").on("click", function(e) {
                            I(), e.preventDefault()
                        }), e(".menu-support-new").on("click", function(e) {
                            H(!0), e.preventDefault()
                        }), e(".menu-support-tour").on("click", function(e) {
                            crsaPlayTour(), e.preventDefault()
                        }), e(".menu-support-docs, .menu-support-portal, .menu-documentation").on("click", function(t) {
                            if (isApp()) {
                                var a = require("nw.gui"),
                                    n = e(t.delegateTarget).attr("href");
                                a.Shell.openExternal(n), t.preventDefault()
                            }
                        }), e(".menu-support-tutorial").on("click", function(e) {
                            e.preventDefault(), pinegrow.openPage(crsaGetBaseForUrl(window.location.href) + "/templates/learn/tutorial.html")
                        });
                        var b = e("#crsa-zoom"),
                            y = function() {
                                var t;
                                t = e.fn.crsapages("getFit") ? "Fit" : Math.ceil(100 * e.fn.crsapages("getZoom")) + "%", b.find("button").html(t + ' <span class="caret"></span>')
                            },
                            C = function(t) {
                                "fit" == t ? e("div.canvas").crsapages("setFit", !0) : (t /= 100, e("div.canvas").crsapages("setFit", !1), e("div.canvas").crsapages("zoom", t)), y()
                            };
                        _t && _t.defaultZoom ? C(_t.defaultZoom) : C(1);
                        for (var k = b.find("ul").html(""), S = 100; S > 0; S -= 10) {
                            var E = S + "%";
                            e("<li/>").html('<a href="#">' + E + "</a>").appendTo(k).data("zoom", S)
                        }
                        e("<li/>").html('<a href="#">Fit</a>').appendTo(k).data("zoom", "fit"), b.find("a").on("click", function(t) {
                            t.preventDefault();
                            var a = e(t.delegateTarget).closest("li").data("zoom");
                            C(a)
                        }), b.find(".btn").button(), e("#crsa-preview-switch").on("change", function() {
                            Ct = e("#crsa-preview-switch").prop("checked"), Ct && (d(null), c(null), crsaQuickMessage("You can also use SHIFT + CLICK to test clicks.", 3e3))
                        }), Rt.showFactory(), Rt.showProperties(null);
                        var N = e("#crsa-rules"),
                            O = function(e, t, a) {
                                t = t.replace(".", "");
                                var n = getElementName(e),
                                    r = getElementPgNode(e),
                                    o = new pgParserSourceProblem(r, e);
                                return r ? a && e.hasClass(t) && r.canRemoveClass(t) : o.add("element", getElementName(e), "change"), o.ok() ? (a ? (willMakeChange(J, n + " | Remove class " + t), e.removeClass(t), r.removeClass(t)) : (willMakeChange(J, n + " | Add class " + t), e.addClass(t), r.addClass(t)), crsaQuickMessage("Class <b>" + t + "</b> " + (a ? "removed from" : "assigned to") + " <b>" + n + "</b>."), d(e), didMakeChange(J, e), void 0) : (showAlert(o.toString(), "Can't edit this element"), d(e), void 0)
                            };
                        N.on("crsa-cm-class-add", function(e, t) {
                            ct && "element" == ct.type && O(ct.data, t)
                        }), N.on("crsa-cm-class-remove", function(e, t) {
                            ct && "element" == ct.type && O(ct.data, t, !0)
                        }), N.on("crsa-cm-edit", function(e, t) {
                            var a = getObjectFromRule(t);
                            Rt.showProperties(a, dt)
                        }), A(), e(window).on("resize", A), e('#crsa-left-plane a[href="#tab3"]').on("show.bs.tab", function() {
                            var t = e("#crsa-rules"),
                                a = e("#tab3");
                            e("#crsa-rules-out").data("panel").hide(), 0 == a.find("#crsa-rules").length && (yt.setReferenceElement(ct && "element" == ct.type ? ct.data : null, !0), yt.setShowOnlyClasses(!1, !0), yt.setOnlyActive(yt.only_active_user_choice, !1), yt.filter_set_in_props_mode && yt.setFilter(null, !1), yt.refresh(), a.append(t))
                        }), e('#crsa-left-plane a[href="#tab3"]').on("shown.bs.tab", function() {
                            yt.resizeRulesList()
                        }), T(_t.openTab);
                        var M = e("#crsa-left-plane"),
                            R = M.find("i.hider").on("click", function(e) {
                                var t = M.width();
                                M.hasClass("closed") ? (M.removeClass("closed"), M.animate({
                                    left: 0
                                }, 150, function() {
                                    R.addClass("fa-angle-double-left").removeClass("fa-angle-double-right"), A()
                                }), M.find(".tab-content").animate({
                                    opacity: 1
                                }, 150)) : (M.addClass("closed"), M.animate({
                                    left: -t + 25
                                }, 150, function() {
                                    R.removeClass("fa-angle-double-left").addClass("fa-angle-double-right"), A()
                                }), M.find(".tab-content").animate({
                                    opacity: 0
                                }, 150)), e.preventDefault()
                            }),
                            L = e("body");
                        e(window).on("scroll", function() {
                            0 != L.scrollTop() && L.scrollTop(0)
                        }), L.on("crsa-frameworks-changed", function() {
                            Rt.showProperties(ct, null)
                        }), e("#crsa-fullscreen").on("click", function(e) {
                            e.preventDefault(), L.get(0).webkitRequestFullScreen()
                        }), e("#crsa-undo").on("click", function(e) {
                            if (J) {
                                var t = getCrsaPageForIframe(J),
                                    a = t.undoStack;
                                a.isAtTheTip() && a.add("Undo", !0), a.undo(function(e) {
                                    e ? (didMakeChange(J), L.trigger("crsa-stylesheets-changed"), L.trigger("crsa-breakpoints-changed"), t.refresh()) : crsaQuickMessage("Nothing to undo.")
                                })
                            }
                            e.preventDefault()
                        }), e("#crsa-redo").on("click", function(e) {
                            if (J) {
                                var t = getCrsaPageForIframe(J);
                                t.undoStack.redo(function(e) {
                                    e ? (didMakeChange(J), L.trigger("crsa-stylesheets-changed"), L.trigger("crsa-breakpoints-changed"), t.refresh()) : crsaQuickMessage("Nothing to redo.")
                                })
                            }
                            e.preventDefault()
                        }), nt.on("crsa-page-closed", function(t, a) {
                            Y.isInEdit(a.$iframe) && Y.exitEdit(!1), J && J.get(0) == a.$iframe.get(0) && (Lt(null), ct = null, Rt.showSelectedInsertFactory(null), Rt.showProperties(null)), gt.closeTreeForPage(a), null == J && setTimeout(function() {
                                if (!J) {
                                    var t = e.fn.crsapages("getAllPages");
                                    t.length > 0 && Lt(t[0].$iframe)
                                }
                            }, 100)
                        }), nt.on("crsa-page-clone", function(e, t) {
                            Rt.openPage(t.url, function() {}, function(e) {
                                e.copyContentOfPage(t), scrollCanvasToPage(e.$iframe)
                            }, t.duplicate())
                        }), nt.on("crsa-page-mirror", function(e, t) {
                            Rt.openPage(t.url, function() {}, function(e) {
                                e.copyContentOfPage(t), scrollCanvasToPage(e.$iframe), e.setLiveUpdate(t), showNotice("Any changes done to the body of the original page will be <b>mirrored to the duplicated page</b>. And, any changes done to the duplicated page will be <b>mirrored back to the original page</b>.", "Mirroring works both ways", "mirror")
                            }, t.duplicate())
                        }), nt.on("crsa-page-view", function(e, t) {
                            var a = t.duplicate();
                            a.deviceWidth = 320, Rt.openPage(t.url, function() {}, function(e) {
                                e.save_parent = !0, e.copyContentOfPage(t), scrollCanvasToPage(e.$iframe), e.setLiveUpdate(t), showNotice("Changes will be mirrored between views. Original page will be saved when you save a view. Use &quot;Save as&quot; on the view to start saving it as a separate file.", "Saving views", "view")
                            }, a)
                        }), nt.on("crsa-page-reload", function(e, t) {
                            t.changed ? showAlert("This page has unsaved changed. Are you sure you want to reload it?", "Page has unsaved changes", "Cancel", "Reload", null, function() {
                                Rt.reloadPage(t, !1)
                            }) : Rt.reloadPage(t, !1)
                        }), nt.on("crsa-page-refresh", function(e, t) {
                            crsaQuickMessage("Refreshing page...", 1e3), Rt.refreshPage(t)
                        }), nt.on("crsa-page-rename", function(e, t) {
                            showPrompt("Page url", "Edit page name/url", t.url, "/page.html", null, function(e) {
                                t.rename(e), t.setPageChanged(!0), isApp() && showAlert('Use "File -> Save as" to actually store it under the new name.', "Notice")
                            })
                        }), nt.on("click", function(e) {
                            e.target == nt.get(0) && (d(null), e.preventDefault())
                        }), e(document).on("keydown", function(e) {
                            return Rt.processKeydownEvent(e)
                        })
                    }
                    return this
                },
                clickOnMenu: function(e) {
                    setTimeout(function() {
                        e.trigger("click")
                    }, 20)
                },
                processKeydownEvent: function(t) {
                    var a = e(t.target),
                        n = a.is("input,textarea,select") && !a.is("#crsa-dummy-field"),
                        r = "true" == t.target.contentEditable,
                        o = t.ctrlKey || t.metaKey;
                    return vt && t.ctrlKey && t.altKey && (o = !1), 8 != t.which && 46 != t.which || n || r ? 68 != t.which || n || r ? 83 == t.which && o ? (t.altKey ? Rt.clickOnMenu(e("#crsa-topbar .menu-file-save-all")) : t.shiftKey ? Rt.clickOnMenu(e("#crsa-topbar .menu-file-save-as")) : Rt.clickOnMenu(e("#crsa-topbar .menu-file-save")), !1) : 82 == t.which && o ? (X && (Y.isInEdit(J) ? Y.refreshPreview() : Rt.clickOnMenu(X.$page.find(".crsa-refresh"))), !1) : 66 == t.which && o ? (X && Rt.clickOnMenu(X.$page.find(".crsa-preview")), !1) : 69 == t.which && o ? (X && (Y.isInEdit(J) ? Y.exitEdit(!0) : Rt.clickOnMenu(X.$page.find(".crsa-code"))), !1) : 67 != t.which || n || r || o ? 82 != t.which || n || r || o ? 79 != t.which || n || r || o ? 90 == t.which && o ? (0 == e(document.activeElement).closest(".code-edit").length && (t.shiftKey ? Rt.clickOnMenu(e("#crsa-redo")) : Rt.clickOnMenu(e("#crsa-undo"))), !1) : !0 : (Rt.clickOnMenu(e(".crsa-inline-menu .action-add-comp")), !1) : (Rt.clickOnMenu(e(".crsa-inline-menu .action-show-rules")), !1) : (Rt.clickOnMenu(e(".crsa-inline-menu .action-edit-code")), !1) : (Rt.clickOnMenu(e(".crsa-inline-menu .crsa-inline-menu-duplicate")), !1) : (Rt.clickOnMenu(e(".crsa-inline-menu .crsa-inline-menu-delete")), !1)
                },
                getEditor: function() {
                    return K
                },
                reloadPage: function(t, a) {
                    t.clearAssetsCache(), d(null), c(null), t.loadingStart(function() {
                        qt(t)
                    }), a && (t.load_source = t.getSource()), e.fn.crsapages("reloadPage", t, function(t, a) {
                        a.frameworks_added || a.detectAndAddFrameworks(), Rt.updateStructureAndWireAllElemets(a.$iframe), e.fn.crsacss("loadLessStyles", t.get(0), function() {
                            0 == a.breakpoints.length ? a.getBreakpointsFromCss(function(t) {
                                t.length && (a.setAllBreakpoints(t), crsaQuickMessage("Got responsive breakpoints from CSS.", 2e3), e("body").trigger("crsa-breakpoints-changed")), qt(a), a.loadingDone()
                            }) : (qt(a), a.loadingDone())
                        }), O(t)
                    })
                },
                refreshPage: function(t) {
                    var a = null;
                    ct && "element" == ct.type && (a = ct.data.attr("data-pg-id")), d(null), c(null);
                    var n = e(t.getBody()).scrollTop();
                    e.fn.crsapages("reloadPage", t, function(t, r) {
                        var o = !1,
                            i = function() {
                                if (o && l && clearInterval(l), a) {
                                    var t = r.getElementWithPgId(a);
                                    t && (d(t), a = null)
                                }
                                if (n > 0) {
                                    var i = e(r.getBody()).scrollTop();
                                    n > 0 && Math.abs(i - n) > .1 * n ? e(r.getBody()).scrollTop(n) : n = 0
                                }
                                r.addCrsaStyles(), !a && 0 == n && l && clearInterval(l)
                            };
                        t.one("load", function() {
                            Rt.updateStructureAndWireAllElemets(r.$iframe), e.fn.crsacss("loadLessStyles", t.get(0), function() {
                                qt(r), i()
                            }), o = !0
                        }), O(t);
                        var l = setInterval(i, 200)
                    }, null, !0)
                },
                refreshSelectElement: function() {
                    ct && "element" == ct.type && d(ct.data)
                },
                openPage: function(t, a, n, r, o) {
                    var i = 0 == nt.find(".page").length;
                    nt.crsapages("addPage", t, function(t, r) {
                        n && n(r);
                        var l = (new Date).getTime();
                        r.detectAndAddFrameworks(), t.crsa("buildTree", t);
                        (new Date).getTime() - l;
                        i && (i = !1, gt.showTreeForIframe(t), t.crsa("createTreeWidget", t, e("#crsa-tree"), getTreeRootForElement(null, t))), e("body").trigger("crsa-page-added", t.get(0)), e.fn.crsacss("loadLessStyles", t.get(0), function() {
                            var t = function() {
                                o && o(r), qt(r), r.loadingDone(), r.autoSize(), _t.onPageLoaded && _t.onPageLoaded(r)
                            };
                            0 == r.breakpoints.length ? r.getBreakpointsFromCss(function(a) {
                                a.length && (r.setAllBreakpoints(a), crsaQuickMessage("Got responsive breakpoints from CSS.", 2e3), e("body").trigger("crsa-breakpoints-changed")), t()
                            }) : t()
                        }), O(t), a && a(r)
                    }, r, qt)
                },
                getSourceOfPage: function(t) {
                    var a = getIframeDocument(t[0]),
                        n = e(a).find("> html");
                    return n.length > 0 ? n[0].innerHTML : ""
                },
                setSourceOfPage: function(t, a) {
                    var n = getIframeDocument(t[0]),
                        r = e(n).find("> html");
                    r.length > 0 && (r[0].innerHTML = a)
                },
                resizeChrome: function() {
                    A()
                },
                editCode: function(t) {
                    e.trim(pinegrow.getSetting("code-editor", ""));
                    return Y.editCode(t), this
                },
                getSelectedPage: function() {
                    return J
                },
                getSelectedElement: function() {
                    return ct
                },
                getSelectedCrsaPage: function() {
                    return X
                },
                showSelectedInsertFactory: function(t, r) {
                    var o = e("#crsa-elements"),
                        i = o.find("ul.selected-insert"),
                        l = i.find(">li");
                    if (!t) return i.hide(), void 0;
                    r = r ? r : X.getAllTypes(t);
                    var s = [];
                    if (e.each(r, function(e, t) {
                            t.action_menu && t.action_menu.add && s.push(t.action_menu)
                        }), !s.length) return i.hide(), void 0;
                    var c = l.find("> div > h2");
                    c.html("Insert into selected <small>" + getElementName(t) + "</small>");
                    var d = l.find(">ul").html(""),
                        u = null,
                        p = !1;
                    e.each(s, function(t, a) {
                        e.each(a.add, function(t, n) {
                            var r = X.getTypeDefinition(n);
                            if (r) {
                                var o = e("<li/>", {
                                    "class": "crsa-factory-element crsa-factory-element-" + r.type
                                }).html("<div>" + r.name + " »</div>").data("crsa-factory-def", r);
                                o.data("action-menu", a), o.appendTo(d)
                            }
                        })
                    }), d.find("li.crsa-factory-element").off(".sfactory").on("mouseenter.sfactory", function(t) {
                        var r = e(t.delegateTarget),
                            o = r.data("crsa-factory-def");
                        if (!u || u != o) {
                            if (!r.data("in-air")) {
                                var i = a(o);
                                Rt.showPreview(r, i, null, 230, removeCrsaClassesFromHtml(n(o))), u = o
                            }
                            p || (p = !0, r.tooltip({
                                container: "body",
                                trigger: "manual",
                                title: "Click to append to the selected element. Right click for placement options."
                            }), r.tooltip("show"), setTimeout(function() {
                                r.tooltip("destroy")
                            }, 4e3))
                        }
                    }).on("mouseleave.sfactory", function() {
                        Rt.hidePreview(), u = null, e(".tooltip").remove()
                    }).on("click.sfactory", function(t) {
                        var a = e(t.delegateTarget);
                        if (t.preventDefault(), Rt.hidePreview(), ct && "element" == ct.type) {
                            var n = a.data("action-menu"),
                                r = a.data("crsa-factory-def");
                            Ut(n, ct.data, r, !1)
                        }
                    }).on("contextmenu.sfactory", function(t) {
                        var a = e(t.delegateTarget),
                            r = a.data("crsa-factory-def"),
                            o = a.data("action-menu");
                        if (t.stopPropagation(), t.preventDefault(), Rt.hidePreview(), ct && "element" == ct.type) {
                            var i = new CrsaContextMenu,
                                l = getElementName(ct.data);
                            i.add("Insert", null, null, "header"), i.add("<b>Prepend</b> to selected <b>" + l + "</b>", null, function() {
                                Ut(o, ct.data, r, !1, !0), u = r
                            }), i.add("<b>Append</b> to selected <b>" + l + "</b>", null, function() {
                                Ut(o, ct.data, r, !1, !1), u = r
                            }), isApp() && (i.add("", null, null, "divider"), i.add("Copy code", null, function() {
                                var e = n(r);
                                copyCodeToClipboard(e), u = r
                            })), i.showAt(t.pageX, t.pageY)
                        }
                    }), i.show()
                },
                showFactory: function() {
                    var o = e("#crsa-elements"),
                        i = null,
                        l = o.find(">.header"),
                        s = e("<input/>", {
                            "class": "form-control filter-form",
                            placeholder: "search"
                        }).appendTo(l),
                        c = e('<a href="#" class="icon-action"><i class="fa fa-cog"></i></a>').appendTo(l);
                    c.on("click", function(t) {
                        e.fn.crsacss("showFrameworkManager", X), t.preventDefault()
                    }).tooltip({
                        container: "body",
                        placement: "right",
                        title: "Manage frameworks and plugins for the selected page.",
                        trigger: "hover"
                    });
                    var u = o.find(">.content");
                    e('<ul class="selected-insert"><li class="section"><div><h2></h2></div><ul></ul><div class="insert-help">Right click for options.</div></li></ul>').appendTo(u).hide();
                    var p = e("<ul/>").appendTo(u),
                        h = null,
                        v = function(e) {
                            var t = null,
                                a = !1;
                            if (h = e, e) {
                                if (t = e.getLibSections(), null == Dt || null == t) a = !0;
                                else if (Dt.length != t.length) a = !0;
                                else
                                    for (var n = 0; n < t.length; n++)
                                        if (t[n] != Dt[n]) {
                                            a = !0;
                                            break
                                        }
                            } else a = !0;
                            a && w(t)
                        };
                    e("body").on("crsa-page-selected", function(e, t) {
                        v(t)
                    }), e("body").on("crsa-element-selected", function() {
                        h != X && v(X)
                    }), e("body").on("crsa-frameworks-changed", function() {
                        if (w(), X && X.treeTop) {
                            var t = e(getIframeBody(X.$iframe.get(0)));
                            t.find("*").data("crsa-def", null), t.data("crsa-def", null), Rt.updateStructureAndWireAllElemets(X.$iframe)
                        }
                    });
                    var w = function(t) {
                            p.html(""), i = s.val();
                            var r = i && i.length > 0 ? new RegExp(escapeRegExp(i), "i") : null;
                            if (!X) return Dt = null, void 0;
                            t || (t = X.getLibSections()), Dt = t, e.each(t, function(t, a) {
                                var n = !0;
                                r && (n = a.name.match(r));
                                var o;
                                if (a.framework.user_lib) {
                                    var i = a.framework.changed ? "*" : "";
                                    o = e("<li/>", {
                                        "class": "section"
                                    }).html('<div><h2><a href="#" data-toggle="dropdown">' + a.name + "<small> / " + a.framework.name + i + ' <span class="caret"></span></small></a></h2></div>').appendTo(p);
                                    var l = o.find("h2 > a"),
                                        s = getUniqueId("section");
                                    l.attr("data-target", "#" + s);
                                    var c = e('<ul class="dropdown-menu context-menu" style="left:auto;right:0;" role="menu"></ul>'),
                                        d = o.find(">div");
                                    d.attr("id", s).css("position", "relative"), e('<li><a href="#" class="add">Add as Component</a></li>').appendTo(c), e('<li><a href="#" class="save">Save</a></li>').appendTo(c), e('<li><a href="#" class="save-as">Save as...</a></li>').appendTo(c),
                                        function(e, t) {
                                            t.find("a.add").on("click", function(t) {
                                                if (t.preventDefault(), ct) {
                                                    var a = ct.data;
                                                    g(a, e.framework)
                                                } else showAlert("First select the element on the page than add it to the library as component.")
                                            }), t.find("a.save").on("click", function(a) {
                                                a.preventDefault(), isApp() ? e.framework.localFile ? e.framework.save(e.framework.localFile, function() {
                                                    crsaQuickMessage("Library saved."), pinegrow.frameworksChanged()
                                                }) : t.find("a.save-as").trigger("click") : F("Please use the Pinegrow desktop app to work with component libraries.")
                                            }), t.find("a.save-as").on("click", function(t) {
                                                t.preventDefault(), isApp() ? crsaChooseFile(function(t, a) {
                                                    e.framework.save(a, function() {
                                                        crsaQuickMessage("Library saved."), pinegrow.frameworksChanged()
                                                    })
                                                }, e.framework.getFileName()) : F("Please use the Pinegrow desktop app to work with component libraries.")
                                            })
                                        }(a, c), d.append(c), l.dropdown()
                                } else o = e("<li/>", {
                                    "class": "section"
                                }).html("<div><h2>" + a.name + "<small> / " + a.framework.name + "</small></h2></div>").appendTo(p);
                                var u = e("<ul/>").appendTo(o),
                                    f = !0;
                                e.each(a.getComponentTypes(), function(t, a) {
                                    var o = a;
                                    if (o) {
                                        if (r && !n && !o.name.match(r)) return !0;
                                        var i = e("<li/>", {
                                            "class": "crsa-factory-element crsa-factory-element-" + o.type
                                        }).html("<div>" + o.name + "</div>").data("crsa-factory-def", o);
                                        i.appendTo(u); {
                                            i.data()
                                        }
                                        f = !1
                                    }
                                }), !f || a.framework.user_lib && !r || o.remove()
                            }), p.nestedSortable("refresh");
                            var o = null,
                                l = !1,
                                c = null;
                            p.find("li.crsa-factory-element").on("mouseenter.factory", function(t) {
                                var r = e(t.delegateTarget),
                                    o = r.data("crsa-factory-def");
                                if (!r.data("in-air")) {
                                    var i = a(o);
                                    Rt.showPreview(r, i, null, 230, removeCrsaClassesFromHtml(n(o))), c = o
                                }
                            }).on("mouseleave.factory", function() {
                                Rt.hidePreview(), c = null, e(".tooltip").remove()
                            }).on("dblclick.factory", function(e) {
                                e.preventDefault()
                            }).on("click.factory", function(t) {
                                var a = e(t.delegateTarget);
                                t.preventDefault(), Rt.hidePreview(), l || (a.tooltip({
                                    container: "body",
                                    trigger: "manual",
                                    title: "Drag & Drop me on the page or on the tree. Right click to insert into the selected element."
                                }), a.tooltip("show"), setTimeout(function() {
                                    a.tooltip("destroy"), l = !1
                                }, 4e3), o = null, l = !0)
                            }).on("contextmenu", function(t) {
                                var a = e(t.delegateTarget),
                                    r = a.data("crsa-factory-def"),
                                    o = r.framework;
                                t.stopPropagation(), t.preventDefault(), Rt.hidePreview();
                                var i = new CrsaContextMenu;
                                if (o.user_lib && (i.add("", null, null, "divider"), i.add("Component", null, null, "header"), i.add("Rename...", null, function() {
                                        showPrompt("Enter the new name for the component:", "Rename component", r.name, null, null, function(e) {
                                            e && r.name != e && (r.name = e, o.changed = !0, pinegrow.frameworksChanged())
                                        })
                                    }), i.add("Update", null, function() {
                                        if (ct) {
                                            var e = ct.data;
                                            showAlert("Do you want to update component <b>" + r.name + "</b> with the content of element <b>" + getElementName(e, null, !1, !0, !0) + "</b>?", "Confirm update", "Cancel", "Update it", null, function() {
                                                m(e, r, X, !1), o.changed = !0, pinegrow.frameworksChanged(), crsaQuickMessage("Component updated")
                                            })
                                        } else showAlert("First select the element on the page that you'll use to update the component with.")
                                    }), i.add("Delete", null, function() {
                                        showAlert("Are you sure? Deleting component <b>" + r.name + "</b> can't be undone.", "Confirm delete", "Cancel", "Delete it", null, function() {
                                            o.removeComponentType(r), o.changed = !0, pinegrow.frameworksChanged()
                                        })
                                    })), ct && "element" == ct.type) {
                                    var l = f(r, ct.data),
                                        s = getElementName(ct.data);
                                    i.add("", null, null, "divider"), i.add("Insert", null, null, "header"), i.add("Prepend to <b>" + s + "</b>", null, function() {
                                        Ut(l, ct.data, r, !1, !0), c = r
                                    }), i.add("Append to <b>" + s + "</b>", null, function() {
                                        Ut(l, ct.data, r, !1, !1), c = r
                                    }), i.add("Insert before <b>" + s + "</b>", null, function() {
                                        $t(ct.data, r, !1, !1), c = r
                                    }), i.add("Insert after <b>" + s + "</b>", null, function() {
                                        $t(ct.data, r, !1, !0), c = r
                                    })
                                }
                                isApp() && (i.add("", null, null, "divider"), i.add("Copy code", null, function() {
                                    var e = n(r);
                                    copyCodeToClipboard(e), c = r
                                })), i.showAt(t.pageX, t.pageY)
                            })
                        },
                        b = (e(this), null),
                        y = null;
                    p.nestedSortable({
                        helper: function(t, n) {
                            var o = e(t.target).closest("li.crsa-factory-element");
                            if (b = o.data("crsa-factory-def"), !b) return null;
                            factoryCopyHelper = n.clone(!0).insertAfter(n), o.data("in-air", !0), y = o, Z = o, lt = !1, b = o.data("crsa-factory-def");
                            var i = r(b).data("crsa-factory-def", b);
                            return st = r(b), gt.assignTreeNodeToElement(o, st, !0), b.drag_helper ? i = e(b.drag_helper).data("crsa-factory-def", b) : b.preview_image && (i = a(b).data("crsa-factory-def", b)), i[0]
                        },
                        forcePlaceholderSize: !1,
                        aahelper: "clone",
                        placeholder: !1,
                        appendTo: document.body,
                        handle: "div",
                        tabSize: 25,
                        tolerance: "pointer",
                        scroll: !1,
                        isTree: !1,
                        items: "li.crsa-factory-element",
                        listType: "ul",
                        toleranceElement: "> div",
                        aaacancel: ".section",
                        isAllowed: function(e, t) {
                            return !t || t.hasClass("crsa-factory-element") ? !1 : !0
                        },
                        connectWith: "#crsa-tree > div.tree-container > ul"
                    }).on("sortremove", function() {}).on("sortstop", function() {
                        factoryCopyHelper && factoryCopyHelper.remove(), nt.crsapages("showOverlays", !0);
                        var t, a = !1;
                        if (st) {
                            var n = getType(st);
                            if (t = n, st.data("crsa-def", null), lt && !getIframeOfElement(st)) n.invalid_drop_msg ? showAlert(n.invalid_drop_msg, "Can't put it here") : n.parent_selector && "string" == typeof n.parent_selector && showAlert("The element can only be placed in containers of type <b>" + n.parent_selector + "</b>. Drag it to the tree if you want to place it elsewhere.", "Can't put it here");
                            else {
                                var r = getElementPgNode(st);
                                if (r && pgInsertNodeAtDOMElementLocation(r, st) || (a = !0, showAlert("The element can't be placed here because the destination is a dynamic element, created by Javascript code.", "Can't put it here")), it) {
                                    var o = st.parent();
                                    Rt.updateStructureAndWireAllElemets(it.iframe, o && o.length > 0 ? o : null)
                                }
                                a || d(st)
                            }
                        }
                        lt = !1, ot = null, e.fn.crsapages("clearUndoSetFlag"), didMakeChange(J, st, st ? st.parent() : null), st && (a ? st.remove() : Ht(st, t)), st = null, y.data("in-air", !1), y = null
                    }).on("sortstart", function() {
                        e.fn.crsapages("clearUndoSetFlag"), nt.crsapages("showOverlays"), crsaEndEditModeIfActive()
                    }).on("sort", function(e) {
                        t(e)
                    }), w(), s.on("input", function() {
                        w()
                    })
                },
                setSelectedElementProperty: function(t, a) {
                    var n = e("#crsa-properties");
                    n.find(".crsa-field").each(function(n, r) {
                        var o = e(r),
                            i = o.data("crsa-field");
                        if (i == t) {
                            var l = o.find("> input");
                            return l.val(a), l.trigger("change", !0), !1
                        }
                    })
                },
                getValuesForElement: function(e) {
                    return i(getObjectFromElement(e))
                },
                showProperties: function(t, a, n) {
                    if ("undefined" != typeof a && a || (a = e("#crsa-properties")), a.find(".crsa-input-color-picker").spectrum("destroy"), a.html(""), !t) return a.html('<div class="alert alert-info">' + _t.textPropsElementNotSelected + "</div>"), void 0;
                    if (n || (n = l(t, !0)), n) {
                        var r = {};
                        if ("element" == t.type) {
                            n.sections || (n.sections = {});
                            var o = X.getAllTypes(t.data);
                            if (o)
                                for (var s = 0; s < o.length; s++) {
                                    var c = o[s];
                                    c.sections && e.each(c.sections, function(e, t) {
                                        e in r && !r[e].inherit || (r[e] = t)
                                    })
                                }
                        } else r = n.sections ? n.sections : {};
                        if (n) {
                            var u = e("<ul/>", {
                                    "class": "props-desc-obj"
                                }).appendTo(a),
                                p = function() {
                                    if (u.html(""), "element" == t.type) {
                                        e("<li/>").html(y(t, n, !0, !0, !1, !0)).appendTo(u);
                                        var a = 0,
                                            r = "true" == crsaStorage.getValue("showElementParents"),
                                            o = r ? 999 : 1;
                                        if (!t.data.is("body")) {
                                            for (var i = t.data.parent(); i.length > 0 && !i.is("body");) {
                                                if (a >= o) {
                                                    e("<li/>", {
                                                        "class": "parent"
                                                    }).html('<i class="fa fa-angle-double-right"></i>').prependTo(u);
                                                    break
                                                }
                                                var l = e("<li/>", {
                                                    "class": "parent"
                                                }).html(getElementName(i, null, !0, !0, !1, !0)).prependTo(u);
                                                l.data("element", i), i = i.parent(), a++
                                            }
                                            r && e("<li/>", {
                                                "class": "parent"
                                            }).html('<i class="fa fa-angle-double-left"></i>').prependTo(u)
                                        }
                                        u.find("li.parent").on("click", function(t) {
                                            t.preventDefault();
                                            var a = e(t.delegateTarget).data("element");
                                            a ? d(a) : (crsaStorage.setValue("showElementParents", r ? "false" : "true"), p())
                                        })
                                    } else e("<li/>").html(y(t, n, !0, !0, !1, !0)).appendTo(u)
                                };
                            if (p(), "element" == t.type) {
                                var f = t.data,
                                    g = getElementPgNode(f);
                                if (!g) return e('<div class="alert alert-info">This is a dynamic element created by JavaScript code. Edit that code to change the element.</div>').appendTo(a), void 0
                            }
                            var m = i(t, r);
                            e.each(r, function(n, r) {
                                if (r.hasOwnProperty("show") && !r.show || !r.name) return !0;
                                var o = (e("<h2/>").html(r.name).appendTo(a), e("<div/>").appendTo(a));
                                e.each(r.fields, function(e, a) {
                                    "custom" == a.type ? a.show(o, t, e, a, m) : Rt.addInputField(o, t, e, a, m)
                                })
                            })
                        }
                    }
                },
                addInputField: function(t, a, n, r, o, i) {
                    var l = e("<div/>", {
                        "class": "crsa-field crsa-field-" + r.type
                    }).appendTo(t).data("crsa-field", n).data("crsa-field-def", r);
                    r.name && l.append("<label>" + r.name + "</label>");
                    var s = null,
                        c = null;
                    switch (r.type) {
                        case "select":
                            s = e("<select/>", {
                                "class": "crsa-input"
                            }).appendTo(l), r.show_empty && e("<option/>", {
                                value: wt
                            }).html("").appendTo(s);
                            var d = Wt(r, a);
                            if (e.each(d, function(t, a) {
                                    e("<option/>", {
                                        value: a.key
                                    }).html(a.name).appendTo(s)
                                }), o[n] ? s.val(o[n]) : r.show_empty && s.val(wt), r.rich) {
                                var u = e("<div/>", {
                                    "class": "crsa-select-val"
                                }).appendTo(l);
                                c = new CrsaSelect(s, u, d, r.rich), l.addClass("rich-select")
                            }
                            break;
                        case "rules":
                            k(l, a.data, o, n);
                            break;
                        case "text":
                        case "color":
                        case "slider":
                        case "image":
                        case "media-query":
                            s = e("<input/>", {
                                type: "text",
                                "class": "crsa-input crsa-input-" + r.type
                            }).appendTo(l), o[n] && s.val(o[n]);
                            break;
                        case "checkbox":
                            s = e("<input/>", {
                                type: "checkbox",
                                value: r.value,
                                "class": "crsa-input crsa-input-" + r.type
                            }).appendTo(l), o[n] && s.prop("checked", "checked")
                    }
                    if ("image" == r.type || r.file_picker) {
                        var p = e("<a/>", {
                            href: "",
                            "class": "crsa-pick-file"
                        }).html('<i class="fa fa-folder-open"></i>').appendTo(l);
                        p.on("click", function(t) {
                            var n = e(t.delegateTarget).closest(".crsa-field").find(".crsa-input");
                            return isApp() ? crsaChooseFile(function(e) {
                                var t = crsaGetObjectParentUrl(a);
                                t && (crsaIsFileUrl(t) ? (e = crsaMakeLinkRelativeTo(e, t), e = ht.makeUrl(e), crsaIsAbsoluteUrl(e) && showNotice("<p>Location of the file doesn't let us use a relative url. This can cause url to break when you upload the page to a server or if you open the page in a browser while Pinegrow is not running.</p><p>Best practice is to place assets (image files, fonts...) in the same folder (or subfolder of folder) where your HTML page is located. Then Pinegrow can create relative urls that will work from wherever you open the page.</p>", "Absolute URL notice", "absolute-url")) : e = ht.makeUrl(e)), r.file_picker_quotes && e && (e = '"' + e + '"'), n.val(e).trigger("change")
                            }) : (St = new CrsaProjectBrowser, St.setProjects([crsaProject]), St.title = "Select image", St.onFileSelected = function(e) {
                                var t = e.url;
                                r.file_picker_quotes && t && (t = '"' + t + '"'), n.val(t).trigger("change")
                            }, St.show()), t.preventDefault(), void 0;
                            var n
                        })
                    }
                    if ("slider" == r.type) {
                        {
                            e("<p/>", {
                                "class": "crsa-slider"
                            }).appendTo(l)
                        }
                        s.on("focus", function() {
                            showNotice("<p>Use <b>UP</b> and <b>DOWN arrow keys</b> to change value. Press <b>SHIFT</b> to increase or decrease by 10 units.</p>", "A Tip", "arrow-css-value", function() {
                                setTimeout(function() {}, 100)
                            }, !0)
                        }), s.on("keydown", function(e) {
                            if (38 == e.which || 40 == e.which) {
                                e.preventDefault();
                                var t = s.val();
                                t || (t = "0px"), t = t.replace(/(\-?[0\.-9]+)(px|em|rm|pt|%)/g, function(t) {
                                    var a = t.replace(/[\-0-9\.]/g, ""),
                                        n = 1,
                                        r = !0;
                                    t.indexOf(".") >= 0 && (n = .1, r = !1);
                                    var o = r ? parseInt(t) : parseFloat(t);
                                    switch (e.which) {
                                        case 38:
                                            o += e.shiftKey ? 10 * n : n;
                                            break;
                                        case 40:
                                            o -= e.shiftKey ? 10 * n : n
                                    }
                                    return (r ? o : o.toFixed(2).replace(".00", ".0").replace(/(\.[0-9])0/, "$1")) + a
                                }), s.val(t), s.trigger("input")
                            }
                        })
                    }
                    if ("media-query" == r.type && ! function() {
                            var t = null,
                                a = e("<a/>", {
                                    href: "",
                                    "class": "crsa-pick-file"
                                }).html('<i class="fa fa-magic"></i>').appendTo(l);
                            s.addClass("crsa-has-icon"), a.on("click", function(e) {
                                e.preventDefault(), t && !t.closed ? (t.close(), t = null) : t = X.showMediaQueryHelper(s)
                            })
                        }(), "color" == r.type) {
                        var f = e("<input/>", {
                            type: "text",
                            "class": "crsa-input-color-picker"
                        }).appendTo(l);
                        !o[n];
                        var g, m = !1;
                        s.on("input change", function() {
                            m || f.spectrum("set", s.val())
                        });
                        var h = function(e) {
                                m = !0;
                                var t = s.get(0).selectionStart,
                                    a = s.get(0).selectionEnd;
                                if (t >= 0 && a > t) {
                                    var n = s.val(),
                                        r = n.substr(0, t) + e + n.substr(a, n.length - a);
                                    s.val(r), s.get(0).selectionEnd = t + e.length, s.get(0).selectionStart = t
                                } else r = e, s.val(r);
                                return s.trigger("input"), m = !1, r
                            },
                            v = function(e) {
                                if (1 != e.alpha) return e.toRgbString();
                                var t = e.toString();
                                return t
                            };
                        f.spectrum({
                            showAlpha: !0,
                            clickoutFiresChange: !1,
                            showInitial: !0,
                            showInput: !0,
                            preferredFormat: "hex",
                            showPalette: !0,
                            palette: [],
                            beforeShow: function() {
                                return g = s.val(), !0
                            },
                            move: function(e) {
                                h(v(e))
                            },
                            show: function() {},
                            change: function(e) {
                                g = h(v(e))
                            },
                            hide: function() {
                                g != s.val() && (m = !0, s.val(g), s.trigger("input"), m = !1)
                            }
                        }), f.spectrum("set", s.val())
                    }
                    var w = null;
                    if (s && !i) {
                        var b = s.is("select") ? "change" : "input change";
                        s.on(b, function(t, n) {
                            var r, i = e(t.delegateTarget),
                                l = i.closest(".crsa-field"),
                                s = l.data("crsa-field"),
                                c = l.data("crsa-field-def");
                            if (r = "checkbox" == c.type ? i.prop("checked") ? c.value : null : i.val(), c.hasOwnProperty("live_update") && !c.live_update && "input" == t.type) return !0;
                            w && w == s || n || ("rule" == a.type && a.data.crsa_stylesheet && (a.data.crsa_stylesheet.changed = !0), getCrsaPageForIframe(J).undoStack.add("Change " + c.name + " / " + y(a)), console.log("undo recorded"), w = s), "change" == t.type && (w = !1), (r == wt || "" == r) && (r = null);
                            var d = o[s] ? o[s] : null;
                            try {
                                o[s] = Rt.propertyChanged(a, s, r, d, c, l, t.type, o), r != o[s] && i.val(o[s]), et ? (at || "element" != a.type || (at = a.data), Rt.updateIfNeeded()) : "change" == t.type && J && setTimeout(function() {
                                    getCrsaPageForIframe(J).autoSize()
                                }, 100), didMakeChange(J, "element" == a.type ? a.data : null)
                            } catch (u) {
                                showAlert(u.toString(), "Can't edit this element"), i.val(d)
                            }
                        })
                    }
                    return l
                },
                updateIfNeeded: function() {
                    et && (Rt.updateStructureAndWireAllElemets(J, tt, !0), at && (d(at), at = null))
                },
                propertyChanged: function(t, a, n, r, o, l, s, c) {
                    var u = null,
                        p = "element" == t.type ? getCrsaPageOfElement(t.data) : null,
                        f = o.action ? o.action : "style";
                    if (o.negvalue && null == n && (n = o.negvalue), "none" != f) {
                        if (o.set_value) try {
                            var g = o.set_value(t, n, c, r, s);
                            g != n && (n = g, l.find("> input.crsa-input").val(n))
                        } catch (m) {
                            console.log("set_value had an exception: " + m)
                        } else if ("style" == f) {
                            if ("element" == t.type) {
                                var h = t.data,
                                    v = h.attr("id");
                                v || (v = getUniqueId(), h.attr("id", v)), u = "#" + v
                            } else if ("rule" == t.type) {
                                var w = t.data;
                                w.crsa_stylesheet.genRuleValueChanged(w, a, n), "image" == o.type && (n = "url(" + n + ")")
                            }
                        } else if ("apply_class" == f) {
                            if ("element" == t.type) {
                                var h = t.data,
                                    b = Wt(o, t),
                                    y = !0;
                                if (p && p.sourceNode) {
                                    var C = getElementPgNode(h),
                                        P = new pgParserSourceProblem(C, h);
                                    if (C ? b ? e.each(b, function(e, t) {
                                            return t.key == n ? !0 : (h.hasClass(t.key) && (C.canRemoveClass(t.key) || P.add("class", t.key, "remove")), void 0)
                                        }) : r && r != n && h.hasClass(r) && (C.canRemoveClass(r) || P.add("class", r, "remove")) : P.add("element", getElementName(h), "change"), !P.ok()) throw y = !1, P;
                                    b ? e.each(b, function(e, t) {
                                        return t.key == n ? !0 : (C.hasClass(t.key) && C.removeClass(t.key), void 0)
                                    }) : r && r != n && C.hasClass(r) && C.removeClass(r), n && C.addClass(n)
                                }
                                y && (b ? e.each(b, function(e, t) {
                                    h.hasClass(t.key) && h.removeClass(t.key)
                                }) : o.value, r && h.hasClass(r) && h.removeClass(r), n && h.addClass(n))
                            }
                        } else if ("element_id" == f) {
                            if ("element" == t.type) {
                                var h = t.data;
                                if (p && p.sourceNode) {
                                    var C = getElementPgNode(h),
                                        P = new pgParserSourceProblem(C, h);
                                    if (C || P.add("element", getElementName(h), "change"), !P.ok()) throw P;
                                    C.setAttr("id", n)
                                }
                                h.attr("id", n)
                            }
                        } else if ("element_attribute" == f) {
                            if ("element" == t.type) {
                                var h = t.data;
                                if (p && p.sourceNode) {
                                    var C = getElementPgNode(h),
                                        P = new pgParserSourceProblem(C, h);
                                    if (C || P.add("element", getElementName(h), "change"), !P.ok()) throw P;
                                    o.empty_attribute ? n ? C.setAttr(o.attribute, "") : C.removeAttr(o.attribute) : null === n ? C.removeAttr(o.attribute) : C.setAttr(o.attribute, n)
                                }
                                o.empty_attribute ? n ? h.attr(o.attribute, "") : h.removeAttr(o.attribute) : null === n ? h.removeAttr(o.attribute) : h.attr(o.attribute, n)
                            }
                        } else if ("element_html" == f) {
                            if ("element" == t.type) {
                                var h = t.data,
                                    C = getElementPgNode(h),
                                    P = new pgParserSourceProblem(C, h);
                                if (C || P.add("element", getElementName(h), "change"), !P.ok()) throw P;
                                C.html(n), h.html(n)
                            }
                        } else if ("rules" == f) {
                            if ("element" == t.type) {
                                var h = t.data,
                                    C = getElementPgNode(h),
                                    P = new pgParserSourceProblem(C, h);
                                if (C || P.add("element", getElementName(h), "change"), !P.ok()) throw P;
                                n ? C.setAttr("class", n) : C.removeAttr("class"), h.attr("class", n)
                            }
                        } else if ("rule_name" == f) {
                            if ("rule" == t.type) {
                                {
                                    var w = t.data;
                                    "class" == w.type ? w.class : null
                                }
                                t.selector = n, J.crsacss("renameLessRule", w, n, function(e, a) {
                                    t.data = e, a && Rt.updateStructureAndWireAllElemets(J), ct && "element" == ct.type && d(ct.data)
                                })
                            }
                        } else if ("rule_media" == f) {
                            var w = t.data;
                            if (w.crsa_stylesheet.genRuleValueChanged(w, "media", n), "change" == s) {
                                if (ct && "element" == ct.type) {
                                    var S = i(ct),
                                        T = l.parent().closest(".crsa-field");
                                    T.html(""), k(T, ct.data, S, "rules"), Rt.showProperties(t, T.find("> .crsa-rule-props"))
                                }
                                e("body").trigger("crsa-rules-changed")
                            }
                        }
                        return o.on_changed && o.on_changed(t, a, n), n
                    }
                },
                showVariables: function() {
                    J.crsacss("showVariables")
                },
                showCSSRules: function(e, t, a) {
                    C(e, t, a)
                },
                showTab: function(e) {
                    T(e)
                },
                setSelectedPage: function(e) {
                    Lt(e)
                },
                updateStructureAndWireAllElemets: function(t, a, n) {
                    var r = a;
                    a && a.length > 0 && (a = e(a.get(0)));
                    var o = (new Date).getTime();
                    t && Rt.buildTree(t, a);
                    var i, l = e("#crsa-tree"),
                        s = l.scrollTop(),
                        c = getTreeRootForElement(a, t);
                    if (i = a ? _t.getTreeRootForElement ? c : r : c, Rt.createTreeWidget(t, l, c, i, function() {
                            l.scrollTop(s)
                        }), t) {
                        et = !1, tt = null;
                        var u = getCrsaPageForIframe(t);
                        u.scrollMode || n || nt.crsapages("autoSizePage", t, u.scrollMode), rt && !n && (rt.remove(), rt = null), ct && "element" == ct.type && !n && X == u && d(ct.data); {
                            (new Date).getTime() - o
                        }
                        return this
                    }
                },
                setNeedsUpdate: function(e, t) {
                    var a = t ? getIframeOfElement(t) : J;
                    et = !0, tt = t, e && (ut && (clearTimeout(ut), ut = null), Rt.updateStructureAndWireAllElemets(a, t), ct && "element" == ct.type && d(ct.data))
                },
                setNeedsUpdateDelayed: function(e) {
                    ut && (clearTimeout(ut), ut = null), ut = setTimeout(function() {
                        Rt.setNeedsUpdate(!0, e)
                    }, 500)
                },
                setSelectElementOnUpdate: function(e) {
                    at = e
                },
                showPreview: function(t, a, n, r, o) {
                    kt || (kt = e("<div/>", {
                        id: "crsa-preview",
                        "class": "preview"
                    }).html('<div class="content clearfix"></div><div class="pre-holder"><pre></pre></div>').appendTo(e("body")));
                    var i = a,
                        l = kt.find(">.content");
                    if (i ? l.show() : (i = e('<div style="display:none;"></div>'), l.hide()), i) {
                        l.html("").append(i), n && kt.addClass(n).data("custom-class", n);
                        var s = kt.find(">div.pre-holder pre");
                        o ? (o = pinegrow.formatHtml(o), s.html(escapeHtmlCode(o)), s.parent().show()) : s.parent().hide();
                        var c = t.offset(),
                            d = e(window).height(),
                            u = kt.height(),
                            p = r ? r : c.left + t.outerWidth() + 5,
                            f = c.top - u / 2;
                        f + u > d && (f = d - u), kt.css({
                            left: p + "px",
                            top: f + "px"
                        }), kt.show()
                    }
                },
                hidePreview: function() {
                    if (kt) {
                        kt.hide().find(">div.content").html("");
                        var e = kt.data("custom-class");
                        e && kt.removeClass(e).data("custom-class", null)
                    }
                },
                isCollapsed: function(e) {
                    var t = getTreeNodeForElement(e);
                    return t && t.hasClass("collapsed")
                },
                collapseElement: function(e, t) {
                    ("undefined" == typeof t || null === t) && (t = !Rt.isCollapsed(e));
                    var a = getTreeNodeForElement(e),
                        n = a.find(">div .fa-angle-down, >div .fa-angle-right");
                    if (a) {
                        var r = a.find("> ul");
                        r.length > 0 && (t ? (n.addClass("fa-angle-right").removeClass("fa-angle-down"), e.data("crsa-tree-collapsed", !0), a.addClass("collapsed"), r.animate({
                            height: 0
                        }, 250, function() {
                            r.addClass("crsa-tree-node-closed"), ct && "element" == ct.type && ct.data.get(0) == e.get(0) && d(ct.data)
                        })) : (n.addClass("fa-angle-down").removeClass("fa-angle-right"), a.removeClass("collapsed"), e.data("crsa-tree-collapsed", null), r.removeClass("crsa-tree-node-closed"), r.css("height", 0), r.animate({
                            height: r.get(0).scrollHeight
                        }, 250, function() {
                            r.css("height", ""), ct && "element" == ct.type && ct.data.get(0) == e.get(0) && d(ct.data)
                        })))
                    }
                },
                wireElement: function(t, a, n, r) {
                    var o = getType(t, !1, !0, r);
                    if (o && o.empty_placeholder) {
                        var i = "string" == typeof o.empty_placeholder ? o.empty_placeholder : "pg-empty-placeholder",
                            l = t.get(0).innerHTML.length < 10 && "" == e.trim(t.html());
                        l || t.hasClass(i) && new pgQuery(t).removeClass(i)
                    }
                },
                buildTree: function(t, a) {
                    var n = getIframeBody(t[0]),
                        r = getCrsaPageForIframe(t);
                    a && (n = a.get(0));
                    var o = _t && _t.nodeFilter ? _t.nodeFilter : null;
                    Vt(n, function(a) {
                        if (1 == a.nodeType) {
                            var n = e(a);
                            Rt.wireElement(n, t, null, r)
                        }
                    }, o)
                },
                traceTree: function(t) {
                    var a = e(getIframeBody(t[0]));
                    walkCrsaTreeLevel(a, 0, function(e, t) {
                        for (var a = getType(t, !1), n = "", r = 0; e > r; r++) n += "----";
                        n = n + " " + a.name + " " + t[0].tagName, S(n)
                    })
                },
                createTreeWidget: function(e, t, a, n, r) {
                    ft = a, Lt(e), gt.paintTree(e, n ? n : a, function() {
                        r && r()
                    })
                },
                highlightElement: function(e) {
                    return c(e)
                },
                selectElement: function(e) {
                    d(e)
                },
                scrollCanvasToElement: function(e) {
                    scrollCanvasToElement(e)
                },
                willMakeChange: function(e, t) {
                    willMakeChange(e, t)
                },
                didMakeChange: function(e) {
                    didMakeChange(e)
                }
            },
            Lt = function(t) {
                J && J.closest(".page").removeClass("active");
                var a = null == J || null == t || J.get(0) != t.get(0);
                if (J = t, K.setSelectedPage(t), J ? (J.closest(".page").addClass("active"), X = getCrsaPageForIframe(J)) : X = null, a) {
                    try {
                        yt.setSelectedPage(J), Rt.showVariables(), J && X.autoSize(), gt.showTreeForIframe(J)
                    } catch (n) {}
                    e("body").trigger("crsa-page-selected", X)
                }
            };
        e.fn.crsa.defaults = {
            types: {},
            rulesDefintion: {},
            rules: {},
            variables: {},
            lib: {},
            frameworks: {}
        }, e.fn.crsa.addFramework = function(t) {
            e.fn.crsa.defaults.frameworks[t.key] = t
        }, e.fn.crsa.addLibSection = function(t, a) {
            e.fn.crsa.defaults.lib[t] = {
                name: a,
                elements: []
            }
        }, e.fn.crsa.addElementsToLibSection = function(t, a) {
            t in e.fn.crsa.defaults.lib || S("Lib section " + t + " not found."), e.fn.crsa.defaults.lib[t].elements = e.fn.crsa.defaults.lib[t].elements.concat(a)
        }, e.fn.crsa.addDefinition = function(t) {
            "priority" in t || (t.priority = 1e3), e.fn.crsa.defaults.types[t.type] = t
        }, e.fn.crsa.addRulesDefinition = function(t) {
            e.fn.crsa.defaults.rulesDefinition = t
        }, e.fn.crsa.addVariablesSection = function(t, a) {
            return t in e.fn.crsa.defaults.variables || (e.fn.crsa.defaults.variables[t] = {
                name: a,
                list: {}
            }), e.fn.crsa.defaults.variables[t]
        }, e.fn.crsa.addVariable = function(t, a, n, r, o) {
            var i = e.fn.crsa.addVariablesSection(o, o);
            return i.list[t] = {
                name: a,
                type: n,
                value: r,
                key: t
            }, i.list[t]
        }, e.fn.crsa.addRulesSection = function() {}, e.fn.crsa.addRule = function() {};
        var Ut = function(e, t, a, n, o) {
                var i = r(a),
                    l = getElementName(i, a),
                    s = getElementPgNode(t),
                    c = getElementPgNode(i),
                    u = new pgParserSourceProblem(s, t);
                return s || u.add("element", getElementName(t), "find"), c || u.add("element", getElementName(i), "find"), u.ok() ? (willMakeChange(J, "Add element / " + l), e && e.on_add ? e.on_add(t, i, a, o) : o ? (t.prepend(i), s.prepend(c)) : (t.append(i), s.append(c)), i.data("crsa-def", null), n && d(i), Rt.updateStructureAndWireAllElemets(J, i.parent(), !n), didMakeChange(J, i, i.parent()), Ht(i, a), crsaQuickMessage("Element <b>" + l + "</b> was inserted."), i) : (showAlert(u.toString(), "Can't edit this element"), void 0)
            },
            $t = function(e, t, a, n) {
                var o = r(t),
                    i = getElementName(o, t),
                    l = getElementPgNode(e),
                    s = getElementPgNode(o),
                    c = new pgParserSourceProblem(l, e);
                return l || c.add("element", getElementName(e), "find"), s || c.add("element", getElementName(o), "find"), c.ok() ? (willMakeChange(J, "Add element / " + i), n ? (o.insertAfter(e), s.insertAfter(l)) : (o.insertBefore(e), s.insertBefore(l)), o.data("crsa-def", null), a && d(o), Rt.updateStructureAndWireAllElemets(J, e.parent(), !a), didMakeChange(J, o, e.parent()), Ht(o, t), crsaQuickMessage("Element <b>" + i + "</b> was inserted."), o) : (showAlert(c.toString(), "Can't edit this element"), void 0)
            },
            jt = function() {
                var t = e("#crsa-placer"),
                    a = t.find(".panel-content");
                this.def = null, this.$element = null, this.clone = !1, this.$cloneSource = null, this.$target = null, this.undoRecorded = !1;
                var n = this;
                Pt.on("crsa-element-selected", function(e, a) {
                    if (t.is(":visible"))
                        if (a && "element" == a.type) {
                            this.undoRecorded = !1;
                            var r = a.data,
                                o = getIframeOfElement(r);
                            n.$target = r, n.$element && n.$element.get(0) == r.get(0) || i(o, r, n.$element, n.def)
                        } else i(null, null, n.$element, n.def)
                });
                var o = function() {
                    return ct && "element" == ct.type ? n.$element && ct.data.get(0) == n.$element.get(0) ? ct.data.is("body") ? null : ct.data.parent() : ct.data : null
                };
                this.setDef = function(e) {
                    this.def = e, this.$element = null, this.clone = !1, this.$cloneSource = null, this.$target = this.$target ? this.$target : o(), this.undoRecorded = !1, i(J, this.$target, null, n.def)
                }, this.setElement = function(t, a) {
                    this.$element = t, this.clone = a, this.$cloneSource = a ? t : null, this.def && (e("li.crsa-factory-element.selected").removeClass("selected"), this.def = null);
                    var n = o();
                    this.$target = n, a && (this.$element = t.clone(!0), removeCrsaClasses(this.$element)), this.undoRecorded = !1, i(J, n, this.$element, null)
                };
                var i = function(o, l, s) {
                    t.find("div.crsa-drop-target").remove();
                    var u = e('<div class="crsa-drop-target"></div>'),
                        p = u,
                        f = n.def;
                    if (s ? f = getType(s) : n.$cloneSource && (f = getType(n.$cloneSource)), o && l && f) {
                        e('<div class="alert alert-info">Select the position for <strong>' + f.name + "</strong>:</div>").appendTo(p);
                        var g = l,
                            m = [];
                        if (!l.is("body"))
                            do {
                                if (g = g.parent(), 0 == g.length) break;
                                m.push(g.get(0))
                            } while (!g.is("body") && m.length < 3);
                        for (var h = !1, v = m.length - 1; v >= 0; v--) {
                            var w = e(m[v]);
                            p = e('<div class="crsa-drop-parent"></div>').html(getElementName(w, null, !0, !1, !1)).appendTo(p).data("parent", w)
                        }
                        p = e('<div class="crsa-drop-selected"></div>').appendTo(p), e("<span/>").html(getElementName(l, null, !0, !1, !1)).appendTo(p);
                        var b = l.children().filter(function() {
                            return getType(e(this)) ? !0 : !1
                        });
                        e("<div/>", {
                            "class": "crsa-drop-loc crsa-drop-loc-prepend"
                        }).data("loc", "prependTo").data("loc-el", l).appendTo(p), b.each(function(t, a) {
                            var n = e(a);
                            e("<div/>", {
                                "class": "crsa-drop-child"
                            }).data("child", n).html(getElementName(n, null, !0, !1, !1)).appendTo(p), t != b.length - 1 && e("<div/>", {
                                "class": "crsa-drop-loc crsa-drop-loc-after"
                            }).data("loc", "insertAfter").data("loc-el", n).appendTo(p)
                        }), e("<div/>", {
                            "class": "crsa-drop-loc crsa-drop-loc-append"
                        }).data("loc", "appendTo").data("loc-el", l).appendTo(p);
                        var y = function(e) {
                            crsaWillChangeDom();
                            var t = e.data("loc"),
                                a = e.data("loc-el");
                            s || (s = n.$cloneSource ? n.$cloneSource.clone(!0) : r(f), removeCrsaClasses(s)), s[t](a), scrollCanvasToElement(s, o)
                        };
                        p.find(".crsa-drop-loc").on("mouseover", function(t) {
                            var a = e(t.delegateTarget);
                            y(a), c(s), s.addClass("crsa-placed")
                        }).on("mouseout", function() {
                            s && (s.detach(), c(null), s.removeClass("crsa-placed"))
                        }).on("click", function(a) {
                            a.preventDefault(), a.stopPropagation();
                            var r = e(a.delegateTarget);
                            n.undoRecorded || (s && s.detach(), willMakeChange(o, "Placed / " + f.name), s && y(r), n.undoRecorded = !0), h = !0, s || y(r), s.removeClass("crsa-placed"), Rt.updateStructureAndWireAllElemets(o, s.parent(), !0), c(null), didMakeChange(o, s.parent()), Ht(s), s = null;
                            var d = u.scrollTop();
                            i(o, l, s), t.find("div.crsa-drop-target").scrollTop(d)
                        }), p.find(".crsa-drop-child").on("mouseover", function(t) {
                            var a = e(t.delegateTarget).data("child");
                            c(a), scrollCanvasToElement(a, o)
                        }).on("mouseout", function(t) {
                            e(t.delegateTarget).data("child");
                            c(null)
                        }).on("click", function(t) {
                            t.preventDefault(), t.stopPropagation();
                            var a = e(t.delegateTarget).data("child");
                            d(a), scrollCanvasToElement(a, o), i(o, a, s)
                        }), u.find(".crsa-drop-parent").on("click", function(t) {
                            t.preventDefault(), t.stopPropagation();
                            var a = e(t.delegateTarget).data("parent");
                            d(a), scrollCanvasToElement(a, o), i(o, a, s)
                        })
                    } else e('<div class="alert alert-info">Select the target element...</div>').appendTo(p);
                    a.append(u), t.is(":visible") || t.show()
                }
            };
        window.crsaQuickMessage = function(t, a, n) {
            a || (a = 1500);
            var r = 100,
                o = 0;
            e(".quick-message").each(function(t, a) {
                var n = e(a),
                    i = parseInt(n.css("top"));
                i >= r && (r = i + n.outerHeight() + 0), o++
            }), n && o > 0 || ! function() {
                var n = e("<div/>", {
                    "class": "quick-message"
                }).html("<p>" + t + "</p>").appendTo(e("body")).css("opacity", 0).css("top", r + "px");
                n.animate({
                    opacity: 1
                }, 250), setTimeout(function() {
                    n.animate({
                        opacity: 0
                    }, 500, function() {
                        n.remove()
                    })
                }, a), setTimeout(function() {
                    n.remove()
                }, a + 1e3)
            }()
        }, window.crsaGetCustomLogic = function() {
            return _t
        };
        var qt = function(e) {
            try {
                !e.loaded || J && J.get(0) != e.$iframe.get(0) || (yt.refresh(), Rt.showVariables())
            } catch (t) {}
        };
        window.getTreeRootForElement = function(t, a) {
            return _t && _t.getTreeRootForElement ? _t.getTreeRootForElement(t, a) : a ? e(getIframeBody(a.get(0))) : null
        }, window.getElementPositionInCanvas = function(e, t) {
            var a = nt.crsapages("getZoom"),
                n = t.position(),
                r = t.closest(".page"),
                o = r.position(),
                i = e ? e.offset() : {
                    top: 0,
                    left: 0
                },
                l = i.left * a + n.left + 0 * o.left,
                s = i.top * a + n.top + o.top + nt.scrollTop() - t.contents().scrollTop() * a;
            return {
                left: l,
                top: s
            }
        }, window.scrollCanvasToElement = function(e, t) {
            var a = t ? t : getIframeOfElement(e);
            e && scrollToElementInIframe(e, a);
            var n = getElementPositionInCanvas(e, a);
            if (nt.scrollTop() <= n.top && nt.scrollTop() + nt.height() > n.top);
            else {
                var r = n.top - 100;
                0 > r && (r = 0), nt.animate({
                    scrollTop: r
                }, 250, function() {})
            }
        }, window.scrollToElementInIframe = function(e, t) {
            var a = t.contents(),
                n = t.get(0).contentWindow,
                r = n.outerHeight,
                o = a.scrollTop(),
                i = e.offset().top;
            (o > i || i > o + r) && (i >= r / 3 && (i -= Math.floor(r / 3)), a.scrollTop(i))
        }, window.scrollCanvasToPage = function(e) {
            scrollCanvasToElement(null, e)
        }, window.showCodeEditor = function(t, a, n, r, o, i) {
            var l = e("body"),
                s = makeDialog(a, "Cancel", "Close &amp; Keep changes [Esc]", "<div></div>").css("width", "50%").addClass("crsa-dialog-edit");
            l.append(s), s.on("keydown", function(e) {
                27 == e.which && (s.find("button.ok").trigger("click"), e.preventDefault())
            }), s.addClass("code-edit");
            var c = s.find(".modal-body>div").css("height", "200px"),
                d = null,
                u = CodeMirror(function(t) {
                    d = e(t), c.append(d.css("height", "100%"))
                }, {
                    mode: t,
                    autoFocus: !0,
                    theme: pinegrow.getSetting("code-theme-cm", "eclipse"),
                    indentUnit: parseInt(pinegrow.getSetting("html-indent-size", "4")),
                    lineWrapping: !0,
                    lineNumbers: !0,
                    matchBrackets: !0,
                    autoCloseBrackets: !0,
                    matchTags: !0,
                    extraKeys: {
                        "Ctrl-Q": function(e) {
                            e.foldCode(e.getCursor())
                        },
                        "Ctrl-Space": "autocomplete"
                    },
                    foldGutter: !0,
                    gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
                }),
                p = e('<label class="pull-left control-label" style="font-weight: normal;"><input type="checkbox" class="wrap"> Wrap lines</label>');
            s.find(".modal-footer").prepend(p), "1" == pinegrow.getSetting(n + "-wrap", "1") ? (p.find("input").attr("checked", "checked"), u.setOption("lineWrapping", !0)) : (p.find("input").removeAttr("checked"), u.setOption("lineWrapping", !1)), p.on("change", function() {
                var e = p.find("input").is(":checked");
                u.setOption("lineWrapping", e), pinegrow.setSetting(n + "-wrap", e ? "1" : "0")
            }), setTimeout(function() {
                u.focus()
            }, 100), u.on("change", function() {
                r()
            }), s.find("button.cancel").click(function() {
                i(), s.hide(), s.remove()
            }), s.find("button.close, button.ok").click(function() {
                o(), s.hide(), s.remove()
            });
            var f = l.width() - s.width() - 100,
                g = l.height() - s.height() - 200;
            return s.css("top", g + "px").css("left", f + "px"), s.find(".modal-header").css("cursor", "move"), s.draggable({
                handle: ".modal-header"
            }).on("dragstart", function() {
                e.fn.crsapages("showOverlays")
            }).on("dragstop", function() {
                e.fn.crsapages("showOverlays", !0), u.refresh()
            }), {
                mirror: u,
                dialog: s,
                editor_el: d
            }
        };
        var Wt = function(e, t) {
                return e.options ? "function" == typeof e.options ? e.options(e, t) : e.options : null
            },
            Vt = function Gt(e, t, a, n) {
                var r = a ? a(e, n) : !0;
                if (e && r && t(e), e)
                    for (e = e.firstChild; e;) Gt(e, t, a, r || n), e = e.nextSibling
            };
        window.willMakeChange = function(e, t) {
            crsaIsInEdit() && K.endEdit(), getCrsaPageForIframe(e).undoStack.add(t)
        }, window.didMakeChange = function(t, a, n, r) {
            var o = getCrsaPageForIframe(t);
            if (o.setPageChanged(!0), a || n) {
                var i, l = n ? n : a;
                do i = getType(l), i && i.on_changed && i.on_changed(l, o), l = l.parent(); while (l.length > 0 && !l.is("html"))
            }
            _t.onPageChanged && _t.onPageChanged(t, a);
            var s = e.fn.crsapages("getAllPages");
            e.each(s, function(e, t) {
                return t == r ? !0 : (t.live_update == o && t.onPageChanged(o), o.live_update == t && (t.onPageChanged(o), didMakeChange(t.$iframe, null, null, o)), void 0)
            }), Y.isInEdit(o.$iframe) && Y.pageChanged(o)
        };
        var Ht = function(e, t) {
                var a = getType(e);
                if (a && a.on_inserted) {
                    var n = getCrsaPageForIframe(getIframeOfElement(e));
                    a.on_inserted(e, n)
                }
                if (t && t != a && t.on_inserted) {
                    var n = getCrsaPageForIframe(getIframeOfElement(e));
                    t.on_inserted(e, n)
                }
                var r = e.parent();
                do {
                    if (a = getType(r), a && a.on_child_inserted) {
                        var n = getCrsaPageForIframe(getIframeOfElement(e));
                        a.on_child_inserted(r, e, n)
                    }
                    r = r.parent()
                } while (r.length > 0 && !r.is("html"));
                t && t.empty_placeholder && "1" == pinegrow.getSetting("show-placeholders", "1") && showNotice("<p><b>Empty " + e.get(0).tagName + ' </b>was just added to the page. Pinegrow added <b>pg-empty-placeholder</b> class to it, with <code>min-height:100px</code> so that you can see the element on the page. Once you add content to the element the class is removed. This does not affect how page looks like outside of Pinegrow - it\'s just a help to make editing easier.</p><p>You can enable or disable this behaviour in Support -&gt; Settings.</p><p><a href="http://docs.pinegrow.com/solution/articles/1000085418-placeholders-for-empty" class="external" target="_blank">Read more about placeholders.</a></p>', "A note about empty elements", "empty-placeholder-2")
            },
            Bt = function(e, t) {
                var a = getType(e);
                a && a.on_deleted && a.on_deleted(e, t)
            },
            zt = function(e, t, a) {
                var n = getType(e);
                n && n.on_moved && n.on_moved(e, t, a)
            },
            Qt = function() {
                var t = '<div id="crsa-topbar" class="navbar navbar-inverse">            <div class="navbar-header">                <a class="navbar-brand external-link" href="http://pinegrow.com" target="_blank"><img src="images/logo_36.png" height="18" /><span class="sr-only">Pinegrow Web Designer</span></a>            </div>            <div class="" id="main-navbar">                <ul class="nav navbar-nav">                    <li class="dropdown menu-file"><a href="#" class="dropdown-toggle menu-file" data-toggle="dropdown">File <b class="caret"></b></a>                        <ul class="dropdown-menu">                            <li><a href="#" class="menu-file-template">New page...</a></li>                            <li><a href="#" class="menu-file-open-file">Open file...</a></li>                            <li><a href="#" class="menu-file-open-url">Open from url...</a></li>                            <li class="dropdown menu-file-recent"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Open recent...</a>                                <ul class="dropdown-menu menu-submenu">                                    <li><a href="#" class="">New page...</a></li>                                    <li><a href="#" class="">Open file...</a></li>                                    <li><a href="#" class="">Open from url...</a></li>                                </ul>                            </li>                            <li class="divider menu-save-divider"></li>                            <li><a href="#" class="menu-file-save">Save</a></li>                            <li><a href="#" class="menu-file-save-html">Save HTML only</a></li>                            <li><a href="#" class="menu-file-save-as">Save as...</a></li>                            <li><a href="#" class="menu-file-save-all">Save all</a></li>                            <li class="divider"></li>                            <li><a href="#" class="menu-file-close">Close page</a></li>                            <li><a href="#" class="menu-file-close-all">Close all</a></li>                            <li class="divider menu-project-divider"></li>                            <li><a href="#" class="menu-file-save-project">Remember project</a></li>                            <li><a href="#" class="menu-file-load-project">Load project</a></li>                            <li><a href="#" class="menu-file-download">Download project Zip</a></li>                            <li class="divider"></li>                            <li><a href="#" class="menu-file-cache">Clear cache</a></li>                            <li><a href="#" class="menu-file-manage-ss">Manage stylesheets...</a></li>                            <li><a href="#" class="menu-file-manage-fm">Manage frameworks...</a></li>                            <li><a href="#" class="menu-dev-tools">Development tools</a></li>                            <!-- <li><a href="#" class="menu-file-new-window">Open new window</a></li> -->                        </ul>                    </li>                    <li><a id="crsa-undo" href="#">Undo</a></li>                    <li><a id="crsa-redo" href="#">Redo</a></li>                    <li class="dropdown menu-file"><a href="#" class="dropdown-toggle menu-support" data-toggle="dropdown">Support <b class="caret"></b></a>                        <ul class="dropdown-menu">                           <!-- <li><a href="#" class="menu-support-tour">Guided tour</a></li>-->                            <li><a href="#" class="menu-support-tutorial">Tutorial - How to use Pinegrow</a></li>                            <li><a href="http://pinegrow.com/docs/editing/layout.html" target="_blank" class="menu-documentation">Documentation</a></li>                            <li><a href="http://docs.pinegrow.com" target="_blank" class="menu-support-portal">Support</a></li>                       <!--     <li><a href="http://pinegrow.com/bootstrap-docs.html" target="_blank" class="menu-support-docs">Interactive Bootstrap Docs</a></li> -->                            <li class="divider"></li>                            <li><a href="#" class="menu-support-settings">Settings...</a></li>                            <li class="divider"></li>                            <li><a href="#" class="menu-support-contact">Contact...</a></li>                            <li><a href="#" class="menu-support-about">About...</a></li>                            <li><a href="#" class="menu-support-new">What&#39;s new...</a></li>                        </ul>                    </li>                </ul>                <form class="navbar-form navbar-left" id="crsa-zoom">                    <div class="btn-group">                        <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown">Zoom <span class="caret"></span>                        </button>                        <ul class="dropdown-menu" role="menu">                            <li><a href="#">Zoom</a></li>                        </ul>                    </div>                    <div class="checkbox">                        <label class="control-label">                        &nbsp;&nbsp;&nbsp;&nbsp;<input type="checkbox" id="crsa-preview-switch" value="1">&nbsp;Test clicks&nbsp;&nbsp;&nbsp;&nbsp;                        </label>                    </div>                </form>                <ul class="nav navbar-nav pull-right trial">                    <li><span>You\'re playing with a trial version.</span> <a href="#">Upgrade to the Real Thing.</a></li>                </ul>            </div>        </div>';
                _t.navBar && (t = _t.navBar);
                var a = t + '        <div class="canvas">            <div class="empty-canvas">                <p><a href="#" class="menu-file-template"><b>New page...</b></a></p>                <p><a href="#" class="menu-file-open-file"><b>Open file...</b></a></p>                <p><a href="#" class="menu-file-open-url"><b>Open from url...</b></a></p>                <p><a href="#" class="menu-file-load-project"><b>Load saved project</b></a></p><br/>                <p><a href="http://pinegrow.com/docs/editing/layout.html" target="_blank" class="menu-documentation">Documentation</a></p>                <p><a href="#" class="menu-support-tutorial">Play with Pinegrow tutorial</a></p>                <p><a href="http://docs.pinegrow.com" target="_blank" class="menu-support-portal">Support</a></p>                <div class="version-info"></div><br/>                <div class="recent-files"><p><b>Recent files:</b></p><ul class="list-unstyled"></ul></div>            </div>        </div>            <div id="crsa-left-plane" class="tabbable">                 <i class="hider fa fa-angle-double-left"></i>                <ul class="nav nav-tabs">                    <li class="active"><a href="#tab1" data-toggle="tab">Lib</a></li>                    <li><a href="#tab2" data-toggle="tab">Prop</a></li>                    <li><a href="#tab3" data-toggle="tab">CSS</a></li>                    <li><a href="#tab4" data-toggle="tab">Vars</a></li>                </ul>                <div class="tab-content">                    <div class="tab-pane active" id="tab1">                        <div id="crsa-elements" class="crsa-panel">                            <div class="header"></div>                            <div class="content"></div>                        </div>                    </div>                    <div class="tab-pane" id="tab2">                        <div id="crsa-properties" class="crsa-properties crsa-panel">                        </div>                    </div>                    <div class="tab-pane" id="tab3">                        <div id="crsa-rules" class="crsa-panel">                        </div>                        <div id="crsa-rule-edit" class="crsa-properties crsa-panel">                        </div>                    </div>                    <div class="tab-pane" id="tab4">                        <div id="crsa-vars" class="crsa-panel">                        </div>                    </div>                </div>            </div>        <div id="crsa-rules-out"><div class="panel-head"><i class="fa fa-bars"></i>Element rules</div><div class="panel-content"></div></div>        <div id="crsa-placer" class="crsa-panel"><div class="panel-head"><i class="fa fa-bars"></i>Placer</div><div class="panel-content"></div></div>        <div id="crsa-tree"></div>        <div id="textedit"></div>        <div id="textedit_bar">            <div class="btn-group btn-group-sm">            <a href="#" class="btn btn-info edit-html">Html</a>            <a href="#" class="btn btn-info  edit-css">                Css                <select class="edit-css-select"/>            </a>          <!--  <a href="#" class="edit-js">Javascript</a>            <a href="#" class="edit-refresh">Refresh</a> -->            <a href="#" class="btn btn-default edit-done">Done</a>            </div>            <div class="btn-group btn-group-sm pull-right">                <label href="#" class="edit-wrap" style="float: left;padding: 5px 10px;color: #888;font-size: 12px;line-height: 1.5;font-weight: normal;">                        <input type="checkbox" class="wrap">&nbsp;Wrap</label>                <button href="#" class="btn btn-link edit-refresh">                        <input type="checkbox" class="live-update">&nbsp;Refresh!</button>            </div>        </div>        <div class="crsa-edit-toolbar"></div>        <input id="crsa-dummy-field" style="position:absolute;top:-1000px;" />';
                e("body").append(a), new CrsaPanel(e("#crsa-rules-out")), e("#crsa-rules-out").hide(), new CrsaPanel(e("#crsa-placer")), e("#crsa-placer").hide(), isApp() && e(".external-link").on("click", function(t) {
                    t.preventDefault();
                    var a = require("nw.gui"),
                        n = e(t.delegateTarget).attr("href");
                    a.Shell.openExternal(n)
                }), e("ul.dropdown-menu [data-toggle=dropdown]").on("click", function(t) {
                    t.preventDefault(), t.stopPropagation(), e(this).parent().addClass("open"), e(this).parent().find("ul").parent().find("li.dropdown").addClass("open")
                })
            };
        window.getPageSource = function(t) {
            var a = getIframeDocument(t.get(0)),
                n = e(a).find("> html"),
                r = n.length > 0 ? n[0].innerHTML : "";
            return r = r.replace(/(<[^>]*)\s*contenteditable="true"/gi, "$1"), r = r.replace(/(<[^>]*)\s*style=""/gi, "$1"), r = removeCrsaClassesFromHtml(r)
        }, window.setPageSource = function(t, a, n, r) {
            var o = getIframeDocument(t.get(0)),
                i = e(o).find("> html");
            i[0].innerHTML = a, r || setTimeout(function() {
                e.fn.crsacss("loadLessStyles", t.get(0), function() {
                    Rt.updateStructureAndWireAllElemets(t), e("body").trigger("crsa-stylesheets-changed"), n && n()
                })
            }, 500)
        }
    }(jQuery);
var CrsaPanel = function(e) {
        this.$el = e, e.data("panel", this); {
            var t = this,
                a = $(window),
                n = (e.find("> .panel-head"), e.find("> .panel-content")),
                r = n.position().top;
            $("<a/>", {
                href: "#",
                "class": "panel-close"
            }).html('<i class="fa fa-times" />').appendTo(this.$el).on("click", function(e) {
                t.hide(), e.preventDefault()
            })
        }
        e.addClass("panel"), this.autoSize = function(e) {
            e || (e = this.$el.offset());
            var t = (this.$el.height(), a.height()),
                o = t - e.top;
            this.$el.css("height", o + "px"), n.css("height", o - r + "px")
        }, this.autoSize(), e.draggable({
            handle: ".panel-head"
        }).on("dragstart", function(e, t) {
            if (t) {
                {
                    a.height()
                }
                $.fn.crsapages("showOverlays")
            }
        }).on("drag", function(e, a) {
            a && t.autoSize(a.offset)
        }).on("dragstop", function(e, t) {
            t && $.fn.crsapages("showOverlays", !0)
        }), this.show = function() {
            this.$el.show(), this.autoSize()
        }, this.hide = function() {
            this.$el.hide()
        }
    },
    crsaHasChanges = function() {
        var e = !1,
            t = $.fn.crsapages("getAllPages");
        return $.each(t, function(t, a) {
            e = e || a.changed
        }), e = e || pinegrow.hasUnsavedFrameworks()
    },
    crsaLoadedScripts = {},
    crsaLoadScript = function(e, t) {
        var a = {};
        return e in crsaLoadedScripts ? (t(), void 0) : (a = $.extend(a || {}, {
            dataType: "script",
            cache: !0,
            url: e
        }), jQuery.ajax(a).done(function() {
            crsaLoadedScripts[e] = !0, t()
        }))
    },
    gaNoCookieSendHit = function(e, t, a) {
        var n = parseInt(99999999 * Math.random());
        localStorage.gaNoCookieUid || (localStorage.gaNoCookieUid = "uid" + 1e9 * Math.random());
        var r = localStorage.gaNoCookieUid,
            o = "http://www.google-analytics.com/collect?payload_data&v=1&aip=1&z=" + n + "&tid=" + e + "&cid=" + r + "&t=" + t + "&" + a,
            i = document.createElement("img");
        i.setAttribute("src", o), i.style.position = "absolute", i.style.height = "0px", document.body.appendChild(i), setTimeout(function() {
            $(i).remove()
        }, 1e3)
    },
    gaNoCookieSendPageView = function(e, t, a) {
        var t = encodeURIComponent(t),
            a = encodeURIComponent(a),
            n = "dp=" + t + "&dt=" + a + "&";
        gaNoCookieSendHit(e, "pageview", n)
    },
    gaNoCookieSendEvent = function(e, t, a, n) {
        "undefined" == typeof n && (n = ""), t = encodeURIComponent(t), a = encodeURIComponent(a), n = encodeURIComponent(n);
        var r = "ec=" + t + "&ea=" + a + "&el=" + n + "&";
        gaNoCookieSendHit(e, "event", r)
    },
    gaSendPageView = function(e) {
        var t = isApp() ? "/PinegrowApp/" : "/PinegrowWeb/";
        isApp() ? (t += crsaIsBig() ? "Pro/" : "Demo/", e && (t += e + "/"), t += crsaGetVersion(), pg_is_beta && (t += "Beta"), gaNoCookieSendPageView("UA-344271-72", t, "Pinegrow App Run")) : (e && (t += e + "/"), t += crsaGetVersion(), ga("send", "pageview", t))
    },
    crsaIsInEdit = function() {
        return $.fn.crsa("getEditor").isInEdit()
    },
    crsaEndEditModeIfActive = function() {
        return crsaIsInEdit() ? ($.fn.crsa("getEditor").endEdit(), !0) : !1
    },
    crsaWillChangeDom = function() {
        return crsaEndEditModeIfActive()
    },
    crsaAddKbd = function(e, t) {
        var a = t.indexOf("SHIFT") >= 0,
            n = t.indexOf("CMD") >= 0,
            r = t.indexOf("ALT") >= 0,
            o = "";
        a && (o += "&#8679;", t = t.replace("SHIFT", "")), r && (o += "&#8997;", t = t.replace("ALT", "")), n && (o += "&#8984;", t = t.replace("CMD", "")), o += $.trim(t), e.append('<span class="kbdspacer"></span><span class="kbd">' + o + "</span>"), e.parent().addClass("haskbd")
    },
    PgCustomLogic = function() {
        this.nodeFilter = null, this.getTreeRootForElement = null, this.navBar = null, this.defaultZoom = "fit", this.showOnlyClassesInProperties = !1, this.openTab = "lib", this.textPropsElementNotSelected = "Click on any element in the page to show its properties.", this.onPageLoaded = null, this.onPageChanged = null, this.scrollMode = !0, this.warnOnUnloadPage = !0
    },
    CrsaHttpServer = function() {
        var e = {
                directory: "",
                port: parseInt(pinegrow.getSetting("webserver-port", "40000"))
            },
            t = {
                http: require("http"),
                url: require("url"),
                fs: require("fs"),
                path: require("path")
            },
            a = this;
        this.url = "http://127.0.0.1:" + e.port, this.encodeUrl = function(e) {
            return e
        }, this.decodeUrl = function(e) {
            return e
        }, this.makeUrl = function(e) {
            return 0 === e.indexOf("file://") && (e = this.encodeUrl(e)), e.replace("file://", this.url + "/file://")
        }, this.getOriginalUrl = function(e) {
            return 0 == e.indexOf(this.url + "/") && (e = e.replace(this.url + "/", ""), e = this.decodeUrl(e), e.indexOf("://") < 0 && (e = "file://" + e)), e
        }, this.makeProxyUrl = function(e, t) {
            return 0 === e.indexOf("file://") ? e = this.makeUrl(e) : crsaIsAbsoluteUrl(e) ? 0 != e.indexOf(this.url) && (e = this.url + "/" + this.encodeUrl(e)) : console.log("MakeProxyUrl: url is relative: " + e), t && (e = crsaAppendQueryToUrl(e, ["pglive=1"])), e
        };
        var n = function(e) {
            var t = e.lastIndexOf("."),
                a = -1 === t ? "default" : e.substr(t),
                n = {
                    ".bmp": "image/bmp",
                    ".css": "text/css",
                    ".gif": "image/gif",
                    ".htm": "text/html",
                    ".html": "text/html",
                    ".php": "text/html",
                    ".php5": "text/html",
                    ".htm": "text/html",
                    ".asp": "text/html",
                    ".aspx": "text/html",
                    ".cfm": "text/html",
                    ".cfml": "text/html",
                    ".cfc": "text/html",
                    ".jpg": "image/jpeg",
                    ".jpeg": "image/jpeg",
                    ".js": "application/javascript",
                    ".json": "application/json",
                    ".otf": "font/opentype",
                    ".woff": "application/font-woff",
                    ".ttf": "application/x-font-ttf",
                    ".svg": "image/svg+xml",
                    ".png": "image/png",
                    ".text": "text/plain",
                    "default": null
                };
            return n[a.toLowerCase()] || n["default"]
        };
        this.currentRequestContext = {
            isRemote: !1,
            remotePath: null,
            remotePathParts: null,
            remoteHost: null,
            base: ""
        }, this.setCurrentRequestContext = function(e, t) {
            if (!e || crsaIsFileUrl(e)) a.currentRequestContext.isRemote = !1, a.currentRequestContext.remotePath = null, a.currentRequestContext.remotePathParts = null, a.currentRequestContext.remoteHost = null, a.currentRequestContext.base = "";
            else {
                if (a.currentRequestContext.base = "", t) {
                    var n = t.find("base", !0);
                    n.length && (a.currentRequestContext.base = n[0].getAttr("href"))
                }
                a.currentRequestContext.isRemote = !0, a.currentRequestContext.remotePath = crsaRemoveUrlParameters(e).replace(/^[a-z]+:\/\//, ""), a.currentRequestContext.remotePathParts = a.currentRequestContext.remotePath.split("/"), a.currentRequestContext.remotePathParts.length && (a.currentRequestContext.remoteHost = a.currentRequestContext.remotePathParts.shift(), a.currentRequestContext.remotePathParts.length && (a.currentRequestContext.remotePathParts.pop(), a.currentRequestContext.remotePath = a.currentRequestContext.remotePathParts.join("/")))
            }
        }, this.createProxyUrlNodeOutputFilter = function(e, t, n) {
            if ("attrs" == n && ("script" == e.tagName || "link" == e.tagName || "img" == e.tagName)) {
                var r = a.currentRequestContext.isRemote,
                    o = a.currentRequestContext.remotePath,
                    i = a.currentRequestContext.remoteHost,
                    l = a.currentRequestContext.remotePathParts;
                return e.getAttributesString(function(e, t, n) {
                    if ("href" == t.toLowerCase() || "src" == t.toLowerCase()) {
                        if (n)
                            if (crsaIsAbsoluteUrl(n)) 0 == n.indexOf("//") && (n = "http:" + n), n = a.makeProxyUrl(n);
                            else if (r) {
                            if (null !== o) {
                                for (var s = n.split("/"), c = l.length, d = 0; d < s.length && ".." == s[d]; d++) c--;
                                if (0 > c) {
                                    for (; 0 > c;) s.shift(), c++;
                                    n = s.join("/")
                                }
                            }
                            n.length && ("/" != n.charAt(0) && (n = a.currentRequestContext.base + n), "/" == n.charAt(0) && (n = "http://" + i + n, n = a.makeProxyUrl(n)))
                        }
                    }
                    return null === n ? t : t + '="' + n + '"'
                })
            }
            return t
        };
        try {
            var r = t.http.createServer(function(r, o) {
                {
                    var i = t.url.parse(r.url, !0),
                        l = decodeURIComponent(i.pathname);
                    r.method + " " + l.bold
                }
                "/" === l && (l += "index.html");
                var s = null;
                "referer" in r.headers && (s = a.getOriginalUrl(r.headers.referer), s = s.replace(/[\?\#].*/g, ""));
                var c, d, u = (l.indexOf("://") >= 0 || 0 == l.indexOf("///") || s && s.indexOf("://") >= 0 && s.indexOf("file://") < 0) && l.indexOf("file://") < 0;
                if (u) c = decodeURIComponent(i.path).substr(1), d = c;
                else {
                    for (c = t.path.join(e.directory, l.replace("file://", "")); c.length > 1 && "\\" == c.charAt(0);) c = c.substr(1);
                    d = crsaIsFileUrl(c) ? c : crsaMakeUrlFromFile(c)
                }
                var p = function(e, t) {
                        o.writeHead(e, {}), o.write("<h1>" + e + " - " + t + "</h1>"), o.end()
                    },
                    f = function(e, t) {
                        var r = t ? t : n(c);
                        if (r)
                            if (["image/gif", "image/jpeg", "image/png"].indexOf(r) >= 0 ? o.writeHead(200, {
                                    "content-type": r,
                                    "Cache-Control": "max-age=6000, public"
                                }) : o.writeHead(200, {
                                    "content-type": r,
                                    "Cache-Control": "no-cache, no-store, must-revalidate",
                                    Pragma: "no-cache",
                                    Expires: "0"
                                }), "text/html" == r && pinegrow.sourceParser) {
                                var l = new pgParser;
                                l.replaceExistingIds = !0;
                                var s = function() {
                                        a.setCurrentRequestContext(d, l.rootNode), e = new Buffer(l.toStringWithIds(!0, null, a.createProxyUrlNodeOutputFilter)), o.write(e), o.end();
                                        var t = {
                                            rootNode: l.rootNode,
                                            data: e,
                                            url: i.href
                                        };
                                        $("body").trigger("crsa-server-page-loaded", t)
                                    },
                                    u = new CrsaProfile(!0),
                                    f = e.toString("utf8");
                                l.parse(f), u.show("HTML parse"), s(f), u.show("HTML sent")
                            } else o.write(e), o.end();
                        else p(403, "Type not allowed")
                    },
                    g = null,
                    m = !1,
                    h = null,
                    v = !1;
                if (i.query.pgid && (g = parseInt(i.query.pgid), h = pinegrow.getCrsaPageById(g)), i.query.pglive && (m = !0), i.query.pgnoids && "1" == i.query.pgnoids && (v = !0), m && h) {
                    o.writeHead(200, {
                        "content-type": "text/html",
                        "Cache-Control": "no-cache, no-store, must-revalidate",
                        Pragma: "no-cache",
                        Expires: "0"
                    }), a.setCurrentRequestContext(d, h.sourceNode);
                    var w = v ? h.sourceNode.toStringOriginal(!0, pinegrow.getFormatHtmlOptions(), a.createProxyUrlNodeOutputFilter) : h.sourceNode.toStringWithIds(!0, pinegrow.getFormatHtmlOptions(), a.createProxyUrlNodeOutputFilter),
                        b = new Buffer(w);
                    return o.write(b), o.end(), void 0
                }
                if (s) {
                    var y = s.match(/[&\?]pgid=([0-9]+)/);
                    if (y && (g = parseInt(y[1]), h = pinegrow.getCrsaPageById(g)), s.match(/[&\?]pglive=1/) && (m = !0), c.match(/\.css($|[^a-z])/g)) {
                        var l = u ? c : "file://" + c,
                            C = findCrsaStylesheetForUrl(l),
                            k = C.length > 0 ? C[0] : null;
                        if (k && k.loaded) return console.log("Live reload - found CSS " + c), k.getCssSource(function(e) {
                            var t = new Buffer(e);
                            o.write(t), o.end()
                        }), void 0
                    }
                }
                if (u) {
                    {
                        require("request")
                    }
                    if ("referer" in r.headers) {
                        var P = a.getOriginalUrl(r.headers.referer).replace(/^[a-z]+:\/\//i, "").split(/[//\?\#]/);
                        if (P.length) {
                            var S = P[0];
                            if (0 === c.indexOf("//")) {
                                var P = document.createElement("a");
                                P.href = r.headers.referer, c = P.protocol + c
                            } else c.indexOf("://") < 0 && (c = "http://" + S + "/" + c)
                        }
                    } else 0 === c.indexOf("//") && (c = "http:" + c);
                    if (h) {
                        var b = h.getAsset(c);
                        if (null !== b) return b === !1 ? p(404, "Not found or can't get remote file") : (o.write(b), o.end()), void 0
                    }
                    console.log("Getting remote file: " + c);
                    var T = new XMLHttpRequest;
                    return T.open("GET", c, !0), T.responseType = "arraybuffer", T.onreadystatechange = function() {
                        if (4 == T.readyState)
                            if (200 == T.status) {
                                var e = T.response;
                                if (e) {
                                    var t = new Buffer(new Uint8Array(e)),
                                        a = T.getResponseHeader("content-type");
                                    a && (a = a.split(";")[0]), f(t, a)
                                }
                            } else p(404, "Not found or can't get remote file: " + c), h && h.addAsset(c, !1)
                    }, T.onerror = function(e) {
                        p(404, "Not found or can't get remote file: " + c, e), h && h.addAsset(c, !1)
                    }, T.send(null), void 0
                }
                t.fs.exists(c, function(e) {
                    e ? t.fs.readFile(c, function(e, t) {
                        e ? p(404, "Not found") : f(t)
                    }) : p(404, "Not found")
                })
            });
            r.on("error", function() {
                console.log("Could not start internal http server."), alert("Could not start the internal webserver on port " + e.port + ". Please make sure that the port is available and that connections are not blocked by a firewall. Use Support -> Settings to set the port.")
            }), r.listen(e.port)
        } catch (o) {}
    };
