var CrsaProfile = function (enab) {
    var enabled = false;
    var start_ms;
    if (enabled) {
        start_ms = (new Date).getTime()
    }
    this.show = function (name) {
        if (enabled) {
            var elapsed_ms = (new Date).getTime() - start_ms;
            console.log(name + " took " + elapsed_ms + " ms")
        }
    }
};
function crsaRunExternalCommand(cmd, params, onClose) {
    var spawn = require("child_process").spawn;
    var prc = spawn(cmd, params);
    prc.stdout.setEncoding("utf8");
    prc.stdout.on("data", function (data) {
    });
    prc.on("close", function (code) {
        console.log("process exit code " + code);
        if (onClose)onClose()
    })
}
function diffStrings(s1, s2) {
    for (var i = 0; i < s1.length; i++) {
        if (i >= s2.length)return i;
        if (s1.charAt(i) != s2.charAt(i))return i
    }
    return -1
}
function describeDiffStrings(s1, s2) {
    var i = diffStrings(s1, s2);
    if (i < 0) {
        return "Strings are EQUAL"
    } else {
        var si = i - 20;
        if (si < 0)si = 0;
        return "Strings are DIFFERENT at " + i + " s1[" + s1.length + ']="' + escapeHtmlCode(s1.substr(si, 25)) + '" s2[' + s2.length + ']="' + escapeHtmlCode(s2.substr(si, 25)) + '"'
    }
}
function escapeRegExp(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&")
}
function escapeHtmlCode(t) {
    return t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
}
var cssHelperLink = document.createElement("a");
var crsaAppendQueryToUrl = function (url, queries) {
    cssHelperLink.href = url;
    if (cssHelperLink.search)cssHelperLink.search += "&";
    cssHelperLink.search += queries.join("&");
    return cssHelperLink.href
};
var crsaMakeLinkRelativeTo = function (link, parent) {
    var re = /^[a-z:]*\/+/i;
    var m_link = link.match(re);
    if (!m_link)return link;
    var link_prot = m_link[0];
    var m_parent = parent.match(re);
    if (!m_parent)return link;
    var parent_prot = m_parent[0];
    if (link_prot.toLowerCase() != parent_prot.toLowerCase())return link;
    var a = link.replace(re, "").split("/");
    var p = parent.replace(re, "").split("/");
    var i = 0;
    while (i < a.length && i < p.length && a[i] == p[i]) {
        i++
    }
    if (i == 0) {
        return link
    } else {
        a.splice(0, i);
        if (p.length > i + 1) {
            for (var n = 0; n < p.length - i - 1; n++) {
                a.unshift("..")
            }
        }
        var rel = a.join("/");
        if (rel.indexOf("../..") >= 0) {
            return link
        }
        return rel
    }
};
function crsaMakeUrlAbsolute(url) {
    if (url.match(/^[a-z]*:\/\//i))return url;
    return crsaMakeUrlFromFile(crsaGetAppDir() + url)
}
function crsaDuplicateName(orig_name, local_file, skip) {
    var a = orig_name.split(".");
    var i = a.length > 1 ? a.length - 2 : a.length - 1;
    var c = 0;
    var found;
    var name;
    var localBase = local_file ? crsaGetFileDir(local_file) : null;
    var fs = isApp() ? require("fs") : null;
    do {
        a[i] = a[i].replace(/\([0-9]+\)$/i, "");
        a[i] = c == 0 ? a[i] : a[i] + "(" + c + ")";
        name = a.join(".");
        found = false;
        if (skip) {
            if (skip.indexOf(name) >= 0)found = true
        }
        if (!found && fs && localBase) {
            var newFile = localBase + name;
            if (fs.existsSync(newFile)) {
                found = true
            }
        }
        c++
    } while (found);
    return name
}
function crsaGetFileDir(file) {
    if (isApp()) {
        var path = require("path");
        var dir = path.dirname(file);
        if (dir.charAt(dir.length - 1) != path.sep)dir += path.sep;
        return dir
    }
    var a = file.split("/");
    var dir = "";
    if (a.length > 1) {
        a.splice(a.length - 1, 1);
        dir = a.join("/")
    }
    if (dir.charAt(dir.length - 1) != "/")dir += "/";
    return dir
}
function crsaGetAppDir() {
    if (isApp()) {
        return crsaGetFileDir(crsaMakeFileFromUrl(window.location.href))
    } else {
        return null
    }
}
function crsaIsFileOrDir(path, fs) {
    if (!isApp())return false;
    try {
        if (!fs)fs = require("fs");
        var stat = fs.statSync(path);
        if (stat.isFile())return "file";
        if (stat.isDirectory())return "dir";
        return null
    } catch (err) {
        return null
    }
}
function crsaCopyFileSync(fs, source, dest) {
    var data = fs.readFileSync(source);
    fs.writeFileSync(dest, data)
}
function crsaCopyFile(fs, source, target, cb) {
    var cbCalled = false;
    var rd = fs.createReadStream(source);
    rd.on("error", function (err) {
        done(err)
    });
    var wr = fs.createWriteStream(target);
    wr.on("error", function (err) {
        done(err)
    });
    wr.on("close", function (ex) {
        done()
    });
    rd.pipe(wr);
    function done(err) {
        if (!cbCalled) {
            cb(err);
            cbCalled = true
        }
    }
}
function crsaWriteFileWithBackup(fs, file, data, enc) {
    if (!fs)fs = require("fs");
    if (crsaIsFileOrDir(file, fs) == "file") {
        if (pinegrow.getSetting("backup", "1") == "1") {
            var path = require("path");
            var dir = crsaGetFileDir(file) + "_pgbackup";
            if (!crsaIsFileOrDir(dir, fs)) {
                fs.mkdirSync(dir)
            }
            dir += path.sep;
            var name = getPageName(file);
            var a = name.split(".");
            var mark = "_" + Math.floor((new Date).getTime() / 1e3);
            if (a.length > 1) {
                a[a.length - 2] += mark
            } else {
                a[0] += mark
            }
            var bckfile = dir + a.join(".");
            crsaCopyFileSync(fs, file, bckfile)
        }
    } else {
        var paths = crsaGetFileDir(file);
        crsaCreateDirs(paths, fs)
    }
    console.log("writing file " + file);
    fs.writeFileSync(file, data, enc)
}
function crsaRemoveUrlParameters(url) {
    var a = url.split(/[\?\#]/);
    return a.length > 0 ? a[0] : url
}
function crsaCreateDirs(path, fs) {
    var pm = require("path");
    if (crsaIsFileOrDir(path, fs))return false;
    var a = path.split(pm.sep);
    var p = "";
    for (var i = 0; i < a.length; i++) {
        if (a[i].length == 0) {
            p += pm.sep;
            continue
        }
        p += pm.sep + a[i];
        if (!crsaIsFileOrDir(p, fs)) {
            fs.mkdirSync(p)
        }
    }
    return true
}
function crsaMakeUrlFromFile(file) {
    var f = "file://";
    if (isApp()) {
        var path = require("path");
        if (file.match(/^[a-z]\:/i)) {
            file = "/" + file
        } else if (file.startsWith("\\\\")) {
            file = file.substr(2)
        }
    }
    return f + encodeURI(file.replace(/\\/g, "/"))
}
function crsaMakeFileFromUrl(url, skip_remove_params) {
    if (isApp()) {
        var path = require("path");
        var f = path.sep == "/" ? "file://" : "file://";
        if (!skip_remove_params) {
            url = crsaRemoveUrlParameters(url)
        }
        if (!url.startsWith(f)) {
            return decodeURI(url.replace(/\//g, path.sep))
        }
        url = url.replace(f, "");
        if (path.sep == "\\") {
            if (url.startsWith("/")) {
                url = url.substr(1)
            } else {
                url = "//" + url
            }
        }
        return decodeURI(url.replace(/\//g, path.sep))
    } else {
        return crsaRemoveUrlParameters(url).replace("file://", "")
    }
}
function crsaIsFileUrl(url) {
    return url.indexOf("file:") == 0
}
function crsaGetNameFromUrl(url, def) {
    url = crsaRemoveUrlParameters(url);
    var n = url.split(/[\\\/]/).pop();
    if (n.length == 0)n = def;
    var a = n.split("?");
    return a.length > 1 ? a[0] : n
}
function crsaGetBaseForUrl(url) {
    url = crsaRemoveUrlParameters(url);
    var a = url.split(/[\/]/);
    a.pop();
    return a.join("/")
}
function crsaCombineUrlWith(url, doc) {
    url = crsaGetBaseForUrl(url);
    if (doc.length == 0)return url;
    if (doc.charAt(0) != "/") {
        doc = "/" + doc
    }
    return url + doc
}
function crsaIsAbsoluteUrl(url) {
    return url.indexOf("://") >= 0 || url.indexOf("//") === 0
}
var splitCssValue = function (v, comma_as_token) {
    var r = [];
    if (!v || v.length == 0)return r;
    v = v + " \n";
    var token = "";
    var in_exp = false;
    var operands = "+-/*";
    var space = false;
    var par_level = 0;
    var quote_level = 0;
    for (var i = 0; i < v.length; i++) {
        var ch = v.charAt(i);
        if (ch == " ") {
            space = true
        } else {
            if (comma_as_token && ch == "," && par_level == 0 && quote_level == 0) {
                r.push($.trim(token));
                space = false;
                token = "";
                r.push(",");
                continue
            } else if (space && par_level == 0 && quote_level == 0) {
                r.push($.trim(token));
                space = false;
                token = ""
            }
            if (ch == "(") {
                par_level++
            } else if (ch == ")") {
                par_level--
            } else if (ch == '"' || ch == "'") {
                quote_level = quote_level == 0 ? 1 : 0
            }
        }
        token = token + ch
    }
    token = $.trim(token);
    if (token.length > 0 && token != "\n") {
        r.push(token)
    }
    return r
};
var getUrlFromCssUrlValue = function (url) {
    url = url.replace(/[\'\"]/g, "");
    var m = url.match(/url\(([^\)]*)\)/i);
    return m ? m[1] : url
};
var CssBackgroundParser = function (css) {
    var _this = this;
    this.parse = function (bg) {
        this.css = bg;
        this.color = "";
        this.image = "";
        this.repeat = "";
        this.attachment = "";
        this.position = "";
        this.important = false;
        var def = ["transparent", "none", "repeat", "scroll", "0%", "0%"];
        var idx = -1;
        var a = splitCssValue(bg, true);
        a.push(",");
        var bcka = [];
        for (var i = 0; i < a.length; i++) {
            if (a[i].match(/\!important/i)) {
                this.important = true;
                continue
            } else if (a[i] == ",") {
                if (this.color.length > 0)this.color += ", ";
                this.color += bcka.length >= 1 ? bcka[0] : def[0];
                if (this.image.length > 0)this.image += ", ";
                this.image += bcka.length >= 2 ? bcka[1] : def[1];
                if (this.repeat.length > 0)this.repeat += ", ";
                this.repeat += bcka.length >= 3 ? bcka[2] : def[2];
                if (this.attachment.length > 0)this.attachment += ", ";
                this.attachment += bcka.length >= 4 ? bcka[3] : def[3];
                if (this.position.length > 0)this.position += ", ";
                this.position += bcka.length >= 5 ? bcka[4] : def[4];
                this.position += " ";
                this.position += bcka.length >= 6 ? bcka[5] : def[5];
                bcka = []
            } else {
                bcka.push(a[i])
            }
        }
        this.color = apply_important(this.color);
        this.image = apply_important(this.image);
        this.repeat = apply_important(this.repeat);
        this.attachment = apply_important(this.attachment);
        this.position = apply_important(this.position)
    };
    var apply_important = function (prop) {
        return prop + (_this.important ? " !important" : "")
    };
    this.getValue = function (prop) {
        switch (prop.toLowerCase()) {
            case"background-color":
                return this.color;
            case"background-image":
                return this.image;
            case"background-repeat":
                return this.repeat;
            case"background-attachment":
                return this.attachment;
            case"background-position":
                return this.position;
            default:
                return null
        }
    };
    if (css)this.parse(css)
};
function crsaAddCancelSearch($input, style) {
    var $cancel = $("<a/>", {
        "class": "cancel-search",
        href: "#"
    }).html("&times;").appendTo($input.parent()).on("click", function (e) {
        e.preventDefault();
        $input.val("").trigger("input")
    });
    $input.on("input", function () {
        var val = $input.val();
        if (val && val.length) {
            $cancel.show()
        } else {
            $cancel.hide()
        }
    });
    $cancel.hide();
    if (style)$cancel.attr("style", style)
}