var CrsaBrowserStorage = function () {
    var getKey = function (url) {
        return "localSave_" + url
    };
    this.save = function (url, data) {
        var key = getKey(url);
        localStorage[key] = data
    };
    this.exists = function (url) {
        return getKey(url)in localStorage
    };
    this.load = function (url) {
        var key = getKey(url);
        return key in localStorage ? localStorage[key] : null
    };
    this.saveProject = function () {
        var d = {pages: [], css: []};
        $.each($.fn.crsapages("getAllPages"), function (i, cp) {
            d.pages.push({url: cp.url, html: cp.getSource(false), name: cp.name});
            cp.setPageChanged(false)
        });
        if (d.pages.length == 0)return null;
        $.each($.fn.crsacss("getAllCrsaStylesheets"), function (i, cs) {
            if (!cs.inline && cs.loaded) {
                d.css.push({url: cs.url, less: cs.genGetSource()});
                cs.changed = false
            }
        });
        var str = JSON.stringify(d);
        if (str.length > 2e6) {
            alert("Sorry, the project is too big to save. Use File -> Save.")
        } else {
            localStorage.savedProject = str
        }
        return d
    };
    this.hasSavedProject = function () {
        return "savedProject"in localStorage
    };
    this.restoreProject = function (done) {
        if (!this.hasSavedProject())return null;
        try {
            var json = localStorage.savedProject;
            var d = JSON.parse(json);
            var idx = 0;
            var cssidx = 0;
            var loadCss = function () {
                if (cssidx >= d.css.length) {
                    $("body").trigger("crsa-stylesheets-changed");
                    if (done)done()
                } else {
                    var css = d.css[cssidx];
                    var cslist = findCrsaStylesheetForUrl(css.url);
                    var cs;
                    if (cslist && cslist.length > 0) {
                        cs = cslist[0];
                        cs.genSetSource(css.less, function () {
                            cssidx++;
                            loadCss()
                        })
                    } else {
                        $.fn.crsacss("addStylesheetFromUrl", css.url, function (cs) {
                            cs.genSetSource(css.less, function () {
                                cssidx++;
                                loadCss()
                            })
                        })
                    }
                }
            };
            var loadPage = function () {
                var page = d.pages[idx];
                $.fn.crsa("openPage", page.url, function () {
                }, function (crsaPage) {
                    setPageSource(crsaPage.$iframe, page.html, null, true);
                    crsaPage.runScripts(function () {
                        crsaPage.callFrameworkHandler("on_page_loaded");
                        $.fn.crsa("updateIfNeeded");
                        crsaPage.addCrsaStyles()
                    });
                    if (page.name) {
                        crsaPage.name = page.name;
                        crsaPage.updateNameDisplay()
                    }
                }, null, function (crsaPage) {
                    idx++;
                    if (idx < d.pages.length) {
                        loadPage()
                    } else {
                        loadCss()
                    }
                })
            };
            if (d.pages.length > 0) {
                loadPage()
            }
            return d
        } catch (err) {
            return null
        }
    }
};
var CrsaLocalStorage = function () {
    var fs = null;
    var data = {};
    var _this = this;
    var saveTimer = null;
    var saveData = function () {
        if (saveTimer) {
            clearTimeout(saveTimer)
        }
        saveTimer = setTimeout(function () {
            var str = JSON.stringify(data);
            str = window.btoa(encodeURIComponent(str));
            localStorage.crsaInternal = str
        }, 100)
    };
    this.setValue = function (key, val) {
        if (isApp()) {
            data[key] = val;
            saveData()
        } else {
            localStorage[key] = val
        }
    };
    this.getValue = function (key) {
        if (isApp()) {
            return key in data ? data[key] : null
        } else {
            return key in localStorage ? localStorage[key] : null
        }
    };
    this.hasValue = function (key) {
        if (isApp()) {
            return key in data ? true : false
        } else {
            return key in localStorage ? true : false
        }
    };
    if (isApp()) {
        if (!localStorage.crsaInternal) {
            $.each(localStorage, function (key, val) {
                data[key] = val
            });
            saveData()
        } else {
            try {
                data = JSON.parse(decodeURIComponent(window.atob(localStorage.crsaInternal)))
            } catch (err) {
                data = {}
            }
        }
    } else {
    }
};
var CrsaProject = function () {
    this.name = "Project";
    this.root = null;
    this.localPath = null;
    this.url = null;
    this.entityMap = {};
    this.frameworks = [];
    var _this = this;
    this.getFile = function (path) {
        var paths = path.split("/");
        var current_node = this.root;
        for (var i = 0; i < paths.length; i++) {
            var p = paths[i];
            if (p.length == 0)continue;
            for (var n = 0; n < current_node.children.length; n++) {
                var child = current_node.children[n];
                if (child.name == p) {
                    if (child.isFile || i == paths.length - 1) {
                        return child
                    } else {
                        current_node = child;
                        break
                    }
                }
            }
        }
        return null
    };
    this.toJSON = function () {
        var d = {};
        d.name = this.name;
        d.root = this.root;
        d.localPath = this.localPath;
        d.url = this.url;
        return JSON.stringify(d)
    };
    this.getDocuments = function () {
        var list = [];
        $.each(this.root.children, function (i, f) {
            if (f.name.match(/\.html$/i))list.push(f)
        });
        return list
    };
    this.fromSimpleTemplate = function (def) {
        this.url = def.url;
        this.name = def.name;
        if (def.frameworks) {
            this.frameworks = def.frameworks
        }
        this.root = new CrsaFile;
        this.root.isFile = false;
        this.root.name = def.name;
        this.root.url = def.url;
        var path = crsaGetAppDir();
        this.root.path = path + crsaMakeFileFromUrl(def.url);
        var addPages = function (pages, node, url) {
            var sep = isApp() ? require("path").sep : "/";
            $.each(pages, function (i, p) {
                if (!p.children) {
                    var f = new CrsaFile;
                    f.name = p.src;
                    f.isFile = true;
                    f.url = url + f.name;
                    if (path)f.path = node.path + f.name;
                    if (p.tag)f.tag = p.tag;
                    if (p.required)f.required = true;
                    f.image = p.image ? url + p.image : url + "screenshots" + sep + f.name.replace("html", "jpg");
                    node.children.push(f)
                } else {
                    var d = new CrsaFile;
                    d.name = p.src;
                    d.isFile = false;
                    d.url = url + d.name;
                    if (p.tag)d.tag = p.tag;
                    if (p.required)d.required = true;
                    if (path)d.path = node.path + d.name + sep;
                    node.children.push(d);
                    addPages(p.children, d, d.url + sep)
                }
            })
        };
        addPages(def.pages, _this.root, def.url)
    };
    this.openProjectBySelectingFolder = function (done) {
        crsaChooseFile(function (url, file) {
            _this.fromFolder(file, done)
        }, false, false, null, true)
    };
    this.fromFolder = function (dir, done) {
        this.url = crsaMakeUrlFromFile(dir);
        this.name = crsaGetNameFromUrl(this.url);
        this.root = new CrsaFile;
        this.root.isFile = false;
        this.root.name = this.name;
        this.root.url = this.url;
        var path = dir;
        this.root.path = path;
        var fs = require("fs");
        var pathmodule = require("path");
        var sep = pathmodule.sep;
        var walk = function (node, dir, done) {
            var results = [];
            fs.readdir(dir, function (err, list) {
                if (err)return done(err);
                var pending = list.length;
                if (!pending)return done(null, results);
                list.forEach(function (filename) {
                    if (filename.charAt(0) == "." || filename == "_pgbackup" || filename == "pinegrow.json" || filename == "_pgexport") {
                        if (!--pending)done(null, results);
                        return true
                    }
                    var file = pathmodule.resolve(dir, filename);
                    fs.stat(file, function (err, stat) {
                        if (stat && stat.isDirectory()) {
                            var d = new CrsaFile;
                            d.name = filename;
                            d.isFile = false;
                            d.url = node.url + sep + d.name;
                            d.path = file + sep;
                            node.children.push(d);
                            walk(d, file, function (err, res) {
                                results = results.concat(res);
                                if (!--pending)done(null, results)
                            })
                        } else {
                            var f = new CrsaFile;
                            f.name = filename;
                            f.isFile = true;
                            f.url = node.url + sep + f.name;
                            f.path = file;
                            node.children.push(f);
                            results.push(file);
                            if (!--pending)done(null, results)
                        }
                    })
                })
            })
        };
        walk(_this.root, dir, function (err) {
            done(_this)
        })
    };
    this.showProjectExplorer = function ($lib) {
        var $container = $lib;
        var filter = null;
        var $header = $lib.find(">.header");
        var $input = $("<input/>", {"class": "form-control filter-form", placeholder: "search"}).appendTo($header);
        crsaAddCancelSearch($input);
        var selectedCrsaPage;
        var $manage = $('<a href="#" class="icon-action"><i class="fa fa-cog"></i></a>').appendTo($header);
        $manage.on("click", function (e) {
            e.preventDefault()
        }).tooltip({container: "body", placement: "right", title: "Set project options.", trigger: "hover"});
        var $content = $lib.find(">.content");
        var $list = $("<ul/>").appendTo($content);
        var currentPage = null;
        var pageChanged = function (crsaPage) {
            currentPage = crsaPage;
            updateUsage()
        };
        $("body").on("crsa-page-selected", function (e, crsaPage) {
            pageChanged(crsaPage)
        });
        $("body").on("crsa-element-selected", function (e, crsaPage) {
            var page = pinegrow.getSelectedPage();
            if (currentPage != page) {
                pageChanged(page)
            }
        });
        var getFileForPath = function (path) {
            var a = path.split(",");
            var n = _this.root;
            for (var i = 1; i < a.length; i++) {
                var idx = parseInt(a[i]);
                if (n.children.length <= idx)return null;
                n = n.children[idx]
            }
            return n
        };
        var updateList = function (sections) {
            var selectedCrsaPage = currentPage;
            $list.html("");
            $content.find(">h2").remove();
            var $title = $("<h2></h2>").prependTo($content);
            $title.html(_this.name);
            filter = $input.val();
            var filterRegEx = filter && filter.length > 0 ? new RegExp(escapeRegExp(filter), "i") : null;
            var html = "";
            var showLevel = function (node, path) {
                for (var i = 0; i < node.children.length; i++) {
                    var n = node.children[i];
                    var item_path = path + "," + i;
                    var icon = "";
                    if (!n.isFile) {
                        icon = '<i class="fa fa-caret-right"></i>'
                    }
                    html += '<li class="project-item ' + (n.isFile ? "file" : "folder") + '" data-path="' + item_path + '">' + icon + "<name>" + n.name + "</name>";
                    if (n.children.length) {
                        html += "<ul>";
                        showLevel(n, item_path);
                        html += "</ul>"
                    }
                    html += "</li>"
                }
            };
            showLevel(_this.root, "");
            $list.html(html);
            $list.find("li.project-item name").on("dblclick.project", function (e) {
                e.preventDefault()
            }).on("click.project", function (e) {
                var $el = $(e.delegateTarget);
                e.preventDefault();
                var $li = $el.closest("li");
                var file = getFileForPath($li.attr("data-path"));
                console.log(file);
                if (file) {
                    var cp = pinegrow.getCrsaPageByUrl(file.url);
                    if (cp) {
                        cp.scrollToPage()
                    } else {
                        pinegrow.openPage(file.url)
                    }
                }
            }).on("contextmenu", function (e) {
            });
            updateUsage()
        };
        var updateUsage = function () {
            $container.find("li.project-item").each(function (i, a) {
                var $li = $(a);
                var def = $li.data("crsa-factory-def")
            })
        };
        updateList();
        $input.on("input", function () {
            updateList()
        })
    };
    this.copyRequiredFilesTo = function (dir, filter_func, fileWriter) {
        var fs = require("fs");
        var path = require("path");
        var copyNodes = function (nodes, dest) {
            $.each(nodes, function (i, cf) {
                var req = cf.required || filter_func && filter_func(cf);
                if (!req)return true;
                var dest_path = dest + cf.name;
                var exists = crsaIsFileOrDir(dest_path, fs);
                if (exists && cf.isFile) {
                    var sourcestat = fs.statSync(cf.path);
                    var deststat = fs.statSync(dest_path);
                    if (deststat.mtime < sourcestat.mtime || fileWriter) {
                        exists = false
                    }
                }
                if (!exists) {
                    if (cf.isFile) {
                        console.log("copy " + cf.path + " to " + dest_path);
                        if (!fileWriter) {
                            crsaCopyFileSync(fs, cf.path, dest_path)
                        } else {
                            fileWriter.copyFile(dest_path, cf.path)
                        }
                    } else {
                        fs.mkdirSync(dest_path)
                    }
                }
                if (cf.children) {
                    copyNodes(cf.children, dest_path + path.sep)
                }
            })
        };
        copyNodes(this.root.children, dir)
    };
    this.copyRequiredFilesToZip = function (zip, done) {
        var count = 0;
        var copyNodes = function (nodes, zip, folder) {
            $.each(nodes, function (i, cf) {
                if (!cf.required)return true;
                if (cf.isFile) {
                    console.log("copy " + cf.url + " to " + folder);
                    count++;
                    $.ajax({url: cf.url, data: null, dataType: "text"}).done(function (data) {
                        setTimeout(function () {
                            zip.file(cf.name, data);
                            count--;
                            if (count == 0)done()
                        }, 0)
                    }).fail(function () {
                        setTimeout(function () {
                            count--;
                            console.log("can not read " + cf.url);
                            if (count == 0)done()
                        }, 0)
                    })
                } else {
                    var subzip = zip.folder(cf.name);
                    if (cf.children) {
                        copyNodes(cf.children, subzip, folder + "/" + cf.name)
                    }
                }
            })
        };
        copyNodes(this.root.children, zip, "/");
        if (count == 0)done()
    }
};
var CrsaFile = function (entityMapObject) {
    this.isFile = true;
    this.name = null;
    this.path = null;
    this.url = null;
    this.children = [];
    this.entity = null;
    this.image = null;
    this.required = false;
    this.tag = null;
    var entityMap = entityMapObject;
    this.fromEntity = function (entity) {
        this.isFile = entity.isFile;
        this.name = entity.name;
        this.path = entity.fullPath;
        if (entityMap)entityMap[this.path] = entity;
        return this
    };
    this.getEntity = function () {
        if (entityMap && this.path && this.path in entityMap)return entityMap[this.path];
        return null
    };
    return this
};
var CrsaStore = function () {
    this.type = "AbstractStore";
    this.listProjects = function (search) {
    };
    this.getProject = function (pid, done) {
    };
    this.createProjectFromTemplate = function (template) {
    };
    this.saveProject = function (project) {
    };
    this.deleteProject = function (pid) {
    };
    this.createProjectFile = function (project, path, data) {
    };
    this.saveProjectFile = function (project, path, data) {
    };
    this.deleteProjectFile = function (project, path) {
    };
    this.copyProjectFile = function (project, path_source, path_dest) {
    };
    this.getProjectFileUrl = function (project, path) {
    }
};
var CrsaFileStore = function () {
    this.name = "FileStore";
    this.app = location.protocol == "chrome-extension:";
    var _this = this;
    this.listProjects = function (search) {
    };
    this.getProject = function (pid, done) {
        chrome.fileSystem.chooseEntry({type: "openDirectory"}, function (dir) {
            console.log(dir);
            _this.loadProject(dir, done)
        })
    };
    this.loadProject = function (dir, done) {
        var project = new CrsaProject;
        project.root = new CrsaFile(project.entityMap).fromEntity(dir);
        chrome.fileSystem.getDisplayPath(dir, function (path) {
            project.name = project.root.name;
            project.localPath = path;
            var dirReader = dir.createReader();
            var readingLevel = 0;
            var readEntries = function (dirReader, node, done) {
                readingLevel++;
                dirReader.readEntries(function (results) {
                    readingLevel--;
                    if (!results.length) {
                        if (readingLevel <= 0)done()
                    } else {
                        for (var n = 0; n < results.length; n++) {
                            var subNode = new CrsaFile(project.entityMap);
                            subNode.fromEntity(results[n]);
                            node.children.push(subNode);
                            if (!subNode.isFile) {
                                var subdirReader = results[n].createReader();
                                readEntries(subdirReader, subNode, done)
                            }
                        }
                        readEntries(dirReader, node, done)
                    }
                }, function (err) {
                    readingLevel--;
                    console.log(err);
                    if (readingLevel <= 0)done()
                })
            };
            readEntries(dirReader, project.root, function () {
                done(project)
            })
        })
    };
    this.saveProject = function (project) {
    };
    this.createProjectFromTemplate = function (template, done) {
        var url = chrome.runtime.getURL("/templates/" + template + "/pinegrow.json");
        console.log(url);
        $.ajax({url: url, data: null, dataType: "json"}).done(function (data) {
            console.log(data);
            chrome.fileSystem.chooseEntry({type: "openDirectory"}, function (dir) {
                chrome.fileSystem.isWritableEntry(dir, function (writable) {
                    if (writable) {
                        var level = 0;
                        var decreaseLevel = function () {
                            level--;
                            if (level <= 0) {
                                _this.loadProject(dir, function (p) {
                                    done(p)
                                })
                            }
                        };
                        var copyTemplateNodeToDest = function (data, dir, done) {
                            console.log("copying dir " + data.name);
                            for (var i = 0; i < data.children.length; i++) {
                                var node = data.children[i];
                                console.log(node.path);
                                if (node.isFile) {
                                    level++;
                                    var url = chrome.runtime.getURL("/templates/" + template + node.path.replace("/" + template, ""));
                                    var xhr = new XMLHttpRequest;
                                    xhr.open("GET", url, true);
                                    xhr.responseType = "blob";
                                    xhr.crsaNode = node;
                                    xhr.onload = function (e) {
                                        var node = this.crsaNode;
                                        var blob = this.response;
                                        dir.getFile(node.name, {create: true}, function (fileEntry) {
                                            fileEntry.createWriter(function (fileWriter) {
                                                fileWriter.onwriteend = function (e) {
                                                    console.log("Write completed.");
                                                    decreaseLevel()
                                                };
                                                fileWriter.onerror = function (e) {
                                                    console.log("Write failed: " + e.toString());
                                                    decreaseLevel()
                                                };
                                                fileWriter.write(blob)
                                            }, function (err) {
                                                decreaseLevel();
                                                console.log(err)
                                            })
                                        }, function (err) {
                                            decreaseLevel();
                                            console.log(err)
                                        })
                                    };
                                    xhr.send()
                                } else {
                                    level++;
                                    var func = function (node) {
                                        dir.getDirectory(node.name, {create: true}, function (dirEntry) {
                                            copyTemplateNodeToDest(node, dirEntry, done);
                                            decreaseLevel()
                                        }, function (err) {
                                            decreaseLevel();
                                            console(err)
                                        })
                                    };
                                    func(node)
                                }
                            }
                        };
                        copyTemplateNodeToDest(data.root, dir, function () {
                            console.log("template copied to project.")
                        })
                    } else {
                        console.log(dir + " is not writable.")
                    }
                });
                console.log(dir)
            })
        }).fail(function (err) {
            console.log(err)
        })
    };
    this.deleteProject = function (pid) {
    };
    this.createProjectFile = function (project, path, data) {
    };
    this.saveProjectFile = function (project, path, data) {
    };
    this.deleteProjectFile = function (project, path) {
    };
    this.copyProjectFile = function (project, path_source, path_dest) {
    };
    this.getProjectFileUrl = function (project, path) {
    }
};
CrsaFileStore.prototype = new CrsaStore;
var CrsaOverwriteProtectionFileWriter = function (root_source, root_dest) {
    var fs = require("fs");
    var path = require("path");
    var mkdirp = require("mkdirp");
    var dir_exist = {};
    var _this = this;
    var ask_overwrite = [];
    this.root_source = path.join(root_source, path.sep);
    this.root_dest = path.join(root_dest, path.sep);
    this.export_cache = path.join(this.root_source, "_pgexport");
    this.getDestNameFromSource = function (source) {
        if (source.indexOf(this.root_source) < 0)return null;
        var local = source.replace(this.root_source, "");
        return path.join(this.root_dest, local)
    };
    var canWrite = function (dest, content, source) {
        if (!fs.existsSync(dest))return true;
        var cacheFile = getCacheFileForDest(dest);
        if (areFilesSame(cacheFile, dest)) {
            return true
        } else {
            return false
        }
    };
    var copyToCache = function (dest) {
        var file = getCacheFileForDest(dest);
        var dir = path.dirname(file);
        if (!dir_exist[dir]) {
            mkdirp.sync(dir);
            dir_exist[dir] = true
        }
        crsaCopyFileSync(fs, dest, file);
        console.log("EXPORT CACHE - " + file)
    };
    var getCacheFileForDest = function (dest) {
        var name = getFileName(dest);
        return path.join(_this.export_cache, name)
    };
    var areFilesSame = function (f1, f2, content) {
        try {
            var data1 = fs.readFileSync(f1);
            var data2 = !content ? fs.readFileSync(f2) : typeof content == "string" ? new Buffer(content, "utf8") : content;
            return Buffer.compare(data1, data2) === 0
        } catch (err) {
            return false
        }
    };
    var write = function (dest, content) {
        if (typeof content == "string") {
            fs.writeFileSync(dest, content, {encoding: "utf8"})
        } else {
            fs.writeFileSync(dest, content)
        }
        copyToCache(dest)
    };
    var copy = function (dest, source) {
        var dir = path.dirname(dest);
        if (!dir_exist[dir]) {
            mkdirp.sync(dir);
            dir_exist[dir] = true
        }
        crsaCopyFileSync(fs, source, dest);
        console.log("COPY " + source + " -> " + dest);
        copyToCache(dest)
    };
    var addToAskWrite = function (dest, content, done) {
        ask_overwrite.push({file: dest, content: content, done: done})
    };
    var addToAskCopy = function (dest, source, done) {
        ask_overwrite.push({file: dest, source: source, done: done})
    };
    var getFileName = function (dest) {
        return dest.replace(_this.root_dest, "")
    };
    this.writeFile = function (dest, content, done) {
        if (!canWrite(dest, content)) {
            addToAskWrite(dest, content, done)
        } else {
            write(dest, content);
            if (done)done(dest, content)
        }
    };
    this.copyFile = function (dest, source, done) {
        if (!canWrite(dest, null, source)) {
            addToAskCopy(dest, source, done)
        } else {
            copy(dest, source);
            if (done)done(dest, null, source)
        }
    };
    var copyOrWriteAskItem = function (file) {
        if (file.source) {
            copy(file.file, file.source);
            if (file.done)file.done(file.file, null, file.source)
        } else {
            write(file.file, file.content);
            if (file.done)file.done(file.file, file.content)
        }
    };
    this.askIfNeeded = function (done) {
        if (ask_overwrite.length) {
            var $b = $("<div><p>Do you want to overwrite the following files in folder <b>" + this.root_dest + "</b>?</p><p>It looks like these files were modified since you last exported them.</p></div>");
            var $table = $('<table class="file-writer table table-striped table-condensed table-hover"><thead><tr><td><label><input type="checkbox" class="check-all" value="1" />&nbsp; Select all</label></td></tr></thead><tbody></tbody></table>').appendTo($b);
            var $tbody = $table.find("tbody");
            var $checkall = $table.find("input.check-all");
            for (var j = 0; j < 1; j++) {
                for (var i = 0; i < ask_overwrite.length; i++) {
                    var name = getFileName(ask_overwrite[i].file);
                    var $tr = $('<tr data-index="' + i + '"><td><label><input type="checkbox" value="1" />&nbsp;' + name + "</label></td></tr>").appendTo($tbody)
                }
            }
            var $modal = makeModalDialog("Confirm file overwrite", "Cancel", "Save selected", $b, function () {
                if (done)done(true)
            }, function () {
                $checks.each(function (i, ch) {
                    var $ch = $(ch);
                    var $tr = $ch.closest("tr");
                    var file = ask_overwrite[parseInt($tr.attr("data-index"))];
                    if ($ch.is(":checked")) {
                        copyOrWriteAskItem(file)
                    }
                });
                if (done)done()
            });
            var $checks = $tbody.find('input[type="checkbox"]');
            $checks.on("change", function (e) {
                var $ch = $(e.delegateTarget);
                var $tr = $ch.closest("tr");
                var file = ask_overwrite[parseInt($tr.attr("data-index"))]
            });
            $checkall.on("change", function (e) {
                if ($checkall.is(":checked")) {
                    $checks.prop("checked", true)
                } else {
                    $checks.prop("checked", false)
                }
            })
        } else {
            if (done)done()
        }
    }
};